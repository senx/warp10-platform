//
//   Copyright 2018-2021  SenX S.A.S.
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.
//

sourceSets {
    main {
        java {
            srcDir new File(project(':warp10').projectDir, "src/main/java")
            include 'io/warp10/Py4JEntryPoint.*'
            include 'io/warp10/SortedPathIterator.*'
            include 'io/warp10/SortedPathIterator$*'
            include 'io/warp10/WarpClassLoader.*'
            include 'io/warp10/json/**'
            include 'io/warp10/script/**'
            exclude 'io/warp10/script/ScriptRunner*.*'
            include 'io/warp10/CapacityExtractorOutputStream.*'
            include 'io/warp10/udf/**'
            include 'io/warp10/thrift/**'
            include 'io/warp10/WarpConfig.*'
            include 'io/warp10/WarpConfig$1.*'
            include 'io/warp10/WarpHexDecoder.*'
            include 'io/warp10/WarpManager.*'
            include 'io/warp10/WarpURLEncoder.*'
            include 'io/warp10/WarpURLDecoder.*'
            include 'io/warp10/DoubleUtils.*'
            include 'io/warp10/FloatUtils.*'
            include 'io/warp10/WrapperList.*'
            include 'io/warp10/WrapperList$ArrayItr.*'
            include 'io/warp10/Revision.*'
            include 'io/warp10/ThrowableUtils.*'
            include 'io/warp10/CustomThreadFactory.*'
            include 'io/warp10/continuum/AuthenticationPlugin.*'
            include 'io/warp10/continuum/MetadataUtils.*'
            include 'io/warp10/continuum/MetadataUtils$*'
            include 'io/warp10/continuum/index/**'
            include 'io/warp10/continuum/Configuration.*'
            include 'io/warp10/continuum/TimeSource.*'
            include 'io/warp10/continuum/TimeSource$*'
            include 'io/warp10/continuum/TextFileShuffler.*'
            include 'io/warp10/continuum/TextFileShuffler$*'
            include 'io/warp10/continuum/SortUtil.*'
            include 'io/warp10/continuum/SortUtil$*'
            include 'io/warp10/continuum/Tokens.*'
            include 'io/warp10/continuum/Tokens$*'
            include 'io/warp10/continuum/gts/**'
            include 'io/warp10/continuum/store/Constants.*'
            include 'io/warp10/continuum/store/DirectoryClient.*'
            include 'io/warp10/continuum/store/GTSDecoderIterator.*'
            include 'io/warp10/continuum/store/MetadataIterator.*'
            include 'io/warp10/warp/sdk/**'
            include 'io/warp10/continuum/sensision/SensisionConstants.*'
            include 'io/warp10/continuum/store/StoreClient.*'
            include 'io/warp10/hadoop/**'
            include 'io/warp10/standalone/AcceleratorConfig.*'
            include 'io/warp10/standalone/AcceleratorConfig$*.*'

            srcDir new File(project(':warp10').projectDir, "src/generated/thrift/gen-java")
            include 'io/warp10/continuum/thrift/data/**'
            include 'io/warp10/continuum/store/thrift/data/**'

            srcDir new File(project(':token').projectDir, "src/generated/thrift/gen-java")
            include 'io/warp10/quasar/filter/QuasarTokenFilter.*'
            include 'io/warp10/quasar/filter/exception/QuasarTokenException.*'

            srcDir new File(project(':token').projectDir, "src/main/java")
            include 'io/warp10/quasar/token/thrift/data/**'

            srcDir new File(project(':crypto').projectDir, "src/main/java")
            include 'io/warp10/crypto/**'
        }
        resources {
            srcDir new File(project(':warp10').projectDir, "src/main/resources")
            include('REVISION')
        }
    }
}

dependencies {
    compileOnly project(':warp10')

    api withVersion('org.apache.thrift:libthrift')
    api withVersion('org.bouncycastle:bcprov-jdk15on')
    api withVersion('commons-io:commons-io')
    api withVersion('commons-codec:commons-codec')
    api withVersion('org.apache.commons:commons-lang3')
    api withVersion('org.apache.commons:commons-math3')
    api withVersion('com.github.spullara.mustache.java:compiler')
    api withVersion('org.processing:core')
    api withVersion('com.netflix.curator:curator-x-discovery')
    api withVersion('io.senx:geoxplib')
    api withVersion('com.google.guava:guava')
    api withVersion('org.apache.hadoop:hadoop-common')
    api withVersion('org.apache.hadoop:hadoop-mapreduce-client-core')
    api withVersion('com.fasterxml.util:java-merge-sort')
    api withVersion('joda-time:joda-time')
    api withVersion('com.github.rwl:jtransforms')
    api withVersion('com.vividsolutions:jts')
    api withVersion('com.geoxp.oss:oss-client')
    api withVersion('io.warp10:sensision')
    api withVersion('org.slf4j:slf4j-api')
    api withVersion('net.razorvine:pyrolite')
    api withVersion('org.wololo:jts2geojson')
    api withVersion('com.fasterxml.jackson.core:jackson-core')
    api withVersion('com.fasterxml.jackson.core:jackson-databind')
    api withVersion('com.fasterxml.jackson.core:jackson-annotations')
}

//
// Customize POM file in maven publication
//
publishing {
    publications {
        maven(MavenPublication) {
            pom {
                name = "WarpScript"
                description = "Warp 10 functions for the manipulation and analysis of time series"
            }
        }
    }
}

def withVersion(String dependencyWithoutVersion) {
    Set<ResolvedDependency> deps = project(":warp10").configurations.compileClasspath.resolvedConfiguration.firstLevelModuleDependencies;
    while (!deps.isEmpty()) {
        Set<ResolvedDependency> transitiveDependency = new HashSet<>()
        for (dep in deps) {
            if (dependencyWithoutVersion.equals(dep.getModuleGroup() + ":" + dep.getModuleName())) {
                return dep.getModuleGroup() + ":" + dep.getModuleName() + ":" + dep.getModuleVersion()
            }
            transitiveDependency.addAll(dep.children)
        }
        deps = transitiveDependency;
    }
    throw new Exception("Cannot find " + dependencyWithoutVersion + " in warp10 dependencies.")
}
