-- This file and its contents are licensed under the Apache License 2.0.
-- Please see the included NOTICE for copyright information and
-- LICENSE-APACHE for a copy of the license.
--
-- Setup
--
\c :TEST_DBNAME :ROLE_SUPERUSER
CREATE OR REPLACE FUNCTION ts_bgw_db_scheduler_test_run_and_wait_for_scheduler_finish(timeout INT = -1, mock_start_time INT = 0) RETURNS VOID
AS :MODULE_PATHNAME LANGUAGE C VOLATILE;
CREATE OR REPLACE FUNCTION ts_bgw_db_scheduler_test_run(timeout INT = -1, mock_start_time INT = 0) RETURNS VOID
AS :MODULE_PATHNAME LANGUAGE C VOLATILE;
CREATE OR REPLACE FUNCTION ts_bgw_db_scheduler_test_wait_for_scheduler_finish() RETURNS VOID
AS :MODULE_PATHNAME LANGUAGE C VOLATILE;
CREATE OR REPLACE FUNCTION ts_bgw_params_create() RETURNS VOID
AS :MODULE_PATHNAME LANGUAGE C VOLATILE;
CREATE OR REPLACE FUNCTION ts_bgw_params_destroy() RETURNS VOID
AS :MODULE_PATHNAME LANGUAGE C VOLATILE;
CREATE OR REPLACE FUNCTION ts_bgw_params_reset_time(set_time BIGINT = 0, wait BOOLEAN = false) RETURNS VOID
AS :MODULE_PATHNAME LANGUAGE C VOLATILE;
CREATE OR REPLACE FUNCTION insert_job(application_name NAME, job_type NAME, schedule_interval INTERVAL, max_runtime INTERVAL, max_retries INTEGER, retry_period INTERVAL)
RETURNS VOID
AS :MODULE_PATHNAME, 'ts_test_bgw_job_insert_relation'
LANGUAGE C VOLATILE STRICT;
CREATE OR REPLACE FUNCTION delete_job(job_id INTEGER)
RETURNS VOID
AS :MODULE_PATHNAME, 'ts_test_bgw_job_delete_by_id'
LANGUAGE C VOLATILE STRICT;
\set WAIT_ON_JOB 0
\set IMMEDIATELY_SET_UNTIL 1
\set WAIT_FOR_OTHER_TO_ADVANCE 2
\set WAIT_FOR_STANDARD_WAITLATCH 3
CREATE OR REPLACE FUNCTION ts_bgw_params_mock_wait_returns_immediately(new_val INTEGER) RETURNS VOID
AS :MODULE_PATHNAME LANGUAGE C VOLATILE;
--allow us to inject test jobs
ALTER TABLE _timescaledb_config.bgw_job DROP CONSTRAINT valid_job_type;
CREATE FUNCTION get_application_pid(app_name TEXT) RETURNS INTEGER LANGUAGE SQL AS
$BODY$
    SELECT pid FROM pg_stat_activity WHERE application_name = app_name;
$BODY$;
CREATE FUNCTION wait_application_pid(app_name TEXT, wait_for_start BOOLEAN = true) RETURNS INTEGER LANGUAGE PLPGSQL AS
$BODY$
DECLARE
    r INTEGER;
BEGIN
    --wait up to a second checking each 100ms
    FOR i in 1..10
    LOOP
        SELECT get_application_pid(app_name) INTO r;
        IF (wait_for_start AND r IS NULL) OR (NOT wait_for_start AND r IS NOT NULL) THEN
            PERFORM pg_sleep(0.1);
            PERFORM pg_stat_clear_snapshot();
        ELSE
            RETURN r;
        END IF;
    END LOOP;
    RETURN NULL;
END
$BODY$;
-- Remove any default jobs, e.g., telemetry
DELETE FROM _timescaledb_config.bgw_job WHERE TRUE;
TRUNCATE _timescaledb_internal.bgw_job_stat;
\c :TEST_DBNAME :ROLE_DEFAULT_PERM_USER
CREATE TABLE public.bgw_log(
    msg_no INT,
    mock_time BIGINT,
    application_name TEXT,
    msg TEXT
);
CREATE VIEW sorted_bgw_log AS
    SELECT * FROM bgw_log ORDER BY mock_time, application_name COLLATE "C", msg_no;
CREATE TABLE public.bgw_dsm_handle_store(
    handle BIGINT
);
INSERT INTO public.bgw_dsm_handle_store VALUES (0);
SELECT ts_bgw_params_create();
 ts_bgw_params_create 
----------------------
 
(1 row)

--
-- Test running the scheduler with no jobs
--
SELECT ts_bgw_db_scheduler_test_run_and_wait_for_scheduler_finish(50);
 ts_bgw_db_scheduler_test_run_and_wait_for_scheduler_finish 
------------------------------------------------------------
 
(1 row)

-- empty
SELECT * FROM _timescaledb_internal.bgw_job_stat;
 job_id | last_start | last_finish | next_start | last_successful_finish | last_run_success | total_runs | total_duration | total_successes | total_failures | total_crashes | consecutive_failures | consecutive_crashes 
--------+------------+-------------+------------+------------------------+------------------+------------+----------------+-----------------+----------------+---------------+----------------------+---------------------
(0 rows)

-- empty
SELECT * FROM sorted_bgw_log;
 msg_no | mock_time | application_name |                   msg                    
--------+-----------+------------------+------------------------------------------
      0 |         0 | DB Scheduler     | [TESTING] Wait until 50000, started at 0
(1 row)

--
-- Test running a normal job
--
\c :TEST_DBNAME :ROLE_SUPERUSER
TRUNCATE bgw_log;
SELECT ts_bgw_params_reset_time();
 ts_bgw_params_reset_time 
--------------------------
 
(1 row)

INSERT INTO _timescaledb_config.bgw_job (application_name, job_type, schedule_INTERVAL, max_runtime, max_retries, retry_period) VALUES
('test_job_1', 'bgw_test_job_1', INTERVAL '100ms', INTERVAL '100s', 3, INTERVAL '1s');
select * from _timescaledb_config.bgw_job;
  id  | application_name |    job_type    | schedule_interval |   max_runtime   | max_retries | retry_period 
------+------------------+----------------+-------------------+-----------------+-------------+--------------
 1000 | test_job_1       | bgw_test_job_1 | @ 0.1 secs        | @ 1 min 40 secs |           3 | @ 1 sec
(1 row)

\c :TEST_DBNAME :ROLE_DEFAULT_PERM_USER
--Tests that the scheduler start a job right away if it's the first time and there is no job_stat entry for it
SELECT ts_bgw_db_scheduler_test_run_and_wait_for_scheduler_finish(25);
 ts_bgw_db_scheduler_test_run_and_wait_for_scheduler_finish 
------------------------------------------------------------
 
(1 row)

SELECT job_id, next_start, last_finish as until_next, last_run_success, total_runs, total_successes, total_failures, total_crashes
FROM _timescaledb_internal.bgw_job_stat;
 job_id |           next_start           |          until_next          | last_run_success | total_runs | total_successes | total_failures | total_crashes 
--------+--------------------------------+------------------------------+------------------+------------+-----------------+----------------+---------------
   1000 | Fri Dec 31 16:00:00.1 1999 PST | Fri Dec 31 16:00:00 1999 PST | t                |          1 |               1 |              0 |             0
(1 row)

SELECT * FROM sorted_bgw_log;
 msg_no | mock_time | application_name |                    msg                     
--------+-----------+------------------+--------------------------------------------
      0 |         0 | DB Scheduler     | [TESTING] Registered new background worker
      1 |         0 | DB Scheduler     | [TESTING] Wait until 25000, started at 0
      0 |         0 | test_job_1       | Execute job 1
(3 rows)

--Test that the scheduler will not run job again if not enough time has passed
SELECT ts_bgw_db_scheduler_test_run_and_wait_for_scheduler_finish(25, 25);
 ts_bgw_db_scheduler_test_run_and_wait_for_scheduler_finish 
------------------------------------------------------------
 
(1 row)

SELECT job_id, next_start-last_finish as until_next, last_run_success, total_runs, total_successes, total_failures, total_crashes
FROM _timescaledb_internal.bgw_job_stat;
 job_id | until_next | last_run_success | total_runs | total_successes | total_failures | total_crashes 
--------+------------+------------------+------------+-----------------+----------------+---------------
   1000 | @ 0.1 secs | t                |          1 |               1 |              0 |             0
(1 row)

SELECT * FROM sorted_bgw_log;
 msg_no | mock_time | application_name |                     msg                      
--------+-----------+------------------+----------------------------------------------
      0 |         0 | DB Scheduler     | [TESTING] Registered new background worker
      1 |         0 | DB Scheduler     | [TESTING] Wait until 25000, started at 0
      0 |         0 | test_job_1       | Execute job 1
      0 |     25000 | DB Scheduler     | [TESTING] Wait until 50000, started at 25000
(4 rows)

--After enough time has passed the scheduler will run the job again
SELECT ts_bgw_db_scheduler_test_run_and_wait_for_scheduler_finish(100, 50);
 ts_bgw_db_scheduler_test_run_and_wait_for_scheduler_finish 
------------------------------------------------------------
 
(1 row)

SELECT job_id, next_start, last_finish, last_run_success, total_runs, total_successes, total_failures, total_crashes
FROM _timescaledb_internal.bgw_job_stat;
 job_id |           next_start           |          last_finish           | last_run_success | total_runs | total_successes | total_failures | total_crashes 
--------+--------------------------------+--------------------------------+------------------+------------+-----------------+----------------+---------------
   1000 | Fri Dec 31 16:00:00.2 1999 PST | Fri Dec 31 16:00:00.1 1999 PST | t                |          2 |               2 |              0 |             0
(1 row)

SELECT * FROM sorted_bgw_log;
 msg_no | mock_time | application_name |                      msg                       
--------+-----------+------------------+------------------------------------------------
      0 |         0 | DB Scheduler     | [TESTING] Registered new background worker
      1 |         0 | DB Scheduler     | [TESTING] Wait until 25000, started at 0
      0 |         0 | test_job_1       | Execute job 1
      0 |     25000 | DB Scheduler     | [TESTING] Wait until 50000, started at 25000
      0 |     50000 | DB Scheduler     | [TESTING] Wait until 100000, started at 50000
      1 |    100000 | DB Scheduler     | [TESTING] Registered new background worker
      2 |    100000 | DB Scheduler     | [TESTING] Wait until 150000, started at 100000
      0 |    100000 | test_job_1       | Execute job 1
(8 rows)

--Now it runs it one more time
SELECT ts_bgw_db_scheduler_test_run_and_wait_for_scheduler_finish(120, 100);
 ts_bgw_db_scheduler_test_run_and_wait_for_scheduler_finish 
------------------------------------------------------------
 
(1 row)

SELECT job_id, next_start, last_finish, last_run_success, total_runs, total_successes, total_failures, total_crashes
FROM _timescaledb_internal.bgw_job_stat;
 job_id |           next_start           |          last_finish           | last_run_success | total_runs | total_successes | total_failures | total_crashes 
--------+--------------------------------+--------------------------------+------------------+------------+-----------------+----------------+---------------
   1000 | Fri Dec 31 16:00:00.3 1999 PST | Fri Dec 31 16:00:00.2 1999 PST | t                |          3 |               3 |              0 |             0
(1 row)

SELECT * FROM sorted_bgw_log;
 msg_no | mock_time | application_name |                      msg                       
--------+-----------+------------------+------------------------------------------------
      0 |         0 | DB Scheduler     | [TESTING] Registered new background worker
      1 |         0 | DB Scheduler     | [TESTING] Wait until 25000, started at 0
      0 |         0 | test_job_1       | Execute job 1
      0 |     25000 | DB Scheduler     | [TESTING] Wait until 50000, started at 25000
      0 |     50000 | DB Scheduler     | [TESTING] Wait until 100000, started at 50000
      1 |    100000 | DB Scheduler     | [TESTING] Registered new background worker
      2 |    100000 | DB Scheduler     | [TESTING] Wait until 150000, started at 100000
      0 |    100000 | test_job_1       | Execute job 1
      0 |    150000 | DB Scheduler     | [TESTING] Wait until 200000, started at 150000
      1 |    200000 | DB Scheduler     | [TESTING] Registered new background worker
      2 |    200000 | DB Scheduler     | [TESTING] Wait until 270000, started at 200000
      0 |    200000 | test_job_1       | Execute job 1
(12 rows)

--
-- Test what happens when running a job that throws an error
--
\c :TEST_DBNAME :ROLE_SUPERUSER
TRUNCATE bgw_log;
TRUNCATE _timescaledb_internal.bgw_job_stat;
SELECT ts_bgw_params_reset_time();
 ts_bgw_params_reset_time 
--------------------------
 
(1 row)

DELETE FROM _timescaledb_config.bgw_job;
INSERT INTO _timescaledb_config.bgw_job (application_name, job_type, schedule_INTERVAL, max_runtime, max_retries, retry_period) VALUES
('test_job_2', 'bgw_test_job_2_error', INTERVAL '100ms', INTERVAL '100s', 3, INTERVAL '100ms');
\c :TEST_DBNAME :ROLE_DEFAULT_PERM_USER
--Run the first time and error
SELECT ts_bgw_db_scheduler_test_run_and_wait_for_scheduler_finish(25);
 ts_bgw_db_scheduler_test_run_and_wait_for_scheduler_finish 
------------------------------------------------------------
 
(1 row)

SELECT job_id, next_start-last_finish as until_next, last_run_success, total_runs, total_successes, total_failures, total_crashes
FROM _timescaledb_internal.bgw_job_stat;
 job_id |   until_next    | last_run_success | total_runs | total_successes | total_failures | total_crashes 
--------+-----------------+------------------+------------+-----------------+----------------+---------------
   1001 | @ 0.098438 secs | f                |          1 |               0 |              1 |             0
(1 row)

SELECT * FROM sorted_bgw_log;
 msg_no | mock_time | application_name |                    msg                     
--------+-----------+------------------+--------------------------------------------
      0 |         0 | DB Scheduler     | [TESTING] Registered new background worker
      1 |         0 | DB Scheduler     | [TESTING] Wait until 25000, started at 0
      1 |         0 | test_job_2       | job 1001 threw an error
      2 |         0 | test_job_2       | Error job 2
(4 rows)

SELECT last_finish, last_successful_finish, last_run_success FROM _timescaledb_internal.bgw_job_stat;
         last_finish          | last_successful_finish | last_run_success 
------------------------------+------------------------+------------------
 Fri Dec 31 16:00:00 1999 PST | -infinity              | f
(1 row)

--Scheduler runs the job again, sees another error, and increases the wait time
SELECT ts_bgw_db_scheduler_test_run_and_wait_for_scheduler_finish(125);
 ts_bgw_db_scheduler_test_run_and_wait_for_scheduler_finish 
------------------------------------------------------------
 
(1 row)

SELECT job_id, next_start-last_finish as until_next, last_run_success, total_runs, total_successes, total_failures, total_crashes
FROM _timescaledb_internal.bgw_job_stat;
 job_id |   until_next    | last_run_success | total_runs | total_successes | total_failures | total_crashes 
--------+-----------------+------------------+------------+-----------------+----------------+---------------
   1001 | @ 0.196875 secs | f                |          2 |               0 |              2 |             0
(1 row)

SELECT * FROM sorted_bgw_log;
 msg_no | mock_time | application_name |                      msg                      
--------+-----------+------------------+-----------------------------------------------
      0 |         0 | DB Scheduler     | [TESTING] Registered new background worker
      1 |         0 | DB Scheduler     | [TESTING] Wait until 25000, started at 0
      1 |         0 | test_job_2       | job 1001 threw an error
      2 |         0 | test_job_2       | Error job 2
      0 |     25000 | DB Scheduler     | [TESTING] Wait until 98438, started at 25000
      1 |     98438 | DB Scheduler     | [TESTING] Registered new background worker
      2 |     98438 | DB Scheduler     | [TESTING] Wait until 150000, started at 98438
      1 |     98438 | test_job_2       | job 1001 threw an error
      2 |     98438 | test_job_2       | Error job 2
(9 rows)

--The job runs and fails again a few more times increasing the wait time each time.
SELECT ts_bgw_db_scheduler_test_run_and_wait_for_scheduler_finish(225);
 ts_bgw_db_scheduler_test_run_and_wait_for_scheduler_finish 
------------------------------------------------------------
 
(1 row)

SELECT job_id, next_start-last_finish as until_next, last_run_success, total_runs, total_successes, total_failures, total_crashes
FROM _timescaledb_internal.bgw_job_stat;
 job_id |   until_next    | last_run_success | total_runs | total_successes | total_failures | total_crashes 
--------+-----------------+------------------+------------+-----------------+----------------+---------------
   1001 | @ 0.295312 secs | f                |          3 |               0 |              3 |             0
(1 row)

SELECT * FROM sorted_bgw_log;
 msg_no | mock_time | application_name |                      msg                       
--------+-----------+------------------+------------------------------------------------
      0 |         0 | DB Scheduler     | [TESTING] Registered new background worker
      1 |         0 | DB Scheduler     | [TESTING] Wait until 25000, started at 0
      1 |         0 | test_job_2       | job 1001 threw an error
      2 |         0 | test_job_2       | Error job 2
      0 |     25000 | DB Scheduler     | [TESTING] Wait until 98438, started at 25000
      1 |     98438 | DB Scheduler     | [TESTING] Registered new background worker
      2 |     98438 | DB Scheduler     | [TESTING] Wait until 150000, started at 98438
      1 |     98438 | test_job_2       | job 1001 threw an error
      2 |     98438 | test_job_2       | Error job 2
      0 |    150000 | DB Scheduler     | [TESTING] Wait until 295313, started at 150000
      1 |    295313 | DB Scheduler     | [TESTING] Registered new background worker
      2 |    295313 | DB Scheduler     | [TESTING] Wait until 375000, started at 295313
      1 |    295313 | test_job_2       | job 1001 threw an error
      2 |    295313 | test_job_2       | Error job 2
(14 rows)

SELECT ts_bgw_db_scheduler_test_run_and_wait_for_scheduler_finish(425);
 ts_bgw_db_scheduler_test_run_and_wait_for_scheduler_finish 
------------------------------------------------------------
 
(1 row)

SELECT job_id, next_start-last_finish as until_next, last_run_success, total_runs, total_successes, total_failures, total_crashes
FROM _timescaledb_internal.bgw_job_stat;
 job_id |   until_next   | last_run_success | total_runs | total_successes | total_failures | total_crashes 
--------+----------------+------------------+------------+-----------------+----------------+---------------
   1001 | @ 0.39375 secs | f                |          4 |               0 |              4 |             0
(1 row)

SELECT * FROM sorted_bgw_log;
 msg_no | mock_time | application_name |                      msg                       
--------+-----------+------------------+------------------------------------------------
      0 |         0 | DB Scheduler     | [TESTING] Registered new background worker
      1 |         0 | DB Scheduler     | [TESTING] Wait until 25000, started at 0
      1 |         0 | test_job_2       | job 1001 threw an error
      2 |         0 | test_job_2       | Error job 2
      0 |     25000 | DB Scheduler     | [TESTING] Wait until 98438, started at 25000
      1 |     98438 | DB Scheduler     | [TESTING] Registered new background worker
      2 |     98438 | DB Scheduler     | [TESTING] Wait until 150000, started at 98438
      1 |     98438 | test_job_2       | job 1001 threw an error
      2 |     98438 | test_job_2       | Error job 2
      0 |    150000 | DB Scheduler     | [TESTING] Wait until 295313, started at 150000
      1 |    295313 | DB Scheduler     | [TESTING] Registered new background worker
      2 |    295313 | DB Scheduler     | [TESTING] Wait until 375000, started at 295313
      1 |    295313 | test_job_2       | job 1001 threw an error
      2 |    295313 | test_job_2       | Error job 2
      0 |    375000 | DB Scheduler     | [TESTING] Wait until 590625, started at 375000
      1 |    590625 | DB Scheduler     | [TESTING] Registered new background worker
      2 |    590625 | DB Scheduler     | [TESTING] Wait until 800000, started at 590625
      1 |    590625 | test_job_2       | job 1001 threw an error
      2 |    590625 | test_job_2       | Error job 2
(19 rows)

--Once the wait time reaches 500ms it stops increasion
SELECT ts_bgw_db_scheduler_test_run_and_wait_for_scheduler_finish(525);
 ts_bgw_db_scheduler_test_run_and_wait_for_scheduler_finish 
------------------------------------------------------------
 
(1 row)

SELECT job_id, next_start-last_finish as until_next, last_run_success, total_runs, total_successes, total_failures, total_crashes
FROM _timescaledb_internal.bgw_job_stat;
 job_id |   until_next    | last_run_success | total_runs | total_successes | total_failures | total_crashes 
--------+-----------------+------------------+------------+-----------------+----------------+---------------
   1001 | @ 0.492188 secs | f                |          5 |               0 |              5 |             0
(1 row)

SELECT * FROM sorted_bgw_log;
 msg_no | mock_time | application_name |                       msg                       
--------+-----------+------------------+-------------------------------------------------
      0 |         0 | DB Scheduler     | [TESTING] Registered new background worker
      1 |         0 | DB Scheduler     | [TESTING] Wait until 25000, started at 0
      1 |         0 | test_job_2       | job 1001 threw an error
      2 |         0 | test_job_2       | Error job 2
      0 |     25000 | DB Scheduler     | [TESTING] Wait until 98438, started at 25000
      1 |     98438 | DB Scheduler     | [TESTING] Registered new background worker
      2 |     98438 | DB Scheduler     | [TESTING] Wait until 150000, started at 98438
      1 |     98438 | test_job_2       | job 1001 threw an error
      2 |     98438 | test_job_2       | Error job 2
      0 |    150000 | DB Scheduler     | [TESTING] Wait until 295313, started at 150000
      1 |    295313 | DB Scheduler     | [TESTING] Registered new background worker
      2 |    295313 | DB Scheduler     | [TESTING] Wait until 375000, started at 295313
      1 |    295313 | test_job_2       | job 1001 threw an error
      2 |    295313 | test_job_2       | Error job 2
      0 |    375000 | DB Scheduler     | [TESTING] Wait until 590625, started at 375000
      1 |    590625 | DB Scheduler     | [TESTING] Registered new background worker
      2 |    590625 | DB Scheduler     | [TESTING] Wait until 800000, started at 590625
      1 |    590625 | test_job_2       | job 1001 threw an error
      2 |    590625 | test_job_2       | Error job 2
      0 |    800000 | DB Scheduler     | [TESTING] Wait until 984375, started at 800000
      1 |    984375 | DB Scheduler     | [TESTING] Registered new background worker
      2 |    984375 | DB Scheduler     | [TESTING] Wait until 1325000, started at 984375
      1 |    984375 | test_job_2       | job 1001 threw an error
      2 |    984375 | test_job_2       | Error job 2
(24 rows)

--
-- Test timeout logic
--
\c :TEST_DBNAME :ROLE_SUPERUSER
TRUNCATE bgw_log;
TRUNCATE _timescaledb_internal.bgw_job_stat;
SELECT ts_bgw_params_reset_time();
 ts_bgw_params_reset_time 
--------------------------
 
(1 row)

DELETE FROM _timescaledb_config.bgw_job;
--set timeout lower than job length
INSERT INTO _timescaledb_config.bgw_job (application_name, job_type, schedule_INTERVAL, max_runtime, max_retries, retry_period) VALUES
('test_job_3_long', 'bgw_test_job_3_long', INTERVAL '5000ms', INTERVAL '20ms', 3, INTERVAL '50ms');
\c :TEST_DBNAME :ROLE_DEFAULT_PERM_USER
SELECT ts_bgw_params_mock_wait_returns_immediately(:IMMEDIATELY_SET_UNTIL);
 ts_bgw_params_mock_wait_returns_immediately 
---------------------------------------------
 
(1 row)

--Test that the scheduler kills a job that takes too long
SELECT ts_bgw_db_scheduler_test_run_and_wait_for_scheduler_finish(200);
 ts_bgw_db_scheduler_test_run_and_wait_for_scheduler_finish 
------------------------------------------------------------
 
(1 row)

SELECT job_id, last_finish, next_start, last_run_success, total_runs, total_successes, total_failures, total_crashes, consecutive_crashes
FROM _timescaledb_internal.bgw_job_stat;
 job_id |          last_finish           |             next_start              | last_run_success | total_runs | total_successes | total_failures | total_crashes | consecutive_crashes 
--------+--------------------------------+-------------------------------------+------------------+------------+-----------------+----------------+---------------+---------------------
   1002 | Fri Dec 31 16:00:00.2 1999 PST | Fri Dec 31 16:00:00.249219 1999 PST | f                |          1 |               0 |              1 |             0 |                   0
(1 row)

SELECT * FROM sorted_bgw_log;
 msg_no | mock_time | application_name |                              msg                               
--------+-----------+------------------+----------------------------------------------------------------
      0 |         0 | DB Scheduler     | [TESTING] Registered new background worker
      1 |         0 | DB Scheduler     | [TESTING] Wait until 20000, started at 0
      2 |     20000 | DB Scheduler     | terminating background worker "test_job_3_long" due to timeout
      3 |     20000 | DB Scheduler     | [TESTING] Wait until 200000, started at 20000
      4 |    200000 | DB Scheduler     | job 1002 failed
(5 rows)

--Check that the scheduler does not kill a job with infinite timeout
\c :TEST_DBNAME :ROLE_SUPERUSER
TRUNCATE bgw_log;
TRUNCATE _timescaledb_internal.bgw_job_stat;
SELECT ts_bgw_params_reset_time();
 ts_bgw_params_reset_time 
--------------------------
 
(1 row)

DELETE FROM _timescaledb_config.bgw_job;
--set timeout to 0
INSERT INTO _timescaledb_config.bgw_job (application_name, job_type, schedule_INTERVAL, max_runtime, max_retries, retry_period) VALUES
('test_job_3_long', 'bgw_test_job_3_long', INTERVAL '5000ms', INTERVAL '0', 3, INTERVAL '10ms');
\c :TEST_DBNAME :ROLE_DEFAULT_PERM_USER
SELECT ts_bgw_db_scheduler_test_run_and_wait_for_scheduler_finish(550);
 ts_bgw_db_scheduler_test_run_and_wait_for_scheduler_finish 
------------------------------------------------------------
 
(1 row)

SELECT job_id, last_finish-next_start as until_next, last_run_success, total_runs, total_successes, total_failures, total_crashes, consecutive_crashes
FROM _timescaledb_internal.bgw_job_stat;
 job_id |  until_next  | last_run_success | total_runs | total_successes | total_failures | total_crashes | consecutive_crashes 
--------+--------------+------------------+------------+-----------------+----------------+---------------+---------------------
   1003 | @ 5 secs ago | t                |          1 |               1 |              0 |             0 |                   0
(1 row)

SELECT * FROM sorted_bgw_log;
 msg_no | mock_time | application_name |                    msg                     
--------+-----------+------------------+--------------------------------------------
      0 |         0 | DB Scheduler     | [TESTING] Registered new background worker
      1 |         0 | DB Scheduler     | [TESTING] Wait until 550000, started at 0
      0 |    550000 | test_job_3_long  | Before sleep job 3
      1 |    550000 | test_job_3_long  | After sleep job 3
(4 rows)

SELECT ts_bgw_params_mock_wait_returns_immediately(:WAIT_ON_JOB);
 ts_bgw_params_mock_wait_returns_immediately 
---------------------------------------------
 
(1 row)

--
-- Test signal handling
--
--Test sending a SIGTERM to a job
\c :TEST_DBNAME :ROLE_SUPERUSER
TRUNCATE bgw_log;
SELECT ts_bgw_params_reset_time();
 ts_bgw_params_reset_time 
--------------------------
 
(1 row)

TRUNCATE _timescaledb_internal.bgw_job_stat;
DELETE FROM _timescaledb_config.bgw_job;
INSERT INTO _timescaledb_config.bgw_job (application_name, job_type, schedule_INTERVAL, max_runtime, max_retries, retry_period) VALUES
('test_job_3_long', 'bgw_test_job_3_long', INTERVAL '5000ms', INTERVAL '100s', 3, INTERVAL '500ms');
\c :TEST_DBNAME :ROLE_DEFAULT_PERM_USER
--escalated priv needed for access to pg_stat_activity
\c :TEST_DBNAME :ROLE_SUPERUSER
SELECT ts_bgw_db_scheduler_test_run(300);
 ts_bgw_db_scheduler_test_run 
------------------------------
 
(1 row)

SELECT pg_terminate_backend(wait_application_pid('test_job_3_long'));
 pg_terminate_backend 
----------------------
 t
(1 row)

SELECT ts_bgw_db_scheduler_test_wait_for_scheduler_finish();
 ts_bgw_db_scheduler_test_wait_for_scheduler_finish 
----------------------------------------------------
 
(1 row)

SELECT * FROM sorted_bgw_log;
 msg_no | mock_time | application_name |                                          msg                                          
--------+-----------+------------------+---------------------------------------------------------------------------------------
      0 |         0 | DB Scheduler     | [TESTING] Registered new background worker
      1 |         0 | DB Scheduler     | [TESTING] Wait until 300000, started at 0
      0 |         0 | test_job_3_long  | Before sleep job 3
      1 |         0 | test_job_3_long  | Job got term signal
      2 |         0 | test_job_3_long  | terminating TimescaleDB background job "test_job_3_long" due to administrator command
      3 |         0 | test_job_3_long  | terminating connection due to administrator command
      2 |    300000 | DB Scheduler     | job 1004 failed
(7 rows)

SELECT job_id, next_start - last_finish as until_next, last_run_success, total_runs, total_successes, total_failures, total_crashes
FROM _timescaledb_internal.bgw_job_stat;
 job_id |   until_next    | last_run_success | total_runs | total_successes | total_failures | total_crashes 
--------+-----------------+------------------+------------+-----------------+----------------+---------------
   1004 | @ 0.492188 secs | f                |          1 |               0 |              1 |             0
(1 row)

-- Test that the job is able to run again and succeed
SELECT ts_bgw_db_scheduler_test_run_and_wait_for_scheduler_finish(900);
 ts_bgw_db_scheduler_test_run_and_wait_for_scheduler_finish 
------------------------------------------------------------
 
(1 row)

SELECT job_id, next_start-last_finish as until_next, last_run_success, total_runs, total_successes, total_failures, total_crashes
FROM _timescaledb_internal.bgw_job_stat;
 job_id | until_next | last_run_success | total_runs | total_successes | total_failures | total_crashes 
--------+------------+------------------+------------+-----------------+----------------+---------------
   1004 | @ 5 secs   | t                |          2 |               1 |              1 |             0
(1 row)

SELECT * FROM sorted_bgw_log;
 msg_no | mock_time | application_name |                                          msg                                          
--------+-----------+------------------+---------------------------------------------------------------------------------------
      0 |         0 | DB Scheduler     | [TESTING] Registered new background worker
      1 |         0 | DB Scheduler     | [TESTING] Wait until 300000, started at 0
      0 |         0 | test_job_3_long  | Before sleep job 3
      1 |         0 | test_job_3_long  | Job got term signal
      2 |         0 | test_job_3_long  | terminating TimescaleDB background job "test_job_3_long" due to administrator command
      3 |         0 | test_job_3_long  | terminating connection due to administrator command
      0 |    300000 | DB Scheduler     | [TESTING] Wait until 792188, started at 300000
      2 |    300000 | DB Scheduler     | job 1004 failed
      1 |    792188 | DB Scheduler     | [TESTING] Registered new background worker
      2 |    792188 | DB Scheduler     | [TESTING] Wait until 1200000, started at 792188
      0 |    792188 | test_job_3_long  | Before sleep job 3
      1 |    792188 | test_job_3_long  | After sleep job 3
(12 rows)

--Test sending a SIGHUP to a job
\c :TEST_DBNAME :ROLE_SUPERUSER
TRUNCATE bgw_log;
SELECT ts_bgw_params_reset_time();
 ts_bgw_params_reset_time 
--------------------------
 
(1 row)

TRUNCATE _timescaledb_internal.bgw_job_stat;
DELETE FROM _timescaledb_config.bgw_job;
\c :TEST_DBNAME :ROLE_DEFAULT_PERM_USER
--escalated priv needed for access to pg_stat_activity
\c :TEST_DBNAME :ROLE_SUPERUSER
SELECT ts_bgw_params_mock_wait_returns_immediately(:WAIT_FOR_STANDARD_WAITLATCH);
 ts_bgw_params_mock_wait_returns_immediately 
---------------------------------------------
 
(1 row)

SELECT ts_bgw_db_scheduler_test_run(-1);
 ts_bgw_db_scheduler_test_run 
------------------------------
 
(1 row)

SHOW timescaledb.shutdown_bgw_scheduler;
 timescaledb.shutdown_bgw_scheduler 
------------------------------------
 off
(1 row)

ALTER SYSTEM SET timescaledb.shutdown_bgw_scheduler TO 'on';
SELECT pg_reload_conf();
 pg_reload_conf 
----------------
 t
(1 row)

\c :TEST_DBNAME :ROLE_SUPERUSER
SHOW timescaledb.shutdown_bgw_scheduler;
 timescaledb.shutdown_bgw_scheduler 
------------------------------------
 on
(1 row)

SELECT ts_bgw_db_scheduler_test_wait_for_scheduler_finish();
 ts_bgw_db_scheduler_test_wait_for_scheduler_finish 
----------------------------------------------------
 
(1 row)

SELECT * FROM sorted_bgw_log;
 msg_no | mock_time | application_name |                      msg                      
--------+-----------+------------------+-----------------------------------------------
      0 |         0 | DB Scheduler     | bgw scheduler stopped due to shutdown_bgw guc
(1 row)

ALTER SYSTEM RESET timescaledb.shutdown_bgw_scheduler;
SELECT pg_reload_conf();
 pg_reload_conf 
----------------
 t
(1 row)

\c :TEST_DBNAME :ROLE_SUPERUSER
SHOW timescaledb.shutdown_bgw_scheduler;
 timescaledb.shutdown_bgw_scheduler 
------------------------------------
 off
(1 row)

SELECT ts_bgw_params_mock_wait_returns_immediately(:WAIT_ON_JOB);
 ts_bgw_params_mock_wait_returns_immediately 
---------------------------------------------
 
(1 row)

--Test that sending SIGTERM to scheduler terminates the jobs as well
\c :TEST_DBNAME :ROLE_SUPERUSER
TRUNCATE bgw_log;
TRUNCATE _timescaledb_internal.bgw_job_stat;
SELECT ts_bgw_params_reset_time();
 ts_bgw_params_reset_time 
--------------------------
 
(1 row)

DELETE FROM _timescaledb_config.bgw_job;
INSERT INTO _timescaledb_config.bgw_job (application_name, job_type, schedule_INTERVAL, max_runtime, max_retries, retry_period) VALUES
('test_job_3_long', 'bgw_test_job_3_long', INTERVAL '5000ms', INTERVAL '100s', 3, INTERVAL '10ms');
\c :TEST_DBNAME :ROLE_DEFAULT_PERM_USER
--escalated priv needed for access to pg_stat_activity
\c :TEST_DBNAME :ROLE_SUPERUSER
SELECT ts_bgw_db_scheduler_test_run(500);
 ts_bgw_db_scheduler_test_run 
------------------------------
 
(1 row)

SELECT wait_application_pid('test_job_3_long') IS NOT NULL ;
 ?column? 
----------
 t
(1 row)

SELECT pg_terminate_backend(wait_application_pid('DB Scheduler Test'));
 pg_terminate_backend 
----------------------
 t
(1 row)

SELECT ts_bgw_db_scheduler_test_wait_for_scheduler_finish();
 ts_bgw_db_scheduler_test_wait_for_scheduler_finish 
----------------------------------------------------
 
(1 row)

SELECT job_id, last_finish, last_run_success, total_runs, total_successes, total_failures, total_crashes, consecutive_crashes
FROM _timescaledb_internal.bgw_job_stat;
 job_id | last_finish | last_run_success | total_runs | total_successes | total_failures | total_crashes | consecutive_crashes 
--------+-------------+------------------+------------+-----------------+----------------+---------------+---------------------
   1005 | -infinity   | f                |          1 |               0 |              0 |             1 |                   1
(1 row)

SELECT * FROM sorted_bgw_log;
 msg_no | mock_time | application_name |                                          msg                                          
--------+-----------+------------------+---------------------------------------------------------------------------------------
      0 |         0 | DB Scheduler     | [TESTING] Registered new background worker
      1 |         0 | DB Scheduler     | [TESTING] Wait until 500000, started at 0
      2 |         0 | DB Scheduler     | terminating TimescaleDB job scheduler due to administrator command
      3 |         0 | DB Scheduler     | terminating connection due to administrator command
      0 |         0 | test_job_3_long  | Before sleep job 3
      1 |         0 | test_job_3_long  | Job got term signal
      2 |         0 | test_job_3_long  | terminating TimescaleDB background job "test_job_3_long" due to administrator command
      3 |         0 | test_job_3_long  | terminating connection due to administrator command
(8 rows)

--After a SIGTERM to scheduler and jobs, the jobs are considered crashed and there is a imposed wait of 5 min before a job can be run.
--See that there is no run again because of the crash-imposed wait (not run with the 10ms retry_period)
SELECT ts_bgw_db_scheduler_test_run_and_wait_for_scheduler_finish(500);
 ts_bgw_db_scheduler_test_run_and_wait_for_scheduler_finish 
------------------------------------------------------------
 
(1 row)

SELECT job_id, last_finish, next_start, last_run_success, total_runs, total_successes, total_failures, total_crashes, consecutive_crashes
FROM _timescaledb_internal.bgw_job_stat;
 job_id | last_finish | next_start | last_run_success | total_runs | total_successes | total_failures | total_crashes | consecutive_crashes 
--------+-------------+------------+------------------+------------+-----------------+----------------+---------------+---------------------
   1005 | -infinity   | -infinity  | f                |          1 |               0 |              0 |             1 |                   1
(1 row)

--But after the 5 min period the job is again run
SELECT ts_bgw_db_scheduler_test_run_and_wait_for_scheduler_finish(400000);
 ts_bgw_db_scheduler_test_run_and_wait_for_scheduler_finish 
------------------------------------------------------------
 
(1 row)

SELECT job_id, last_finish, next_start, last_run_success, total_runs, total_successes, total_failures, total_crashes, consecutive_crashes
FROM _timescaledb_internal.bgw_job_stat;
 job_id |          last_finish           |           next_start           | last_run_success | total_runs | total_successes | total_failures | total_crashes | consecutive_crashes 
--------+--------------------------------+--------------------------------+------------------+------------+-----------------+----------------+---------------+---------------------
   1005 | Fri Dec 31 16:05:00.5 1999 PST | Fri Dec 31 16:05:05.5 1999 PST | t                |          2 |               1 |              0 |             1 |                   0
(1 row)

SELECT * FROM sorted_bgw_log;
 msg_no | mock_time | application_name |                                          msg                                          
--------+-----------+------------------+---------------------------------------------------------------------------------------
      0 |         0 | DB Scheduler     | [TESTING] Wait until 500000, started at 0
      0 |         0 | DB Scheduler     | [TESTING] Registered new background worker
      1 |         0 | DB Scheduler     | [TESTING] Wait until 500000, started at 0
      2 |         0 | DB Scheduler     | terminating TimescaleDB job scheduler due to administrator command
      3 |         0 | DB Scheduler     | terminating connection due to administrator command
      0 |         0 | test_job_3_long  | Before sleep job 3
      1 |         0 | test_job_3_long  | Job got term signal
      2 |         0 | test_job_3_long  | terminating TimescaleDB background job "test_job_3_long" due to administrator command
      3 |         0 | test_job_3_long  | terminating connection due to administrator command
      0 |    500000 | DB Scheduler     | [TESTING] Wait until 300500000, started at 500000
      1 | 300500000 | DB Scheduler     | [TESTING] Registered new background worker
      2 | 300500000 | DB Scheduler     | [TESTING] Wait until 400500000, started at 300500000
      0 | 300500000 | test_job_3_long  | Before sleep job 3
      1 | 300500000 | test_job_3_long  | After sleep job 3
(14 rows)

CREATE FUNCTION wait_for_timer_to_run(started_at INTEGER, spins INTEGER=:TEST_SPINWAIT_ITERS) RETURNS BOOLEAN LANGUAGE PLPGSQL AS
$BODY$
DECLARE
	num_runs INTEGER;
	message TEXT;
BEGIN
	select format('[TESTING] Wait until %%, started at %s', started_at) into message;
	FOR i in 1..spins
	LOOP
	SELECT COUNT(*) from bgw_log where msg LIKE message INTO num_runs;
	if (num_runs > 0) THEN
		RETURN true;
	ELSE
		PERFORM pg_sleep(0.1);
	END IF;
	END LOOP;
	RETURN false;
END
$BODY$;
CREATE FUNCTION wait_for_job_3_to_finish(runs INTEGER, spins INTEGER=:TEST_SPINWAIT_ITERS) RETURNS BOOLEAN LANGUAGE PLPGSQL AS
$BODY$
DECLARE
	num_runs INTEGER;
BEGIN
	FOR i in 1..spins
	LOOP
	SELECT COUNT(*) from bgw_log where msg='After sleep job 3' INTO num_runs;
	if (num_runs = runs) THEN
		RETURN true;
	ELSE
		PERFORM pg_sleep(0.1);
	END IF;
	END LOOP;
	RETURN false;
END
$BODY$;
--
-- Test starting more jobs than availlable workers
--
\c :TEST_DBNAME :ROLE_SUPERUSER
TRUNCATE bgw_log;
TRUNCATE _timescaledb_internal.bgw_job_stat;
SELECT ts_bgw_params_reset_time();
 ts_bgw_params_reset_time 
--------------------------
 
(1 row)

DELETE FROM _timescaledb_config.bgw_job;
SELECT ts_bgw_params_mock_wait_returns_immediately(:WAIT_FOR_OTHER_TO_ADVANCE);
 ts_bgw_params_mock_wait_returns_immediately 
---------------------------------------------
 
(1 row)

--Our normal limit is 8 jobs (1 already taken up by the launcher, we don't register the test scheduler)
--so start 8 workers. Make the schedule_INTERVAL long and the retry period short so that the
--retries happen within the scheduler run time but everything only runs once.
INSERT INTO _timescaledb_config.bgw_job (application_name, job_type, schedule_INTERVAL, max_runtime, max_retries, retry_period) VALUES
('test_job_3_long_1', 'bgw_test_job_3_long', INTERVAL '5000ms', INTERVAL '100s', 3, INTERVAL '10ms'),
('test_job_3_long_2', 'bgw_test_job_3_long', INTERVAL '5000ms', INTERVAL '100s', 3, INTERVAL '10ms'),
('test_job_3_long_3', 'bgw_test_job_3_long', INTERVAL '5000ms', INTERVAL '100s', 3, INTERVAL '10ms'),
('test_job_3_long_4', 'bgw_test_job_3_long', INTERVAL '5000ms', INTERVAL '100s', 3, INTERVAL '10ms'),
('test_job_3_long_5', 'bgw_test_job_3_long', INTERVAL '5000ms', INTERVAL '100s', 3, INTERVAL '10ms'),
('test_job_3_long_6', 'bgw_test_job_3_long', INTERVAL '5000ms', INTERVAL '100s', 3, INTERVAL '10ms'),
('test_job_3_long_7', 'bgw_test_job_3_long', INTERVAL '5000ms', INTERVAL '100s', 3, INTERVAL '10ms'),
('test_job_3_long_8', 'bgw_test_job_3_long', INTERVAL '5000ms', INTERVAL '100s', 3, INTERVAL '10ms');
\c :TEST_DBNAME :ROLE_DEFAULT_PERM_USER
SELECT ts_bgw_db_scheduler_test_run(25000); --quit at second 25
 ts_bgw_db_scheduler_test_run 
------------------------------
 
(1 row)

--the first 7 jobs will run right away, but not the last one
SELECT wait_for_timer_to_run(0);
 wait_for_timer_to_run 
-----------------------
 t
(1 row)

SELECT wait_for_job_3_to_finish(7);
 wait_for_job_3_to_finish 
--------------------------
 t
(1 row)

SELECT job_id, last_run_success, total_runs, total_successes, total_failures, total_crashes, consecutive_crashes
FROM _timescaledb_internal.bgw_job_stat
ORDER BY job_id;
 job_id | last_run_success | total_runs | total_successes | total_failures | total_crashes | consecutive_crashes 
--------+------------------+------------+-----------------+----------------+---------------+---------------------
   1006 | t                |          1 |               1 |              0 |             0 |                   0
   1007 | t                |          1 |               1 |              0 |             0 |                   0
   1008 | t                |          1 |               1 |              0 |             0 |                   0
   1009 | t                |          1 |               1 |              0 |             0 |                   0
   1010 | t                |          1 |               1 |              0 |             0 |                   0
   1011 | t                |          1 |               1 |              0 |             0 |                   0
   1012 | t                |          1 |               1 |              0 |             0 |                   0
(7 rows)

--but after the first batch finishes and 1 second (START_RETRY_MS) passes, the last job will run.
SELECT ts_bgw_params_reset_time(1000000, true); --set to second 1
 ts_bgw_params_reset_time 
--------------------------
 
(1 row)

SELECT wait_for_timer_to_run(1000000);
 wait_for_timer_to_run 
-----------------------
 t
(1 row)

SELECT wait_for_job_3_to_finish(8);
 wait_for_job_3_to_finish 
--------------------------
 t
(1 row)

SELECT ts_bgw_params_reset_time(30000000, true); --set to second 30, which causes a quit.
 ts_bgw_params_reset_time 
--------------------------
 
(1 row)

SELECT ts_bgw_db_scheduler_test_wait_for_scheduler_finish();
 ts_bgw_db_scheduler_test_wait_for_scheduler_finish 
----------------------------------------------------
 
(1 row)

--should have all 8 runs, all with success runs
SELECT job_id, last_run_success, total_runs, total_successes, total_failures, total_crashes, consecutive_crashes
FROM _timescaledb_internal.bgw_job_stat
ORDER BY job_id;
 job_id | last_run_success | total_runs | total_successes | total_failures | total_crashes | consecutive_crashes 
--------+------------------+------------+-----------------+----------------+---------------+---------------------
   1006 | t                |          1 |               1 |              0 |             0 |                   0
   1007 | t                |          1 |               1 |              0 |             0 |                   0
   1008 | t                |          1 |               1 |              0 |             0 |                   0
   1009 | t                |          1 |               1 |              0 |             0 |                   0
   1010 | t                |          1 |               1 |              0 |             0 |                   0
   1011 | t                |          1 |               1 |              0 |             0 |                   0
   1012 | t                |          1 |               1 |              0 |             0 |                   0
   1013 | t                |          1 |               1 |              0 |             0 |                   0
(8 rows)

SELECT * FROM bgw_log WHERE application_name = 'DB Scheduler' ORDER BY mock_time, application_name, msg_no;
 msg_no | mock_time | application_name |                                   msg                                    
--------+-----------+------------------+--------------------------------------------------------------------------
      0 |         0 | DB Scheduler     | [TESTING] Registered new background worker
      1 |         0 | DB Scheduler     | [TESTING] Registered new background worker
      2 |         0 | DB Scheduler     | [TESTING] Registered new background worker
      3 |         0 | DB Scheduler     | [TESTING] Registered new background worker
      4 |         0 | DB Scheduler     | [TESTING] Registered new background worker
      5 |         0 | DB Scheduler     | [TESTING] Registered new background worker
      6 |         0 | DB Scheduler     | [TESTING] Registered new background worker
      7 |         0 | DB Scheduler     | failed to launch job 1013 "test_job_3_long_8": out of background workers
      8 |         0 | DB Scheduler     | [TESTING] Wait until 1000000, started at 0
      9 |   1000000 | DB Scheduler     | [TESTING] Registered new background worker
     10 |   1000000 | DB Scheduler     | [TESTING] Wait until 5000000, started at 1000000
(11 rows)

SELECT ts_bgw_params_destroy();
 ts_bgw_params_destroy 
-----------------------
 
(1 row)

--
-- Test setting next_start time within a job
--
\c :TEST_DBNAME :ROLE_SUPERUSER
TRUNCATE bgw_log;
TRUNCATE _timescaledb_internal.bgw_job_stat;
SELECT ts_bgw_params_reset_time();
 ts_bgw_params_reset_time 
--------------------------
 
(1 row)

SELECT ts_bgw_params_mock_wait_returns_immediately(:WAIT_ON_JOB);
 ts_bgw_params_mock_wait_returns_immediately 
---------------------------------------------
 
(1 row)

DELETE FROM _timescaledb_config.bgw_job;
INSERT INTO _timescaledb_config.bgw_job (application_name, job_type, schedule_INTERVAL, max_runtime, max_retries, retry_period) VALUES
('test_job_4', 'bgw_test_job_4', INTERVAL '100ms', INTERVAL '100s', 3, INTERVAL '1s');
select * from _timescaledb_config.bgw_job;
  id  | application_name |    job_type    | schedule_interval |   max_runtime   | max_retries | retry_period 
------+------------------+----------------+-------------------+-----------------+-------------+--------------
 1014 | test_job_4       | bgw_test_job_4 | @ 0.1 secs        | @ 1 min 40 secs |           3 | @ 1 sec
(1 row)

\c :TEST_DBNAME :ROLE_DEFAULT_PERM_USER
-- Now run and make sure next_start is 200ms away, not 100ms
SELECT ts_bgw_db_scheduler_test_run_and_wait_for_scheduler_finish(25);
 ts_bgw_db_scheduler_test_run_and_wait_for_scheduler_finish 
------------------------------------------------------------
 
(1 row)

SELECT job_id, next_start - last_finish as until_next, last_run_success, total_runs, total_successes, total_failures, total_crashes
FROM _timescaledb_internal.bgw_job_stat;
 job_id | until_next | last_run_success | total_runs | total_successes | total_failures | total_crashes 
--------+------------+------------------+------------+-----------------+----------------+---------------
   1014 | @ 0.2 secs | t                |          1 |               1 |              0 |             0
(1 row)

SELECT * FROM sorted_bgw_log;
 msg_no | mock_time | application_name |                    msg                     
--------+-----------+------------------+--------------------------------------------
      0 |         0 | DB Scheduler     | [TESTING] Registered new background worker
      1 |         0 | DB Scheduler     | [TESTING] Wait until 25000, started at 0
      0 |         0 | test_job_4       | Execute job 4
(3 rows)

-- Now just make sure that the job actually runs in 200ms
SELECT ts_bgw_db_scheduler_test_run_and_wait_for_scheduler_finish(200);
 ts_bgw_db_scheduler_test_run_and_wait_for_scheduler_finish 
------------------------------------------------------------
 
(1 row)

-- Print next_start and last_finish explicitly, instead of the difference, to make sure the times have changed
-- since the last run
SELECT job_id, next_start, last_finish, last_run_success, total_runs, total_successes, total_failures, total_crashes
FROM _timescaledb_internal.bgw_job_stat;
 job_id |           next_start           |          last_finish           | last_run_success | total_runs | total_successes | total_failures | total_crashes 
--------+--------------------------------+--------------------------------+------------------+------------+-----------------+----------------+---------------
   1014 | Fri Dec 31 16:00:00.4 1999 PST | Fri Dec 31 16:00:00.2 1999 PST | t                |          2 |               2 |              0 |             0
(1 row)

SELECT * FROM sorted_bgw_log;
 msg_no | mock_time | application_name |                      msg                       
--------+-----------+------------------+------------------------------------------------
      0 |         0 | DB Scheduler     | [TESTING] Registered new background worker
      1 |         0 | DB Scheduler     | [TESTING] Wait until 25000, started at 0
      0 |         0 | test_job_4       | Execute job 4
      0 |     25000 | DB Scheduler     | [TESTING] Wait until 200000, started at 25000
      1 |    200000 | DB Scheduler     | [TESTING] Registered new background worker
      2 |    200000 | DB Scheduler     | [TESTING] Wait until 225000, started at 200000
      0 |    200000 | test_job_4       | Execute job 4
(7 rows)

-- Test updating jobs list
TRUNCATE bgw_log;
\set ON_ERROR_STOP 0
SELECT _timescaledb_internal.stop_background_workers();
ERROR:  must be superuser to stop background workers
SELECT _timescaledb_internal.restart_background_workers();
ERROR:  must be superuser to restart background workers
SELECT _timescaledb_internal.start_background_workers();
ERROR:  must be superuser to start background workers
\set ON_ERROR_STOP 1
\c :TEST_DBNAME :ROLE_SUPERUSER
SELECT _timescaledb_internal.stop_background_workers();
 stop_background_workers 
-------------------------
 t
(1 row)

CREATE OR REPLACE FUNCTION ts_test_job_refresh() RETURNS TABLE(
id INTEGER,
application_name NAME,
job_type NAME,
schedule_interval INTERVAL,
max_runtime INTERVAL,
max_retries INT,
retry_period INTERVAL,
next_start TIMESTAMPTZ,
timeout_at TIMESTAMPTZ,
reserved_worker BOOLEAN,
may_next_mark_end BOOLEAN
)
AS :MODULE_PATHNAME LANGUAGE C VOLATILE;
CREATE FUNCTION verify_refresh_correct() RETURNS BOOLEAN LANGUAGE PLPGSQL AS
$BODY$
DECLARE
    num_jobs INTEGER;
    num_jobs_in_list INTEGER;
BEGIN
    SELECT COUNT(*) from _timescaledb_config.bgw_job INTO num_jobs;
	select COUNT(*) from ts_test_job_refresh() JOIN _timescaledb_config.bgw_job USING (id,application_name,job_type,schedule_interval,max_runtime,max_retries,retry_period) INTO num_jobs_in_list;
	IF (num_jobs = num_jobs_in_list) THEN
		RETURN true;
	END IF;
	RETURN false;
END
$BODY$;
CREATE FUNCTION wait_for_job_1_to_run(runs INTEGER, spins INTEGER=:TEST_SPINWAIT_ITERS) RETURNS BOOLEAN LANGUAGE PLPGSQL AS
$BODY$
DECLARE
	num_runs INTEGER;
BEGIN
	FOR i in 1..spins
	LOOP
	SELECT COUNT(*) from bgw_log where msg='Execute job 1' INTO num_runs;
	if (num_runs = runs) THEN
		RETURN true;
	ELSE
		PERFORM pg_sleep(0.1);
	END IF;
	END LOOP;
	RETURN false;
END
$BODY$;
select * from verify_refresh_correct();
 verify_refresh_correct 
------------------------
 t
(1 row)

-- Should return the same table
select * from verify_refresh_correct();
 verify_refresh_correct 
------------------------
 t
(1 row)

DELETE FROM _timescaledb_config.bgw_job;
-- Make sure jobs list is empty
select count(*) from ts_test_job_refresh();
 count 
-------
     0
(1 row)

INSERT INTO _timescaledb_config.bgw_job (application_name, job_type, schedule_INTERVAL, max_runtime, max_retries, retry_period) VALUES
('test_1', 'bgw_test_job_1', INTERVAL '100ms', INTERVAL '100s', 3, INTERVAL '1s'),
('test_2', 'bgw_test_job_1', INTERVAL '100ms', INTERVAL '100s', 3, INTERVAL '1s'),
('test_3', 'bgw_test_job_1', INTERVAL '100ms', INTERVAL '100s', 3, INTERVAL '1s');
select * from verify_refresh_correct();
 verify_refresh_correct 
------------------------
 t
(1 row)

DELETE from _timescaledb_config.bgw_job where application_name='test_2';
INSERT INTO _timescaledb_config.bgw_job (application_name, job_type, schedule_INTERVAL, max_runtime, max_retries, retry_period) VALUES
('test_4', 'bgw_test_job_1', INTERVAL '100ms', INTERVAL '100s', 3, INTERVAL '1s');
select * from verify_refresh_correct();
 verify_refresh_correct 
------------------------
 t
(1 row)

DELETE FROM _timescaledb_config.bgw_job;
INSERT INTO _timescaledb_config.bgw_job (application_name, job_type, schedule_INTERVAL, max_runtime, max_retries, retry_period) VALUES
('test_10', 'test_10', INTERVAL '100ms', INTERVAL '100s', 5, INTERVAL '1s');
select * from verify_refresh_correct();
 verify_refresh_correct 
------------------------
 t
(1 row)

-- Should be idempotent
select * from verify_refresh_correct();
 verify_refresh_correct 
------------------------
 t
(1 row)

DELETE FROM _timescaledb_config.bgw_job;
INSERT INTO _timescaledb_config.bgw_job (application_name, job_type, schedule_INTERVAL, max_runtime, max_retries, retry_period) VALUES
('another', 'bgw_test_job_1', INTERVAL '100ms', INTERVAL '100s', 5, INTERVAL '1s'),
('another1', 'bgw_test_job_1', INTERVAL '100ms', INTERVAL '100s', 5, INTERVAL '1s'),
('another2', 'bgw_test_job_1', INTERVAL '100ms', INTERVAL '100s', 5, INTERVAL '1s'),
('another3', 'bgw_test_job_1', INTERVAL '100ms', INTERVAL '100s', 5, INTERVAL '1s'),
('another4', 'bgw_test_job_1', INTERVAL '100ms', INTERVAL '100s', 5, INTERVAL '1s');
select * from verify_refresh_correct();
 verify_refresh_correct 
------------------------
 t
(1 row)

DELETE FROM _timescaledb_config.bgw_job where application_name='another' OR application_name='another3';
INSERT INTO _timescaledb_config.bgw_job (application_name, job_type, schedule_INTERVAL, max_runtime, max_retries, retry_period) VALUES
('blah', 'bgw_test_job_1', INTERVAL '100ms', INTERVAL '100s', 5, INTERVAL '1s');
select * from verify_refresh_correct();
 verify_refresh_correct 
------------------------
 t
(1 row)

-- Now test a real scheduler-mock running in a loop and updating the list of jobs
TRUNCATE _timescaledb_internal.bgw_job_stat;
SELECT ts_bgw_params_reset_time();
 ts_bgw_params_reset_time 
--------------------------
 
(1 row)

DELETE FROM _timescaledb_config.bgw_job;
SELECT ts_bgw_params_mock_wait_returns_immediately(:WAIT_FOR_OTHER_TO_ADVANCE);
 ts_bgw_params_mock_wait_returns_immediately 
---------------------------------------------
 
(1 row)

SELECT ts_bgw_db_scheduler_test_run(500);
 ts_bgw_db_scheduler_test_run 
------------------------------
 
(1 row)

-- Wait for scheduler to start up
SELECT wait_for_timer_to_run(0);
 wait_for_timer_to_run 
-----------------------
 t
(1 row)

SELECT insert_job('another', 'bgw_test_job_1', INTERVAL '100ms', INTERVAL '100s', 5, INTERVAL '1s');
 insert_job 
------------
 
(1 row)

SELECT ts_bgw_params_reset_time(50000, true);
 ts_bgw_params_reset_time 
--------------------------
 
(1 row)

SELECT wait_for_timer_to_run(50000);
 wait_for_timer_to_run 
-----------------------
 t
(1 row)

SELECT wait_for_job_1_to_run(1);
 wait_for_job_1_to_run 
-----------------------
 t
(1 row)

SELECT ts_bgw_params_reset_time(150000, true);
 ts_bgw_params_reset_time 
--------------------------
 
(1 row)

SELECT wait_for_timer_to_run(150000);
 wait_for_timer_to_run 
-----------------------
 t
(1 row)

SELECT wait_for_job_1_to_run(2);
 wait_for_job_1_to_run 
-----------------------
 t
(1 row)

select * from _timescaledb_internal.bgw_job_stat;
 job_id |           last_start            |           last_finish           |           next_start            |     last_successful_finish      | last_run_success | total_runs | total_duration | total_successes | total_failures | total_crashes | consecutive_failures | consecutive_crashes 
--------+---------------------------------+---------------------------------+---------------------------------+---------------------------------+------------------+------------+----------------+-----------------+----------------+---------------+----------------------+---------------------
   1026 | Fri Dec 31 16:00:00.15 1999 PST | Fri Dec 31 16:00:00.15 1999 PST | Fri Dec 31 16:00:00.25 1999 PST | Fri Dec 31 16:00:00.15 1999 PST | t                |          2 | @ 0            |               2 |              0 |             0 |                    0 |                   0
(1 row)

SELECT delete_job(x.id) FROM (select * from _timescaledb_config.bgw_job) x;
 delete_job 
------------
 
(1 row)

-- test null handling in delete_job
SELECT delete_job(NULL);
 delete_job 
------------
 
(1 row)

SELECT ts_bgw_params_reset_time(200000, true);
 ts_bgw_params_reset_time 
--------------------------
 
(1 row)

SELECT wait_for_timer_to_run(200000);
 wait_for_timer_to_run 
-----------------------
 t
(1 row)

-- In the next time interval, nothing should be run because scheduler should have an empty list
SELECT ts_bgw_params_reset_time(300000, true);
 ts_bgw_params_reset_time 
--------------------------
 
(1 row)

SELECT wait_for_timer_to_run(300000);
 wait_for_timer_to_run 
-----------------------
 t
(1 row)

-- Same for this time interval
SELECT ts_bgw_params_reset_time(400000, true);
 ts_bgw_params_reset_time 
--------------------------
 
(1 row)

SELECT wait_for_timer_to_run(400000);
 wait_for_timer_to_run 
-----------------------
 t
(1 row)

-- Now add a new job and make sure it gets run before the scheduler dies
SELECT insert_job('new_job', 'bgw_test_job_1', INTERVAL '10ms', INTERVAL '100s', 5, INTERVAL '1s');
 insert_job 
------------
 
(1 row)

SELECT ts_bgw_params_reset_time(450000, true);
 ts_bgw_params_reset_time 
--------------------------
 
(1 row)

-- New job should be run once, for a total of 3 runs of this job in the log
SELECT wait_for_job_1_to_run(3);
 wait_for_job_1_to_run 
-----------------------
 t
(1 row)

-- New job should be run again
SELECT ts_bgw_params_reset_time(480000, true);
 ts_bgw_params_reset_time 
--------------------------
 
(1 row)

SELECT wait_for_job_1_to_run(4);
 wait_for_job_1_to_run 
-----------------------
 t
(1 row)

SELECT ts_bgw_params_reset_time(500000, true);
 ts_bgw_params_reset_time 
--------------------------
 
(1 row)

SELECT ts_bgw_db_scheduler_test_wait_for_scheduler_finish();
 ts_bgw_db_scheduler_test_wait_for_scheduler_finish 
----------------------------------------------------
 
(1 row)

SELECT * FROM sorted_bgw_log;
 msg_no | mock_time | application_name |                      msg                       
--------+-----------+------------------+------------------------------------------------
      0 |         0 | DB Scheduler     | [TESTING] Wait until 500000, started at 0
      1 |     50000 | DB Scheduler     | [TESTING] Registered new background worker
      2 |     50000 | DB Scheduler     | [TESTING] Wait until 500000, started at 50000
      0 |     50000 | another          | Execute job 1
      3 |    150000 | DB Scheduler     | [TESTING] Registered new background worker
      4 |    150000 | DB Scheduler     | [TESTING] Wait until 500000, started at 150000
      0 |    150000 | another          | Execute job 1
      5 |    200000 | DB Scheduler     | [TESTING] Wait until 500000, started at 200000
      6 |    300000 | DB Scheduler     | [TESTING] Wait until 500000, started at 300000
      7 |    400000 | DB Scheduler     | [TESTING] Wait until 500000, started at 400000
      8 |    450000 | DB Scheduler     | [TESTING] Registered new background worker
      9 |    450000 | DB Scheduler     | [TESTING] Wait until 500000, started at 450000
      0 |    450000 | new_job          | Execute job 1
     10 |    480000 | DB Scheduler     | [TESTING] Registered new background worker
     11 |    480000 | DB Scheduler     | [TESTING] Wait until 500000, started at 480000
      0 |    480000 | new_job          | Execute job 1
(16 rows)

select * from _timescaledb_internal.bgw_job_stat;
 job_id |           last_start            |           last_finish           |           next_start            |     last_successful_finish      | last_run_success | total_runs | total_duration | total_successes | total_failures | total_crashes | consecutive_failures | consecutive_crashes 
--------+---------------------------------+---------------------------------+---------------------------------+---------------------------------+------------------+------------+----------------+-----------------+----------------+---------------+----------------------+---------------------
   1027 | Fri Dec 31 16:00:00.48 1999 PST | Fri Dec 31 16:00:00.48 1999 PST | Fri Dec 31 16:00:00.49 1999 PST | Fri Dec 31 16:00:00.48 1999 PST | t                |          2 | @ 0            |               2 |              0 |             0 |                    0 |                   0
(1 row)

SELECT * FROM insert_job(NULL,NULL,NULL,NULL,NULL,NULL);
 insert_job 
------------
 
(1 row)

