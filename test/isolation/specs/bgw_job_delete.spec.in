setup
{
CREATE OR REPLACE FUNCTION ts_bgw_params_create() RETURNS VOID
AS '@TS_MODULE_PATHNAME@'  LANGUAGE C VOLATILE;

SELECT _timescaledb_internal.stop_background_workers();

CREATE TABLE public.bgw_dsm_handle_store(
    handle BIGINT
);
INSERT INTO public.bgw_dsm_handle_store VALUES (0);
SELECT ts_bgw_params_create();

CREATE TABLE public.bgw_log(
    msg_no INT,
    mock_time BIGINT,
    application_name TEXT,
    msg TEXT
);


DELETE FROM _timescaledb_config.bgw_job;
ALTER TABLE _timescaledb_config.bgw_job DROP CONSTRAINT IF EXISTS valid_job_type;
}

teardown {
  CREATE OR REPLACE FUNCTION ts_bgw_params_destroy() RETURNS VOID
  AS '@TS_MODULE_PATHNAME@'  LANGUAGE C VOLATILE;
  SELECT * from ts_bgw_params_destroy(); 
  DROP TABLE  public.bgw_log;
  DROP TABLE public.bgw_dsm_handle_store; 
}

session "cj"
step "cjj5" {
    INSERT INTO _timescaledb_config.bgw_job (application_name, job_type, schedule_INTERVAL, max_runtime, max_retries, retry_period) VALUES
    ('test_job_1', 'bgw_test_job_5_lock', INTERVAL '100ms', INTERVAL '100s', 3, INTERVAL '1s');
}
step "cjj6" {
    INSERT INTO _timescaledb_config.bgw_job (application_name, job_type, schedule_INTERVAL, max_runtime, max_retries, retry_period) VALUES
    ('test_job_1', 'bgw_test_job_6_lock_notxn', INTERVAL '100ms', INTERVAL '100s', 3, INTERVAL '1s');
}

session "s1"
setup	{ 
BEGIN; 

CREATE OR REPLACE FUNCTION ts_bgw_db_scheduler_test_run_and_wait_for_scheduler_finish(timeout INT = -1, mock_start_time INT = 0) RETURNS VOID
AS '@TS_MODULE_PATHNAME@' LANGUAGE C VOLATILE;

CREATE OR REPLACE FUNCTION ts_bgw_db_scheduler_test_run(timeout INT = -1, mock_start_time INT = 0) RETURNS VOID
AS '@TS_MODULE_PATHNAME@' LANGUAGE C VOLATILE;

CREATE OR REPLACE FUNCTION ts_bgw_db_scheduler_test_wait_for_scheduler_finish() RETURNS VOID
AS '@TS_MODULE_PATHNAME@' LANGUAGE C VOLATILE;

SET  role default_perm_user;
}


step "s1a"	{ SELECT ts_bgw_db_scheduler_test_run(25); select pg_sleep(0.2); }
step "s1b"  { SELECT ts_bgw_db_scheduler_test_wait_for_scheduler_finish(); } 
step "s1c"	{ COMMIT; }

teardown {
    reset role;
    SELECT * FROM public.bgw_log; 
}


session "s2"
step "s2a"	{ SELECT pg_advisory_lock(1); }
step "s2u"	{ SELECT pg_advisory_unlock(1); }
teardown {
    select pg_advisory_unlock_all();
}

session "s3"
setup { 
CREATE OR REPLACE FUNCTION ts_test_bgw_job_delete_by_id(job_id INTEGER)
RETURNS VOID
AS '@TS_MODULE_PATHNAME@'
LANGUAGE C VOLATILE STRICT;

SET lock_timeout = '50ms';
SET  role default_perm_user;
}
step "s3a" { select ts_test_bgw_job_delete_by_id(id) FROM _timescaledb_config.bgw_job; }
teardown {
    reset role;
}

# a delete should kill a running job 
permutation "cjj5" "s2a" "s1a" "s3a" "s1b" "s1c"
# a delete before the job is run should work fine too
permutation "cjj5" "s2a"  "s3a" "s1a" "s1b" "s1c"

# if a job doesn't have a txn, the delete will not be able to kill the job
# and will thus wait on the lock (and lock_timeout in the test below)
permutation "cjj6" "s2a" "s1a" "s3a" "s2u" "s1b" "s1c"
