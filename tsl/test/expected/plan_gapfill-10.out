-- This file and its contents are licensed under the Timescale License.
-- Please see the included NOTICE for copyright information and
-- LICENSE-TIMESCALE for a copy of the license.
\set EXPLAIN 'EXPLAIN (COSTS OFF)'
CREATE TABLE gapfill_plan_test(time timestamptz NOT NULL, value float);
SELECT table_name FROM create_hypertable('gapfill_plan_test','time',chunk_time_interval=>'4 weeks'::interval);
    table_name     
-------------------
 gapfill_plan_test
(1 row)

INSERT INTO gapfill_plan_test SELECT generate_series('2018-01-01'::timestamptz,'2018-04-01'::timestamptz,'1m'::interval), 1.0;
-- simple example
:EXPLAIN
SELECT
  time_bucket_gapfill('5m',time,now(),now()),
  avg(c2)
FROM (VALUES (now(),1),(now(),NULL),(now(),NULL)) as t(time,c2)
GROUP BY 1
ORDER BY 1;
                                       QUERY PLAN                                        
-----------------------------------------------------------------------------------------
 Custom Scan (GapFill)
   ->  GroupAggregate
         Group Key: (time_bucket_gapfill('@ 5 mins'::interval, "*VALUES*".column1))
         ->  Sort
               Sort Key: (time_bucket_gapfill('@ 5 mins'::interval, "*VALUES*".column1))
               ->  Values Scan on "*VALUES*"
(6 rows)

-- test sorting
:EXPLAIN
SELECT
  time_bucket_gapfill('5m',time,now(),now()),
  avg(c2)
FROM (VALUES (now(),1),(now(),NULL),(now(),NULL)) as t(time,c2)
GROUP BY 1
ORDER BY 2;
                                          QUERY PLAN                                           
-----------------------------------------------------------------------------------------------
 Sort
   Sort Key: (avg("*VALUES*".column2))
   ->  Custom Scan (GapFill)
         ->  GroupAggregate
               Group Key: (time_bucket_gapfill('@ 5 mins'::interval, "*VALUES*".column1))
               ->  Sort
                     Sort Key: (time_bucket_gapfill('@ 5 mins'::interval, "*VALUES*".column1))
                     ->  Values Scan on "*VALUES*"
(8 rows)

-- test sort direction
:EXPLAIN
SELECT
  time_bucket_gapfill('5m',time,now(),now()),
  avg(c2)
FROM (VALUES (now(),1),(now(),NULL),(now(),NULL)) as t(time,c2)
GROUP BY 1
ORDER BY 1 DESC;
                                             QUERY PLAN                                              
-----------------------------------------------------------------------------------------------------
 Sort
   Sort Key: (time_bucket_gapfill('@ 5 mins'::interval, "*VALUES*".column1)) DESC
   ->  Custom Scan (GapFill)
         ->  Sort
               Sort Key: (time_bucket_gapfill('@ 5 mins'::interval, "*VALUES*".column1)) NULLS FIRST
               ->  HashAggregate
                     Group Key: time_bucket_gapfill('@ 5 mins'::interval, "*VALUES*".column1)
                     ->  Values Scan on "*VALUES*"
(8 rows)

-- test order by aggregate function
:EXPLAIN
SELECT
  time_bucket_gapfill('5m',time,now(),now()),
  avg(c2)
FROM (VALUES (now(),1),(now(),NULL),(now(),NULL)) as t(time,c2)
GROUP BY 1
ORDER BY 2,1;
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 Sort
   Sort Key: (avg("*VALUES*".column2)), (time_bucket_gapfill('@ 5 mins'::interval, "*VALUES*".column1))
   ->  Custom Scan (GapFill)
         ->  GroupAggregate
               Group Key: (time_bucket_gapfill('@ 5 mins'::interval, "*VALUES*".column1))
               ->  Sort
                     Sort Key: (time_bucket_gapfill('@ 5 mins'::interval, "*VALUES*".column1))
                     ->  Values Scan on "*VALUES*"
(8 rows)

-- test query without order by
:EXPLAIN
SELECT
  time_bucket_gapfill('5m',time,now(),now()),
  avg(c2)
FROM (VALUES (now(),1),(now(),NULL),(now(),NULL)) as t(time,c2)
GROUP BY 1;
                                       QUERY PLAN                                        
-----------------------------------------------------------------------------------------
 Custom Scan (GapFill)
   ->  GroupAggregate
         Group Key: (time_bucket_gapfill('@ 5 mins'::interval, "*VALUES*".column1))
         ->  Sort
               Sort Key: (time_bucket_gapfill('@ 5 mins'::interval, "*VALUES*".column1))
               ->  Values Scan on "*VALUES*"
(6 rows)

-- test parallel query
:EXPLAIN
SELECT
  time_bucket_gapfill('5m',time,to_timestamp(0),to_timestamp(0)),
  avg(value)
FROM gapfill_plan_test
GROUP BY 1
ORDER BY 1;
                                               QUERY PLAN                                                
---------------------------------------------------------------------------------------------------------
 Custom Scan (GapFill)
   ->  Finalize GroupAggregate
         Group Key: (time_bucket_gapfill('@ 5 mins'::interval, _hyper_1_1_chunk."time"))
         ->  Sort
               Sort Key: (time_bucket_gapfill('@ 5 mins'::interval, _hyper_1_1_chunk."time"))
               ->  Gather
                     Workers Planned: 1
                     ->  Partial HashAggregate
                           Group Key: time_bucket_gapfill('@ 5 mins'::interval, _hyper_1_1_chunk."time")
                           ->  Result
                                 ->  Append
                                       ->  Parallel Seq Scan on _hyper_1_1_chunk
                                       ->  Parallel Seq Scan on _hyper_1_2_chunk
                                       ->  Parallel Seq Scan on _hyper_1_3_chunk
                                       ->  Parallel Seq Scan on _hyper_1_4_chunk
(15 rows)

-- test parallel query with locf
:EXPLAIN
SELECT
  time_bucket_gapfill('5m',time,to_timestamp(0),to_timestamp(0)),
  locf(avg(value))
FROM gapfill_plan_test
GROUP BY 1
ORDER BY 1;
                                               QUERY PLAN                                                
---------------------------------------------------------------------------------------------------------
 Custom Scan (GapFill)
   ->  Finalize GroupAggregate
         Group Key: (time_bucket_gapfill('@ 5 mins'::interval, _hyper_1_1_chunk."time"))
         ->  Sort
               Sort Key: (time_bucket_gapfill('@ 5 mins'::interval, _hyper_1_1_chunk."time"))
               ->  Gather
                     Workers Planned: 1
                     ->  Partial HashAggregate
                           Group Key: time_bucket_gapfill('@ 5 mins'::interval, _hyper_1_1_chunk."time")
                           ->  Result
                                 ->  Append
                                       ->  Parallel Seq Scan on _hyper_1_1_chunk
                                       ->  Parallel Seq Scan on _hyper_1_2_chunk
                                       ->  Parallel Seq Scan on _hyper_1_3_chunk
                                       ->  Parallel Seq Scan on _hyper_1_4_chunk
(15 rows)

-- test parallel query with interpolate
:EXPLAIN
SELECT
  time_bucket_gapfill('5m',time,to_timestamp(0),to_timestamp(0)),
  interpolate(avg(value))
FROM gapfill_plan_test
GROUP BY 1
ORDER BY 1;
                                               QUERY PLAN                                                
---------------------------------------------------------------------------------------------------------
 Custom Scan (GapFill)
   ->  Finalize GroupAggregate
         Group Key: (time_bucket_gapfill('@ 5 mins'::interval, _hyper_1_1_chunk."time"))
         ->  Sort
               Sort Key: (time_bucket_gapfill('@ 5 mins'::interval, _hyper_1_1_chunk."time"))
               ->  Gather
                     Workers Planned: 1
                     ->  Partial HashAggregate
                           Group Key: time_bucket_gapfill('@ 5 mins'::interval, _hyper_1_1_chunk."time")
                           ->  Result
                                 ->  Append
                                       ->  Parallel Seq Scan on _hyper_1_1_chunk
                                       ->  Parallel Seq Scan on _hyper_1_2_chunk
                                       ->  Parallel Seq Scan on _hyper_1_3_chunk
                                       ->  Parallel Seq Scan on _hyper_1_4_chunk
(15 rows)

-- make sure we can run gapfill in parallel workers
-- ensure this plan runs in parallel
:EXPLAIN
SELECT
  time_bucket_gapfill('5m',time,to_timestamp(0),to_timestamp(0)),
  interpolate(avg(value))
FROM gapfill_plan_test
GROUP BY 1
ORDER BY 2
LIMIT 1;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Limit
   ->  Sort
         Sort Key: (interpolate(avg(value), NULL::record, NULL::record))
         ->  Custom Scan (GapFill)
               ->  Finalize GroupAggregate
                     Group Key: (time_bucket_gapfill('@ 5 mins'::interval, _hyper_1_1_chunk."time"))
                     ->  Sort
                           Sort Key: (time_bucket_gapfill('@ 5 mins'::interval, _hyper_1_1_chunk."time"))
                           ->  Gather
                                 Workers Planned: 1
                                 ->  Partial HashAggregate
                                       Group Key: time_bucket_gapfill('@ 5 mins'::interval, _hyper_1_1_chunk."time")
                                       ->  Result
                                             ->  Append
                                                   ->  Parallel Seq Scan on _hyper_1_1_chunk
                                                   ->  Parallel Seq Scan on _hyper_1_2_chunk
                                                   ->  Parallel Seq Scan on _hyper_1_3_chunk
                                                   ->  Parallel Seq Scan on _hyper_1_4_chunk
(18 rows)

-- actually run a parallel gapfill
SELECT
  time_bucket_gapfill('5m',time,to_timestamp(0),to_timestamp(0)),
  interpolate(avg(value))
FROM gapfill_plan_test
GROUP BY 1
ORDER BY 2
LIMIT 1;
     time_bucket_gapfill      | interpolate 
------------------------------+-------------
 Mon Jan 01 00:00:00 2018 PST |           1
(1 row)

