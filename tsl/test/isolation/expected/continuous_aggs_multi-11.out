Parsed test spec with 9 sessions

starting permutation: Setup2 LockCompleted LockMat1 Refresh1 Refresh2 UnlockCompleted UnlockMat1
step Setup2: 
    CREATE VIEW continuous_view_1( bkt, cnt)
        WITH ( timescaledb.continuous, timescaledb.refresh_lag = '-5', timescaledb.refresh_interval='72 hours')
        AS SELECT time_bucket('5', time), COUNT(val)
            FROM ts_continuous_test
            GROUP BY 1;
    CREATE VIEW continuous_view_2(bkt, maxl)
        WITH ( timescaledb.continuous,timescaledb.refresh_lag='-10',  timescaledb.refresh_interval='72 hours')
        AS SELECT time_bucket('5', time), max(val)
            FROM ts_continuous_test
            GROUP BY 1;
    CREATE FUNCTION lock_mattable( name text) RETURNS void AS $$
    BEGIN EXECUTE format( 'lock table %s', name);
    END; $$ LANGUAGE plpgsql;

step LockCompleted: BEGIN; LOCK TABLE _timescaledb_catalog.continuous_aggs_completed_threshold IN SHARE MODE;
step LockMat1: BEGIN; select lock_mattable(materialization_hypertable::text) from timescaledb_information.continuous_aggregates where view_name::text like 'continuous_view_1';

lock_mattable  

               
step Refresh1: REFRESH MATERIALIZED VIEW continuous_view_1; <waiting ...>
LOG:  materializing continuous aggregate public.continuous_view_2: nothing to invalidate, new range up to 30
step Refresh2: REFRESH MATERIALIZED VIEW continuous_view_2; <waiting ...>
step UnlockCompleted: ROLLBACK;
step Refresh2: <... completed>
step UnlockMat1: ROLLBACK;
LOG:  materializing continuous aggregate public.continuous_view_1: nothing to invalidate, new range up to 30
step Refresh1: <... completed>

starting permutation: Setup2 Refresh1 Refresh2 LockCompleted LockMat1 I1 Refresh1 Refresh2 UnlockCompleted UnlockMat1 Refresh1_sel Refresh2_sel
step Setup2: 
    CREATE VIEW continuous_view_1( bkt, cnt)
        WITH ( timescaledb.continuous, timescaledb.refresh_lag = '-5', timescaledb.refresh_interval='72 hours')
        AS SELECT time_bucket('5', time), COUNT(val)
            FROM ts_continuous_test
            GROUP BY 1;
    CREATE VIEW continuous_view_2(bkt, maxl)
        WITH ( timescaledb.continuous,timescaledb.refresh_lag='-10',  timescaledb.refresh_interval='72 hours')
        AS SELECT time_bucket('5', time), max(val)
            FROM ts_continuous_test
            GROUP BY 1;
    CREATE FUNCTION lock_mattable( name text) RETURNS void AS $$
    BEGIN EXECUTE format( 'lock table %s', name);
    END; $$ LANGUAGE plpgsql;

LOG:  materializing continuous aggregate public.continuous_view_1: nothing to invalidate, new range up to 30
step Refresh1: REFRESH MATERIALIZED VIEW continuous_view_1;
LOG:  materializing continuous aggregate public.continuous_view_2: nothing to invalidate, new range up to 30
step Refresh2: REFRESH MATERIALIZED VIEW continuous_view_2;
step LockCompleted: BEGIN; LOCK TABLE _timescaledb_catalog.continuous_aggs_completed_threshold IN SHARE MODE;
step LockMat1: BEGIN; select lock_mattable(materialization_hypertable::text) from timescaledb_information.continuous_aggregates where view_name::text like 'continuous_view_1';

lock_mattable  

               
step I1: INSERT INTO ts_continuous_test SELECT 0, i*10 FROM (SELECT generate_series(0, 10) AS i) AS i;
step Refresh1: REFRESH MATERIALIZED VIEW continuous_view_1; <waiting ...>
LOG:  new materialization range not found for public.ts_continuous_test (time column time): not enough new data past completion threshold of 30 as of 29
LOG:  materializing continuous aggregate public.continuous_view_2: processing invalidations, no new range
step Refresh2: REFRESH MATERIALIZED VIEW continuous_view_2; <waiting ...>
step UnlockCompleted: ROLLBACK;
step Refresh2: <... completed>
step UnlockMat1: ROLLBACK;
LOG:  new materialization range not found for public.ts_continuous_test (time column time): not enough new data past completion threshold of 30 as of 29
LOG:  materializing continuous aggregate public.continuous_view_1: processing invalidations, no new range
step Refresh1: <... completed>
step Refresh1_sel: select * from continuous_view_1 where bkt = 0 or bkt > 30
bkt            cnt            

0              16             
step Refresh2_sel: select * from continuous_view_2 where bkt = 0 or bkt > 30 order by bkt;
bkt            maxl           

0              100            

starting permutation: Setup2 AlterLag1 Refresh1 Refresh2 Refresh1_sel Refresh2_sel LockCompleted LockMat1 I2 Refresh1 Refresh2 UnlockCompleted UnlockMat1 Refresh1_sel Refresh2_sel
step Setup2: 
    CREATE VIEW continuous_view_1( bkt, cnt)
        WITH ( timescaledb.continuous, timescaledb.refresh_lag = '-5', timescaledb.refresh_interval='72 hours')
        AS SELECT time_bucket('5', time), COUNT(val)
            FROM ts_continuous_test
            GROUP BY 1;
    CREATE VIEW continuous_view_2(bkt, maxl)
        WITH ( timescaledb.continuous,timescaledb.refresh_lag='-10',  timescaledb.refresh_interval='72 hours')
        AS SELECT time_bucket('5', time), max(val)
            FROM ts_continuous_test
            GROUP BY 1;
    CREATE FUNCTION lock_mattable( name text) RETURNS void AS $$
    BEGIN EXECUTE format( 'lock table %s', name);
    END; $$ LANGUAGE plpgsql;

step AlterLag1: alter view continuous_view_1 set (timescaledb.refresh_lag = 10);
LOG:  materializing continuous aggregate public.continuous_view_1: nothing to invalidate, new range up to 15
step Refresh1: REFRESH MATERIALIZED VIEW continuous_view_1;
LOG:  materializing continuous aggregate public.continuous_view_2: nothing to invalidate, new range up to 30
step Refresh2: REFRESH MATERIALIZED VIEW continuous_view_2;
step Refresh1_sel: select * from continuous_view_1 where bkt = 0 or bkt > 30
bkt            cnt            

0              5              
step Refresh2_sel: select * from continuous_view_2 where bkt = 0 or bkt > 30 order by bkt;
bkt            maxl           

0              4              
step LockCompleted: BEGIN; LOCK TABLE _timescaledb_catalog.continuous_aggs_completed_threshold IN SHARE MODE;
step LockMat1: BEGIN; select lock_mattable(materialization_hypertable::text) from timescaledb_information.continuous_aggregates where view_name::text like 'continuous_view_1';

lock_mattable  

               
step I2: INSERT INTO ts_continuous_test SELECT 40, 1000 ;
step Refresh1: REFRESH MATERIALIZED VIEW continuous_view_1; <waiting ...>
LOG:  materializing continuous aggregate public.continuous_view_2: nothing to invalidate, new range up to 45
step Refresh2: REFRESH MATERIALIZED VIEW continuous_view_2; <waiting ...>
step UnlockCompleted: ROLLBACK;
step Refresh2: <... completed>
step UnlockMat1: ROLLBACK;
LOG:  materializing continuous aggregate public.continuous_view_1: nothing to invalidate, new range up to 30
step Refresh1: <... completed>
step Refresh1_sel: select * from continuous_view_1 where bkt = 0 or bkt > 30
bkt            cnt            

0              5              
step Refresh2_sel: select * from continuous_view_2 where bkt = 0 or bkt > 30 order by bkt;
bkt            maxl           

0              4              
40             1000           
