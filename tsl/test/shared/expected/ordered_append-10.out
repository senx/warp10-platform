-- This file and its contents are licensed under the Timescale License.
-- Please see the included NOTICE for copyright information and
-- LICENSE-TIMESCALE for a copy of the license.
SELECT
       format('include/%s_query.sql', :'TEST_BASE_NAME') as "TEST_QUERY_NAME",
       format('%s/shared/results/%s_results_uncompressed.out', :'TEST_OUTPUT_DIR', :'TEST_BASE_NAME') as "TEST_RESULTS_UNCOMPRESSED",
       format('%s/shared/results/%s_results_compressed.out', :'TEST_OUTPUT_DIR', :'TEST_BASE_NAME') as "TEST_RESULTS_COMPRESSED"
\gset
SELECT format('\! diff -u --label "Uncompressed results" --label "Compressed results" %s %s', :'TEST_RESULTS_UNCOMPRESSED', :'TEST_RESULTS_COMPRESSED') as "DIFF_CMD"
\gset
-- get EXPLAIN output for all variations
-- look at postgres version to decide whether we run with analyze or without
SELECT
  CASE WHEN current_setting('server_version_num')::int >= 100000
    THEN 'EXPLAIN (analyze, costs off, timing off, summary off)'
    ELSE 'EXPLAIN (costs off)'
  END AS "PREFIX",
  CASE WHEN current_setting('server_version_num')::int >= 100000
    THEN 'EXPLAIN (analyze, costs off, timing off, summary off, verbose)'
    ELSE 'EXPLAIN (costs off, verbose)'
  END AS "PREFIX_VERBOSE"
\gset
set work_mem to '64MB';
set max_parallel_workers_per_gather to 0;
\set TEST_TABLE 'metrics'
\ir :TEST_QUERY_NAME
-- test ASC for ordered chunks
:PREFIX SELECT
  time
FROM :TEST_TABLE
ORDER BY time ASC LIMIT 1;
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=1 loops=1)
   ->  Custom Scan (ChunkAppend) on metrics (actual rows=1 loops=1)
         Order: metrics."time"
         ->  Index Only Scan Backward using _hyper_1_1_chunk_metrics_time_idx on _hyper_1_1_chunk (actual rows=1 loops=1)
               Heap Fetches: 1
         ->  Index Only Scan Backward using _hyper_1_2_chunk_metrics_time_idx on _hyper_1_2_chunk (never executed)
               Heap Fetches: 0
         ->  Index Only Scan Backward using _hyper_1_3_chunk_metrics_time_idx on _hyper_1_3_chunk (never executed)
               Heap Fetches: 0
(9 rows)

-- test DESC for ordered chunks
:PREFIX SELECT
  time
FROM :TEST_TABLE
ORDER BY time DESC LIMIT 1;
                                                   QUERY PLAN                                                    
-----------------------------------------------------------------------------------------------------------------
 Limit (actual rows=1 loops=1)
   ->  Custom Scan (ChunkAppend) on metrics (actual rows=1 loops=1)
         Order: metrics."time" DESC
         ->  Index Only Scan using _hyper_1_3_chunk_metrics_time_idx on _hyper_1_3_chunk (actual rows=1 loops=1)
               Heap Fetches: 1
         ->  Index Only Scan using _hyper_1_2_chunk_metrics_time_idx on _hyper_1_2_chunk (never executed)
               Heap Fetches: 0
         ->  Index Only Scan using _hyper_1_1_chunk_metrics_time_idx on _hyper_1_1_chunk (never executed)
               Heap Fetches: 0
(9 rows)

-- test query with ORDER BY column not in targetlist
:PREFIX SELECT
  pg_typeof(device_id), pg_typeof(v2)
FROM :TEST_TABLE
ORDER BY time ASC LIMIT 1;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=1 loops=1)
   ->  Custom Scan (ChunkAppend) on metrics (actual rows=1 loops=1)
         Order: metrics."time"
         ->  Index Scan Backward using _hyper_1_1_chunk_metrics_time_idx on _hyper_1_1_chunk (actual rows=1 loops=1)
         ->  Index Scan Backward using _hyper_1_2_chunk_metrics_time_idx on _hyper_1_2_chunk (never executed)
         ->  Index Scan Backward using _hyper_1_3_chunk_metrics_time_idx on _hyper_1_3_chunk (never executed)
(6 rows)

-- ORDER BY may include other columns after time column
:PREFIX SELECT
  time, device_id, v0
FROM :TEST_TABLE
ORDER BY time DESC, device_id LIMIT 1;
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 Limit (actual rows=1 loops=1)
   ->  Sort (actual rows=1 loops=1)
         Sort Key: _hyper_1_3_chunk."time" DESC, _hyper_1_3_chunk.device_id
         Sort Method: top-N heapsort 
         ->  Append (actual rows=68370 loops=1)
               ->  Seq Scan on _hyper_1_3_chunk (actual rows=25190 loops=1)
               ->  Seq Scan on _hyper_1_2_chunk (actual rows=25190 loops=1)
               ->  Seq Scan on _hyper_1_1_chunk (actual rows=17990 loops=1)
(8 rows)

-- test RECORD in targetlist
:PREFIX SELECT
  (time, device_id, v0)
FROM :TEST_TABLE
ORDER BY time DESC, device_id LIMIT 1;
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 Limit (actual rows=1 loops=1)
   ->  Sort (actual rows=1 loops=1)
         Sort Key: _hyper_1_3_chunk."time" DESC, _hyper_1_3_chunk.device_id
         Sort Method: top-N heapsort 
         ->  Result (actual rows=68370 loops=1)
               ->  Append (actual rows=68370 loops=1)
                     ->  Seq Scan on _hyper_1_3_chunk (actual rows=25190 loops=1)
                     ->  Seq Scan on _hyper_1_2_chunk (actual rows=25190 loops=1)
                     ->  Seq Scan on _hyper_1_1_chunk (actual rows=17990 loops=1)
(9 rows)

-- test sort column not in targetlist
:PREFIX SELECT
  time_bucket('1h',time)
FROM :TEST_TABLE
ORDER BY time DESC LIMIT 1;
                                                   QUERY PLAN                                                    
-----------------------------------------------------------------------------------------------------------------
 Limit (actual rows=1 loops=1)
   ->  Custom Scan (ChunkAppend) on metrics (actual rows=1 loops=1)
         Order: metrics."time" DESC
         ->  Index Only Scan using _hyper_1_3_chunk_metrics_time_idx on _hyper_1_3_chunk (actual rows=1 loops=1)
               Heap Fetches: 1
         ->  Index Only Scan using _hyper_1_2_chunk_metrics_time_idx on _hyper_1_2_chunk (never executed)
               Heap Fetches: 0
         ->  Index Only Scan using _hyper_1_1_chunk_metrics_time_idx on _hyper_1_1_chunk (never executed)
               Heap Fetches: 0
(9 rows)

-- queries with ORDER BY non-time column shouldn't use ordered append
:PREFIX SELECT
  device_id
FROM :TEST_TABLE
ORDER BY device_id LIMIT 1;
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=1 loops=1)
   ->  Merge Append (actual rows=1 loops=1)
         Sort Key: _hyper_1_1_chunk.device_id
         ->  Index Only Scan using _hyper_1_1_chunk_metrics_device_id_time_idx on _hyper_1_1_chunk (actual rows=1 loops=1)
               Heap Fetches: 1
         ->  Index Only Scan using _hyper_1_2_chunk_metrics_device_id_time_idx on _hyper_1_2_chunk (actual rows=1 loops=1)
               Heap Fetches: 1
         ->  Index Only Scan using _hyper_1_3_chunk_metrics_device_id_time_idx on _hyper_1_3_chunk (actual rows=1 loops=1)
               Heap Fetches: 1
(9 rows)

-- time column must be primary sort order
:PREFIX SELECT
  time, device_id
FROM :TEST_TABLE
ORDER BY device_id, time LIMIT 1;
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 Limit (actual rows=1 loops=1)
   ->  Sort (actual rows=1 loops=1)
         Sort Key: _hyper_1_1_chunk.device_id, _hyper_1_1_chunk."time"
         Sort Method: top-N heapsort 
         ->  Append (actual rows=68370 loops=1)
               ->  Seq Scan on _hyper_1_1_chunk (actual rows=17990 loops=1)
               ->  Seq Scan on _hyper_1_2_chunk (actual rows=25190 loops=1)
               ->  Seq Scan on _hyper_1_3_chunk (actual rows=25190 loops=1)
(8 rows)

-- test equality constraint on ORDER BY prefix
-- currently not optimized
:PREFIX SELECT
  time, device_id
FROM :TEST_TABLE
WHERE device_id = 1
ORDER BY device_id, time LIMIT 10;
                                                             QUERY PLAN                                                              
-------------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=10 loops=1)
   ->  Merge Append (actual rows=10 loops=1)
         Sort Key: _hyper_1_1_chunk."time"
         ->  Index Only Scan Backward using _hyper_1_1_chunk_metrics_device_id_time_idx on _hyper_1_1_chunk (actual rows=10 loops=1)
               Index Cond: (device_id = 1)
               Heap Fetches: 10
         ->  Index Only Scan Backward using _hyper_1_2_chunk_metrics_device_id_time_idx on _hyper_1_2_chunk (actual rows=1 loops=1)
               Index Cond: (device_id = 1)
               Heap Fetches: 1
         ->  Index Only Scan Backward using _hyper_1_3_chunk_metrics_device_id_time_idx on _hyper_1_3_chunk (actual rows=1 loops=1)
               Index Cond: (device_id = 1)
               Heap Fetches: 1
(12 rows)

-- queries without LIMIT should use ordered append
:PREFIX SELECT
  time
FROM :TEST_TABLE
ORDER BY time ASC;
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on metrics (actual rows=68370 loops=1)
   Order: metrics."time"
   ->  Index Only Scan Backward using _hyper_1_1_chunk_metrics_time_idx on _hyper_1_1_chunk (actual rows=17990 loops=1)
         Heap Fetches: 17990
   ->  Index Only Scan Backward using _hyper_1_2_chunk_metrics_time_idx on _hyper_1_2_chunk (actual rows=25190 loops=1)
         Heap Fetches: 25190
   ->  Index Only Scan Backward using _hyper_1_3_chunk_metrics_time_idx on _hyper_1_3_chunk (actual rows=25190 loops=1)
         Heap Fetches: 25190
(8 rows)

-- queries without ORDER BY shouldnt use ordered append
:PREFIX SELECT
  pg_typeof(time)
FROM :TEST_TABLE
LIMIT 1;
                               QUERY PLAN                               
------------------------------------------------------------------------
 Limit (actual rows=1 loops=1)
   ->  Result (actual rows=1 loops=1)
         ->  Append (actual rows=1 loops=1)
               ->  Seq Scan on _hyper_1_1_chunk (actual rows=1 loops=1)
               ->  Seq Scan on _hyper_1_2_chunk (never executed)
               ->  Seq Scan on _hyper_1_3_chunk (never executed)
(6 rows)

-- test interaction with constraint exclusion
:PREFIX SELECT
  time
FROM :TEST_TABLE
WHERE time > '2000-01-07'
ORDER BY time ASC LIMIT 1;
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=1 loops=1)
   ->  Custom Scan (ChunkAppend) on metrics (actual rows=1 loops=1)
         Order: metrics."time"
         ->  Index Only Scan Backward using _hyper_1_2_chunk_metrics_time_idx on _hyper_1_2_chunk (actual rows=1 loops=1)
               Index Cond: ("time" > 'Fri Jan 07 00:00:00 2000 PST'::timestamp with time zone)
               Heap Fetches: 1
         ->  Index Only Scan Backward using _hyper_1_3_chunk_metrics_time_idx on _hyper_1_3_chunk (never executed)
               Index Cond: ("time" > 'Fri Jan 07 00:00:00 2000 PST'::timestamp with time zone)
               Heap Fetches: 0
(9 rows)

:PREFIX SELECT
  time
FROM :TEST_TABLE
WHERE time > '2000-01-07'
ORDER BY time DESC LIMIT 1;
                                                   QUERY PLAN                                                    
-----------------------------------------------------------------------------------------------------------------
 Limit (actual rows=1 loops=1)
   ->  Custom Scan (ChunkAppend) on metrics (actual rows=1 loops=1)
         Order: metrics."time" DESC
         ->  Index Only Scan using _hyper_1_3_chunk_metrics_time_idx on _hyper_1_3_chunk (actual rows=1 loops=1)
               Index Cond: ("time" > 'Fri Jan 07 00:00:00 2000 PST'::timestamp with time zone)
               Heap Fetches: 1
         ->  Index Only Scan using _hyper_1_2_chunk_metrics_time_idx on _hyper_1_2_chunk (never executed)
               Index Cond: ("time" > 'Fri Jan 07 00:00:00 2000 PST'::timestamp with time zone)
               Heap Fetches: 0
(9 rows)

-- test interaction with runtime exclusion
:PREFIX SELECT
  time
FROM :TEST_TABLE
WHERE time > '2000-01-08'::text::timestamptz
ORDER BY time ASC LIMIT 1;
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=1 loops=1)
   ->  Custom Scan (ChunkAppend) on metrics (actual rows=1 loops=1)
         Order: metrics."time"
         Chunks excluded during startup: 1
         ->  Index Only Scan Backward using _hyper_1_2_chunk_metrics_time_idx on _hyper_1_2_chunk (actual rows=1 loops=1)
               Index Cond: ("time" > ('2000-01-08'::cstring)::timestamp with time zone)
               Heap Fetches: 1
         ->  Index Only Scan Backward using _hyper_1_3_chunk_metrics_time_idx on _hyper_1_3_chunk (never executed)
               Index Cond: ("time" > ('2000-01-08'::cstring)::timestamp with time zone)
               Heap Fetches: 0
(10 rows)

:PREFIX SELECT
  time
FROM :TEST_TABLE
WHERE time < '2000-01-08'::text::timestamptz
ORDER BY time ASC LIMIT 1;
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=1 loops=1)
   ->  Custom Scan (ChunkAppend) on metrics (actual rows=1 loops=1)
         Order: metrics."time"
         Chunks excluded during startup: 1
         ->  Index Only Scan Backward using _hyper_1_1_chunk_metrics_time_idx on _hyper_1_1_chunk (actual rows=1 loops=1)
               Index Cond: ("time" < ('2000-01-08'::cstring)::timestamp with time zone)
               Heap Fetches: 1
         ->  Index Only Scan Backward using _hyper_1_2_chunk_metrics_time_idx on _hyper_1_2_chunk (never executed)
               Index Cond: ("time" < ('2000-01-08'::cstring)::timestamp with time zone)
               Heap Fetches: 0
(10 rows)

-- test constraint exclusion
:PREFIX SELECT
  time
FROM :TEST_TABLE
WHERE time > '2000-01-08'::text::timestamptz AND time < '2000-01-10'
ORDER BY time ASC LIMIT 1;
                                                                            QUERY PLAN                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=1 loops=1)
   ->  Custom Scan (ChunkAppend) on metrics (actual rows=1 loops=1)
         Order: metrics."time"
         Chunks excluded during startup: 1
         ->  Index Only Scan Backward using _hyper_1_2_chunk_metrics_time_idx on _hyper_1_2_chunk (actual rows=1 loops=1)
               Index Cond: (("time" > ('2000-01-08'::cstring)::timestamp with time zone) AND ("time" < 'Mon Jan 10 00:00:00 2000 PST'::timestamp with time zone))
               Heap Fetches: 1
(7 rows)

:PREFIX SELECT
  time
FROM :TEST_TABLE
WHERE time < '2000-01-08'::text::timestamptz AND time > '2000-01-07'
ORDER BY time ASC LIMIT 1;
                                                                            QUERY PLAN                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=1 loops=1)
   ->  Custom Scan (ChunkAppend) on metrics (actual rows=1 loops=1)
         Order: metrics."time"
         Chunks excluded during startup: 1
         ->  Index Only Scan Backward using _hyper_1_2_chunk_metrics_time_idx on _hyper_1_2_chunk (actual rows=1 loops=1)
               Index Cond: (("time" < ('2000-01-08'::cstring)::timestamp with time zone) AND ("time" > 'Fri Jan 07 00:00:00 2000 PST'::timestamp with time zone))
               Heap Fetches: 1
(7 rows)

-- min/max queries
:PREFIX SELECT max(time) FROM :TEST_TABLE;
                                                       QUERY PLAN                                                        
-------------------------------------------------------------------------------------------------------------------------
 Result (actual rows=1 loops=1)
   InitPlan 1 (returns $0)
     ->  Limit (actual rows=1 loops=1)
           ->  Custom Scan (ChunkAppend) on metrics (actual rows=1 loops=1)
                 Order: metrics."time" DESC
                 ->  Index Only Scan using _hyper_1_3_chunk_metrics_time_idx on _hyper_1_3_chunk (actual rows=1 loops=1)
                       Index Cond: ("time" IS NOT NULL)
                       Heap Fetches: 1
                 ->  Index Only Scan using _hyper_1_2_chunk_metrics_time_idx on _hyper_1_2_chunk (never executed)
                       Index Cond: ("time" IS NOT NULL)
                       Heap Fetches: 0
                 ->  Index Only Scan using _hyper_1_1_chunk_metrics_time_idx on _hyper_1_1_chunk (never executed)
                       Index Cond: ("time" IS NOT NULL)
                       Heap Fetches: 0
(14 rows)

:PREFIX SELECT min(time) FROM :TEST_TABLE;
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Result (actual rows=1 loops=1)
   InitPlan 1 (returns $0)
     ->  Limit (actual rows=1 loops=1)
           ->  Custom Scan (ChunkAppend) on metrics (actual rows=1 loops=1)
                 Order: metrics."time"
                 ->  Index Only Scan Backward using _hyper_1_1_chunk_metrics_time_idx on _hyper_1_1_chunk (actual rows=1 loops=1)
                       Index Cond: ("time" IS NOT NULL)
                       Heap Fetches: 1
                 ->  Index Only Scan Backward using _hyper_1_2_chunk_metrics_time_idx on _hyper_1_2_chunk (never executed)
                       Index Cond: ("time" IS NOT NULL)
                       Heap Fetches: 0
                 ->  Index Only Scan Backward using _hyper_1_3_chunk_metrics_time_idx on _hyper_1_3_chunk (never executed)
                       Index Cond: ("time" IS NOT NULL)
                       Heap Fetches: 0
(14 rows)

-- test first/last (doesn't use ordered append yet)
:PREFIX SELECT first(time, time) FROM :TEST_TABLE;
                                                               QUERY PLAN                                                               
----------------------------------------------------------------------------------------------------------------------------------------
 Result (actual rows=1 loops=1)
   InitPlan 1 (returns $0)
     ->  Limit (actual rows=1 loops=1)
           ->  Result (actual rows=1 loops=1)
                 ->  Merge Append (actual rows=1 loops=1)
                       Sort Key: _hyper_1_1_chunk."time"
                       ->  Index Only Scan Backward using _hyper_1_1_chunk_metrics_time_idx on _hyper_1_1_chunk (actual rows=1 loops=1)
                             Index Cond: ("time" IS NOT NULL)
                             Heap Fetches: 1
                       ->  Index Only Scan Backward using _hyper_1_2_chunk_metrics_time_idx on _hyper_1_2_chunk (actual rows=1 loops=1)
                             Index Cond: ("time" IS NOT NULL)
                             Heap Fetches: 1
                       ->  Index Only Scan Backward using _hyper_1_3_chunk_metrics_time_idx on _hyper_1_3_chunk (actual rows=1 loops=1)
                             Index Cond: ("time" IS NOT NULL)
                             Heap Fetches: 1
(15 rows)

:PREFIX SELECT last(time, time) FROM :TEST_TABLE;
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Result (actual rows=1 loops=1)
   InitPlan 1 (returns $0)
     ->  Limit (actual rows=1 loops=1)
           ->  Result (actual rows=1 loops=1)
                 ->  Merge Append (actual rows=1 loops=1)
                       Sort Key: _hyper_1_1_chunk."time" DESC
                       ->  Index Only Scan using _hyper_1_1_chunk_metrics_time_idx on _hyper_1_1_chunk (actual rows=1 loops=1)
                             Index Cond: ("time" IS NOT NULL)
                             Heap Fetches: 1
                       ->  Index Only Scan using _hyper_1_2_chunk_metrics_time_idx on _hyper_1_2_chunk (actual rows=1 loops=1)
                             Index Cond: ("time" IS NOT NULL)
                             Heap Fetches: 1
                       ->  Index Only Scan using _hyper_1_3_chunk_metrics_time_idx on _hyper_1_3_chunk (actual rows=1 loops=1)
                             Index Cond: ("time" IS NOT NULL)
                             Heap Fetches: 1
(15 rows)

-- test query with time_bucket
:PREFIX SELECT
  time_bucket('1d',time)
FROM :TEST_TABLE
ORDER BY time ASC LIMIT 1;
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=1 loops=1)
   ->  Custom Scan (ChunkAppend) on metrics (actual rows=1 loops=1)
         Order: metrics."time"
         ->  Index Only Scan Backward using _hyper_1_1_chunk_metrics_time_idx on _hyper_1_1_chunk (actual rows=1 loops=1)
               Heap Fetches: 1
         ->  Index Only Scan Backward using _hyper_1_2_chunk_metrics_time_idx on _hyper_1_2_chunk (never executed)
               Heap Fetches: 0
         ->  Index Only Scan Backward using _hyper_1_3_chunk_metrics_time_idx on _hyper_1_3_chunk (never executed)
               Heap Fetches: 0
(9 rows)

-- test query with ORDER BY time_bucket
:PREFIX SELECT
  time_bucket('1d',time)
FROM :TEST_TABLE
ORDER BY 1 LIMIT 1;
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=1 loops=1)
   ->  Custom Scan (ChunkAppend) on metrics (actual rows=1 loops=1)
         Order: time_bucket('@ 1 day'::interval, metrics."time")
         ->  Index Only Scan Backward using _hyper_1_1_chunk_metrics_time_idx on _hyper_1_1_chunk (actual rows=1 loops=1)
               Heap Fetches: 1
         ->  Index Only Scan Backward using _hyper_1_2_chunk_metrics_time_idx on _hyper_1_2_chunk (never executed)
               Heap Fetches: 0
         ->  Index Only Scan Backward using _hyper_1_3_chunk_metrics_time_idx on _hyper_1_3_chunk (never executed)
               Heap Fetches: 0
(9 rows)

-- test query with ORDER BY time_bucket, device_id
-- must not use ordered append
:PREFIX SELECT
  time_bucket('1d',time), device_id, v0
FROM :TEST_TABLE
ORDER BY time_bucket('1d',time), device_id LIMIT 1;
                                                QUERY PLAN                                                 
-----------------------------------------------------------------------------------------------------------
 Limit (actual rows=1 loops=1)
   ->  Sort (actual rows=1 loops=1)
         Sort Key: (time_bucket('@ 1 day'::interval, _hyper_1_1_chunk."time")), _hyper_1_1_chunk.device_id
         Sort Method: top-N heapsort 
         ->  Result (actual rows=68370 loops=1)
               ->  Append (actual rows=68370 loops=1)
                     ->  Seq Scan on _hyper_1_1_chunk (actual rows=17990 loops=1)
                     ->  Seq Scan on _hyper_1_2_chunk (actual rows=25190 loops=1)
                     ->  Seq Scan on _hyper_1_3_chunk (actual rows=25190 loops=1)
(9 rows)

-- test query with ORDER BY date_trunc
:PREFIX SELECT
  time_bucket('1d',time)
FROM :TEST_TABLE
ORDER BY date_trunc('day', time) LIMIT 1;
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=1 loops=1)
   ->  Custom Scan (ChunkAppend) on metrics (actual rows=1 loops=1)
         Order: date_trunc('day'::text, metrics."time")
         ->  Index Only Scan Backward using _hyper_1_1_chunk_metrics_time_idx on _hyper_1_1_chunk (actual rows=1 loops=1)
               Heap Fetches: 1
         ->  Index Only Scan Backward using _hyper_1_2_chunk_metrics_time_idx on _hyper_1_2_chunk (never executed)
               Heap Fetches: 0
         ->  Index Only Scan Backward using _hyper_1_3_chunk_metrics_time_idx on _hyper_1_3_chunk (never executed)
               Heap Fetches: 0
(9 rows)

-- test query with ORDER BY date_trunc
:PREFIX SELECT
  date_trunc('day',time), device_id, v0
FROM :TEST_TABLE
ORDER BY 1 LIMIT 1;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=1 loops=1)
   ->  Custom Scan (ChunkAppend) on metrics (actual rows=1 loops=1)
         Order: date_trunc('day'::text, metrics."time")
         ->  Index Scan Backward using _hyper_1_1_chunk_metrics_time_idx on _hyper_1_1_chunk (actual rows=1 loops=1)
         ->  Index Scan Backward using _hyper_1_2_chunk_metrics_time_idx on _hyper_1_2_chunk (never executed)
         ->  Index Scan Backward using _hyper_1_3_chunk_metrics_time_idx on _hyper_1_3_chunk (never executed)
(6 rows)

-- test query with ORDER BY date_trunc, device_id
-- must not use ordered append
:PREFIX SELECT
  date_trunc('day',time), device_id, v0
FROM :TEST_TABLE
ORDER BY 1,2 LIMIT 1;
                                            QUERY PLAN                                            
--------------------------------------------------------------------------------------------------
 Limit (actual rows=1 loops=1)
   ->  Sort (actual rows=1 loops=1)
         Sort Key: (date_trunc('day'::text, _hyper_1_1_chunk."time")), _hyper_1_1_chunk.device_id
         Sort Method: top-N heapsort 
         ->  Result (actual rows=68370 loops=1)
               ->  Append (actual rows=68370 loops=1)
                     ->  Seq Scan on _hyper_1_1_chunk (actual rows=17990 loops=1)
                     ->  Seq Scan on _hyper_1_2_chunk (actual rows=25190 loops=1)
                     ->  Seq Scan on _hyper_1_3_chunk (actual rows=25190 loops=1)
(9 rows)

-- test query with now() should result in ordered ChunkAppend
:PREFIX SELECT time FROM :TEST_TABLE WHERE time < now() + '1 month'
ORDER BY time DESC limit 1;
                                                   QUERY PLAN                                                    
-----------------------------------------------------------------------------------------------------------------
 Limit (actual rows=1 loops=1)
   ->  Custom Scan (ChunkAppend) on metrics (actual rows=1 loops=1)
         Order: metrics."time" DESC
         Chunks excluded during startup: 0
         ->  Index Only Scan using _hyper_1_3_chunk_metrics_time_idx on _hyper_1_3_chunk (actual rows=1 loops=1)
               Index Cond: ("time" < (now() + '@ 1 mon'::interval))
               Heap Fetches: 1
         ->  Index Only Scan using _hyper_1_2_chunk_metrics_time_idx on _hyper_1_2_chunk (never executed)
               Index Cond: ("time" < (now() + '@ 1 mon'::interval))
               Heap Fetches: 0
         ->  Index Only Scan using _hyper_1_1_chunk_metrics_time_idx on _hyper_1_1_chunk (never executed)
               Index Cond: ("time" < (now() + '@ 1 mon'::interval))
               Heap Fetches: 0
(13 rows)

-- test CTE
:PREFIX WITH i AS (SELECT time FROM :TEST_TABLE WHERE time < now() ORDER BY time DESC limit 100)
SELECT * FROM i;
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 CTE Scan on i (actual rows=100 loops=1)
   CTE i
     ->  Limit (actual rows=100 loops=1)
           ->  Custom Scan (ChunkAppend) on metrics (actual rows=100 loops=1)
                 Order: metrics."time" DESC
                 Chunks excluded during startup: 0
                 ->  Index Only Scan using _hyper_1_3_chunk_metrics_time_idx on _hyper_1_3_chunk (actual rows=100 loops=1)
                       Index Cond: ("time" < now())
                       Heap Fetches: 100
                 ->  Index Only Scan using _hyper_1_2_chunk_metrics_time_idx on _hyper_1_2_chunk (never executed)
                       Index Cond: ("time" < now())
                       Heap Fetches: 0
                 ->  Index Only Scan using _hyper_1_1_chunk_metrics_time_idx on _hyper_1_1_chunk (never executed)
                       Index Cond: ("time" < now())
                       Heap Fetches: 0
(15 rows)

-- test LATERAL with ordered append in the outer query
:PREFIX SELECT time, pg_typeof(l) FROM :TEST_TABLE, LATERAL(SELECT * FROM (VALUES (1),(2)) v) l ORDER BY time DESC limit 2;
                                                      QUERY PLAN                                                       
-----------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=2 loops=1)
   ->  Nested Loop (actual rows=2 loops=1)
         ->  Custom Scan (ChunkAppend) on metrics (actual rows=1 loops=1)
               Order: metrics."time" DESC
               ->  Index Only Scan using _hyper_1_3_chunk_metrics_time_idx on _hyper_1_3_chunk (actual rows=1 loops=1)
                     Heap Fetches: 1
               ->  Index Only Scan using _hyper_1_2_chunk_metrics_time_idx on _hyper_1_2_chunk (never executed)
                     Heap Fetches: 0
               ->  Index Only Scan using _hyper_1_1_chunk_metrics_time_idx on _hyper_1_1_chunk (never executed)
                     Heap Fetches: 0
         ->  Materialize (actual rows=2 loops=1)
               ->  Values Scan on "*VALUES*" (actual rows=2 loops=1)
(12 rows)

-- test LATERAL with ordered append in the lateral query
:PREFIX SELECT time, pg_typeof(v) FROM (VALUES (1),(2)) v, LATERAL(SELECT * FROM :TEST_TABLE ORDER BY time DESC limit 2) l;
                                                            QUERY PLAN                                                             
-----------------------------------------------------------------------------------------------------------------------------------
 Nested Loop (actual rows=4 loops=1)
   ->  Values Scan on "*VALUES*" (actual rows=2 loops=1)
   ->  Materialize (actual rows=2 loops=2)
         ->  Subquery Scan on l (actual rows=2 loops=1)
               ->  Limit (actual rows=2 loops=1)
                     ->  Custom Scan (ChunkAppend) on metrics (actual rows=2 loops=1)
                           Order: metrics."time" DESC
                           ->  Index Only Scan using _hyper_1_3_chunk_metrics_time_idx on _hyper_1_3_chunk (actual rows=2 loops=1)
                                 Heap Fetches: 2
                           ->  Index Only Scan using _hyper_1_2_chunk_metrics_time_idx on _hyper_1_2_chunk (never executed)
                                 Heap Fetches: 0
                           ->  Index Only Scan using _hyper_1_1_chunk_metrics_time_idx on _hyper_1_1_chunk (never executed)
                                 Heap Fetches: 0
(13 rows)

-- test plan with best index is chosen
-- this should use device_id, time index
:PREFIX SELECT time, device_id FROM :TEST_TABLE WHERE device_id = 1 ORDER BY time DESC LIMIT 1;
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=1 loops=1)
   ->  Custom Scan (ChunkAppend) on metrics (actual rows=1 loops=1)
         Order: metrics."time" DESC
         ->  Index Only Scan using _hyper_1_3_chunk_metrics_device_id_time_idx on _hyper_1_3_chunk (actual rows=1 loops=1)
               Index Cond: (device_id = 1)
               Heap Fetches: 1
         ->  Index Only Scan using _hyper_1_2_chunk_metrics_device_id_time_idx on _hyper_1_2_chunk (never executed)
               Index Cond: (device_id = 1)
               Heap Fetches: 0
         ->  Index Only Scan using _hyper_1_1_chunk_metrics_device_id_time_idx on _hyper_1_1_chunk (never executed)
               Index Cond: (device_id = 1)
               Heap Fetches: 0
(12 rows)

-- test plan with best index is chosen
-- this should use time index
:PREFIX SELECT time FROM :TEST_TABLE ORDER BY time DESC LIMIT 1;
                                                   QUERY PLAN                                                    
-----------------------------------------------------------------------------------------------------------------
 Limit (actual rows=1 loops=1)
   ->  Custom Scan (ChunkAppend) on metrics (actual rows=1 loops=1)
         Order: metrics."time" DESC
         ->  Index Only Scan using _hyper_1_3_chunk_metrics_time_idx on _hyper_1_3_chunk (actual rows=1 loops=1)
               Heap Fetches: 1
         ->  Index Only Scan using _hyper_1_2_chunk_metrics_time_idx on _hyper_1_2_chunk (never executed)
               Heap Fetches: 0
         ->  Index Only Scan using _hyper_1_1_chunk_metrics_time_idx on _hyper_1_1_chunk (never executed)
               Heap Fetches: 0
(9 rows)

-- test LATERAL with correlated query
-- only last chunk should be executed
:PREFIX SELECT g.time, l.time
FROM generate_series('2000-01-01'::timestamptz,'2000-01-03','1d') AS g(time)
LEFT OUTER JOIN LATERAL(
  SELECT * FROM :TEST_TABLE o
    WHERE o.time >= g.time AND o.time < g.time + '1d'::interval ORDER BY time DESC LIMIT 1
) l ON true;
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Nested Loop Left Join (actual rows=3 loops=1)
   ->  Function Scan on generate_series g (actual rows=3 loops=1)
   ->  Limit (actual rows=1 loops=3)
         ->  Custom Scan (ChunkAppend) on metrics o (actual rows=1 loops=3)
               Order: o."time" DESC
               Chunks excluded during startup: 0
               Chunks excluded during runtime: 2
               ->  Index Only Scan using _hyper_1_3_chunk_metrics_time_idx on _hyper_1_3_chunk o_1 (never executed)
                     Index Cond: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)))
                     Heap Fetches: 0
               ->  Index Only Scan using _hyper_1_2_chunk_metrics_time_idx on _hyper_1_2_chunk o_2 (never executed)
                     Index Cond: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)))
                     Heap Fetches: 0
               ->  Index Only Scan using _hyper_1_1_chunk_metrics_time_idx on _hyper_1_1_chunk o_3 (actual rows=1 loops=3)
                     Index Cond: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)))
                     Heap Fetches: 3
(16 rows)

-- test LATERAL with correlated query
-- only 2nd chunk should be executed
:PREFIX SELECT g.time, l.time
FROM generate_series('2000-01-10'::timestamptz,'2000-01-11','1d') AS g(time)
LEFT OUTER JOIN LATERAL(
  SELECT * FROM :TEST_TABLE o
    WHERE o.time >= g.time AND o.time < g.time + '1d'::interval ORDER BY time LIMIT 1
) l ON true;
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Nested Loop Left Join (actual rows=2 loops=1)
   ->  Function Scan on generate_series g (actual rows=2 loops=1)
   ->  Limit (actual rows=1 loops=2)
         ->  Custom Scan (ChunkAppend) on metrics o (actual rows=1 loops=2)
               Order: o."time"
               Chunks excluded during startup: 0
               Chunks excluded during runtime: 2
               ->  Index Only Scan Backward using _hyper_1_1_chunk_metrics_time_idx on _hyper_1_1_chunk o_1 (never executed)
                     Index Cond: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)))
                     Heap Fetches: 0
               ->  Index Only Scan Backward using _hyper_1_2_chunk_metrics_time_idx on _hyper_1_2_chunk o_2 (actual rows=1 loops=2)
                     Index Cond: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)))
                     Heap Fetches: 2
               ->  Index Only Scan Backward using _hyper_1_3_chunk_metrics_time_idx on _hyper_1_3_chunk o_3 (never executed)
                     Index Cond: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)))
                     Heap Fetches: 0
(16 rows)

-- test startup and runtime exclusion together
:PREFIX SELECT g.time, l.time
FROM generate_series('2000-01-01'::timestamptz,'2000-01-03','1d') AS g(time)
LEFT OUTER JOIN LATERAL(
  SELECT * FROM :TEST_TABLE o
    WHERE o.time >= g.time AND o.time < g.time + '1d'::interval AND o.time < now() ORDER BY time DESC LIMIT 1
) l ON true;
                                                         QUERY PLAN                                                          
-----------------------------------------------------------------------------------------------------------------------------
 Nested Loop Left Join (actual rows=3 loops=1)
   ->  Function Scan on generate_series g (actual rows=3 loops=1)
   ->  Limit (actual rows=1 loops=3)
         ->  Custom Scan (ChunkAppend) on metrics o (actual rows=1 loops=3)
               Order: o."time" DESC
               Chunks excluded during startup: 0
               Chunks excluded during runtime: 2
               ->  Index Only Scan using _hyper_1_3_chunk_metrics_time_idx on _hyper_1_3_chunk o_1 (never executed)
                     Index Cond: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)) AND ("time" < now()))
                     Heap Fetches: 0
               ->  Index Only Scan using _hyper_1_2_chunk_metrics_time_idx on _hyper_1_2_chunk o_2 (never executed)
                     Index Cond: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)) AND ("time" < now()))
                     Heap Fetches: 0
               ->  Index Only Scan using _hyper_1_1_chunk_metrics_time_idx on _hyper_1_1_chunk o_3 (actual rows=1 loops=3)
                     Index Cond: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)) AND ("time" < now()))
                     Heap Fetches: 3
(16 rows)

-- test startup and runtime exclusion together
-- all chunks should be filtered
:PREFIX SELECT g.time, l.time
FROM generate_series('2000-01-01'::timestamptz,'2000-01-03','1d') AS g(time)
LEFT OUTER JOIN LATERAL(
  SELECT * FROM :TEST_TABLE o
    WHERE o.time >= g.time AND o.time < g.time + '1d'::interval AND o.time > now() ORDER BY time DESC LIMIT 1
) l ON true;
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 Nested Loop Left Join (actual rows=3 loops=1)
   ->  Function Scan on generate_series g (actual rows=3 loops=1)
   ->  Limit (actual rows=0 loops=3)
         ->  Custom Scan (ChunkAppend) on metrics o (actual rows=0 loops=3)
               Order: o."time" DESC
               Chunks excluded during startup: 3
(6 rows)

-- test CTE
-- no chunk exclusion for CTE because cte query is not pulled up
:PREFIX WITH cte AS (SELECT time FROM :TEST_TABLE ORDER BY time)
SELECT * FROM cte WHERE time < '2000-02-01'::timestamptz;
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 CTE Scan on cte (actual rows=68370 loops=1)
   Filter: ("time" < 'Tue Feb 01 00:00:00 2000 PST'::timestamp with time zone)
   CTE cte
     ->  Custom Scan (ChunkAppend) on metrics (actual rows=68370 loops=1)
           Order: metrics."time"
           ->  Index Only Scan Backward using _hyper_1_1_chunk_metrics_time_idx on _hyper_1_1_chunk (actual rows=17990 loops=1)
                 Heap Fetches: 17990
           ->  Index Only Scan Backward using _hyper_1_2_chunk_metrics_time_idx on _hyper_1_2_chunk (actual rows=25190 loops=1)
                 Heap Fetches: 25190
           ->  Index Only Scan Backward using _hyper_1_3_chunk_metrics_time_idx on _hyper_1_3_chunk (actual rows=25190 loops=1)
                 Heap Fetches: 25190
(11 rows)

-- test JOIN
-- no exclusion on joined table because quals are not propagated yet
:PREFIX SELECT o1.time, o2.time
FROM :TEST_TABLE o1
INNER JOIN :TEST_TABLE o2 ON o1.time = o2.time
WHERE o1.time < '2000-02-01'
ORDER BY o1.time;
                                                               QUERY PLAN                                                                
-----------------------------------------------------------------------------------------------------------------------------------------
 Merge Join (actual rows=341850 loops=1)
   Merge Cond: (o1."time" = o2."time")
   ->  Custom Scan (ChunkAppend) on metrics o1 (actual rows=68370 loops=1)
         Order: o1."time"
         ->  Index Only Scan Backward using _hyper_1_1_chunk_metrics_time_idx on _hyper_1_1_chunk o1_1 (actual rows=17990 loops=1)
               Index Cond: ("time" < 'Tue Feb 01 00:00:00 2000 PST'::timestamp with time zone)
               Heap Fetches: 17990
         ->  Index Only Scan Backward using _hyper_1_2_chunk_metrics_time_idx on _hyper_1_2_chunk o1_2 (actual rows=25190 loops=1)
               Index Cond: ("time" < 'Tue Feb 01 00:00:00 2000 PST'::timestamp with time zone)
               Heap Fetches: 25190
         ->  Index Only Scan Backward using _hyper_1_3_chunk_metrics_time_idx on _hyper_1_3_chunk o1_3 (actual rows=25190 loops=1)
               Index Cond: ("time" < 'Tue Feb 01 00:00:00 2000 PST'::timestamp with time zone)
               Heap Fetches: 25190
   ->  Materialize (actual rows=341846 loops=1)
         ->  Custom Scan (ChunkAppend) on metrics o2 (actual rows=68370 loops=1)
               Order: o2."time"
               ->  Index Only Scan Backward using _hyper_1_1_chunk_metrics_time_idx on _hyper_1_1_chunk o2_1 (actual rows=17990 loops=1)
                     Index Cond: ("time" < 'Tue Feb 01 00:00:00 2000 PST'::timestamp with time zone)
                     Heap Fetches: 17990
               ->  Index Only Scan Backward using _hyper_1_2_chunk_metrics_time_idx on _hyper_1_2_chunk o2_2 (actual rows=25190 loops=1)
                     Index Cond: ("time" < 'Tue Feb 01 00:00:00 2000 PST'::timestamp with time zone)
                     Heap Fetches: 25190
               ->  Index Only Scan Backward using _hyper_1_3_chunk_metrics_time_idx on _hyper_1_3_chunk o2_3 (actual rows=25190 loops=1)
                     Index Cond: ("time" < 'Tue Feb 01 00:00:00 2000 PST'::timestamp with time zone)
                     Heap Fetches: 25190
(25 rows)

-- test JOIN
-- last chunk of o2 should not be executed
:PREFIX SELECT o1.time, o2.time
FROM :TEST_TABLE o1
INNER JOIN (SELECT * FROM :TEST_TABLE o2 ORDER BY time) o2 ON o1.time = o2.time
WHERE o1.time < '2000-01-08'
ORDER BY o1.time LIMIT 10;
                                                                QUERY PLAN                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=10 loops=1)
   ->  Merge Join (actual rows=10 loops=1)
         Merge Cond: (o1."time" = o2."time")
         ->  Custom Scan (ChunkAppend) on metrics o1 (actual rows=2 loops=1)
               Order: o1."time"
               ->  Index Only Scan Backward using _hyper_1_1_chunk_metrics_time_idx on _hyper_1_1_chunk o1_1 (actual rows=2 loops=1)
                     Index Cond: ("time" < 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
                     Heap Fetches: 2
               ->  Index Only Scan Backward using _hyper_1_2_chunk_metrics_time_idx on _hyper_1_2_chunk o1_2 (never executed)
                     Index Cond: ("time" < 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
                     Heap Fetches: 0
         ->  Materialize (actual rows=10 loops=1)
               ->  Custom Scan (ChunkAppend) on metrics o2 (actual rows=6 loops=1)
                     Order: o2."time"
                     ->  Index Only Scan Backward using _hyper_1_1_chunk_metrics_time_idx on _hyper_1_1_chunk o2_1 (actual rows=6 loops=1)
                           Heap Fetches: 6
                     ->  Index Only Scan Backward using _hyper_1_2_chunk_metrics_time_idx on _hyper_1_2_chunk o2_2 (never executed)
                           Heap Fetches: 0
                     ->  Index Only Scan Backward using _hyper_1_3_chunk_metrics_time_idx on _hyper_1_3_chunk o2_3 (never executed)
                           Heap Fetches: 0
(20 rows)

-- test subquery
-- not ChunkAppend so no chunk exclusion
:PREFIX SELECT time
FROM :TEST_TABLE WHERE time = (SELECT max(time) FROM :TEST_TABLE) ORDER BY time;
                                                                     QUERY PLAN                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on metrics (actual rows=5 loops=1)
   Chunks excluded during runtime: 2
   InitPlan 2 (returns $1)
     ->  Result (actual rows=1 loops=1)
           InitPlan 1 (returns $0)
             ->  Limit (actual rows=1 loops=1)
                   ->  Custom Scan (ChunkAppend) on metrics metrics_1 (actual rows=1 loops=1)
                         Order: metrics_1."time" DESC
                         ->  Index Only Scan using _hyper_1_3_chunk_metrics_time_idx on _hyper_1_3_chunk _hyper_1_3_chunk_1 (actual rows=1 loops=1)
                               Index Cond: ("time" IS NOT NULL)
                               Heap Fetches: 1
                         ->  Index Only Scan using _hyper_1_2_chunk_metrics_time_idx on _hyper_1_2_chunk _hyper_1_2_chunk_1 (never executed)
                               Index Cond: ("time" IS NOT NULL)
                               Heap Fetches: 0
                         ->  Index Only Scan using _hyper_1_1_chunk_metrics_time_idx on _hyper_1_1_chunk _hyper_1_1_chunk_1 (never executed)
                               Index Cond: ("time" IS NOT NULL)
                               Heap Fetches: 0
   ->  Index Only Scan using _hyper_1_1_chunk_metrics_time_idx on _hyper_1_1_chunk (never executed)
         Index Cond: ("time" = $1)
         Heap Fetches: 0
   ->  Index Only Scan using _hyper_1_2_chunk_metrics_time_idx on _hyper_1_2_chunk (never executed)
         Index Cond: ("time" = $1)
         Heap Fetches: 0
   ->  Index Only Scan using _hyper_1_3_chunk_metrics_time_idx on _hyper_1_3_chunk (actual rows=5 loops=1)
         Index Cond: ("time" = $1)
         Heap Fetches: 5
(26 rows)

-- test join against max query
-- not ChunkAppend so no chunk exclusion
SET enable_hashjoin = false;
:PREFIX SELECT o1.time, o2.*
FROM :TEST_TABLE o1 INNER JOIN (SELECT max(time) AS max_time FROM :TEST_TABLE) o2 ON o1.time = o2.max_time ORDER BY time;
                                                             QUERY PLAN                                                              
-------------------------------------------------------------------------------------------------------------------------------------
 Sort (actual rows=5 loops=1)
   Sort Key: o1."time"
   Sort Method: quicksort 
   ->  Nested Loop (actual rows=5 loops=1)
         ->  Result (actual rows=1 loops=1)
               InitPlan 1 (returns $0)
                 ->  Limit (actual rows=1 loops=1)
                       ->  Custom Scan (ChunkAppend) on metrics (actual rows=1 loops=1)
                             Order: metrics."time" DESC
                             ->  Index Only Scan using _hyper_1_3_chunk_metrics_time_idx on _hyper_1_3_chunk (actual rows=1 loops=1)
                                   Index Cond: ("time" IS NOT NULL)
                                   Heap Fetches: 1
                             ->  Index Only Scan using _hyper_1_2_chunk_metrics_time_idx on _hyper_1_2_chunk (never executed)
                                   Index Cond: ("time" IS NOT NULL)
                                   Heap Fetches: 0
                             ->  Index Only Scan using _hyper_1_1_chunk_metrics_time_idx on _hyper_1_1_chunk (never executed)
                                   Index Cond: ("time" IS NOT NULL)
                                   Heap Fetches: 0
         ->  Append (actual rows=5 loops=1)
               ->  Index Only Scan using _hyper_1_1_chunk_metrics_time_idx on _hyper_1_1_chunk o1 (actual rows=0 loops=1)
                     Index Cond: ("time" = ($0))
                     Heap Fetches: 0
               ->  Index Only Scan using _hyper_1_2_chunk_metrics_time_idx on _hyper_1_2_chunk o1_1 (actual rows=0 loops=1)
                     Index Cond: ("time" = ($0))
                     Heap Fetches: 0
               ->  Index Only Scan using _hyper_1_3_chunk_metrics_time_idx on _hyper_1_3_chunk o1_2 (actual rows=5 loops=1)
                     Index Cond: ("time" = ($0))
                     Heap Fetches: 5
(28 rows)

RESET enable_hashjoin;
-- test ordered append with limit expression
:PREFIX SELECT time
FROM :TEST_TABLE ORDER BY time LIMIT (SELECT length('four'));
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=4 loops=1)
   InitPlan 1 (returns $0)
     ->  Result (actual rows=1 loops=1)
   ->  Custom Scan (ChunkAppend) on metrics (actual rows=4 loops=1)
         Order: metrics."time"
         ->  Index Only Scan Backward using _hyper_1_1_chunk_metrics_time_idx on _hyper_1_1_chunk (actual rows=4 loops=1)
               Heap Fetches: 4
         ->  Index Only Scan Backward using _hyper_1_2_chunk_metrics_time_idx on _hyper_1_2_chunk (never executed)
               Heap Fetches: 0
         ->  Index Only Scan Backward using _hyper_1_3_chunk_metrics_time_idx on _hyper_1_3_chunk (never executed)
               Heap Fetches: 0
(11 rows)

-- test with ordered guc disabled
SET timescaledb.enable_ordered_append TO off;
:PREFIX SELECT time
FROM :TEST_TABLE ORDER BY time LIMIT 3;
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=3 loops=1)
   ->  Merge Append (actual rows=3 loops=1)
         Sort Key: _hyper_1_1_chunk."time"
         ->  Index Only Scan Backward using _hyper_1_1_chunk_metrics_time_idx on _hyper_1_1_chunk (actual rows=3 loops=1)
               Heap Fetches: 3
         ->  Index Only Scan Backward using _hyper_1_2_chunk_metrics_time_idx on _hyper_1_2_chunk (actual rows=1 loops=1)
               Heap Fetches: 1
         ->  Index Only Scan Backward using _hyper_1_3_chunk_metrics_time_idx on _hyper_1_3_chunk (actual rows=1 loops=1)
               Heap Fetches: 1
(9 rows)

RESET timescaledb.enable_ordered_append;
:PREFIX SELECT time
FROM :TEST_TABLE ORDER BY time LIMIT 3;
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=3 loops=1)
   ->  Custom Scan (ChunkAppend) on metrics (actual rows=3 loops=1)
         Order: metrics."time"
         ->  Index Only Scan Backward using _hyper_1_1_chunk_metrics_time_idx on _hyper_1_1_chunk (actual rows=3 loops=1)
               Heap Fetches: 3
         ->  Index Only Scan Backward using _hyper_1_2_chunk_metrics_time_idx on _hyper_1_2_chunk (never executed)
               Heap Fetches: 0
         ->  Index Only Scan Backward using _hyper_1_3_chunk_metrics_time_idx on _hyper_1_3_chunk (never executed)
               Heap Fetches: 0
(9 rows)

-- test with chunk append disabled
SET timescaledb.enable_chunk_append TO off;
:PREFIX SELECT time
FROM :TEST_TABLE ORDER BY time LIMIT 3;
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=3 loops=1)
   ->  Merge Append (actual rows=3 loops=1)
         Sort Key: _hyper_1_1_chunk."time"
         ->  Index Only Scan Backward using _hyper_1_1_chunk_metrics_time_idx on _hyper_1_1_chunk (actual rows=3 loops=1)
               Heap Fetches: 3
         ->  Index Only Scan Backward using _hyper_1_2_chunk_metrics_time_idx on _hyper_1_2_chunk (actual rows=1 loops=1)
               Heap Fetches: 1
         ->  Index Only Scan Backward using _hyper_1_3_chunk_metrics_time_idx on _hyper_1_3_chunk (actual rows=1 loops=1)
               Heap Fetches: 1
(9 rows)

RESET timescaledb.enable_chunk_append;
:PREFIX SELECT time
FROM :TEST_TABLE ORDER BY time LIMIT 3;
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=3 loops=1)
   ->  Custom Scan (ChunkAppend) on metrics (actual rows=3 loops=1)
         Order: metrics."time"
         ->  Index Only Scan Backward using _hyper_1_1_chunk_metrics_time_idx on _hyper_1_1_chunk (actual rows=3 loops=1)
               Heap Fetches: 3
         ->  Index Only Scan Backward using _hyper_1_2_chunk_metrics_time_idx on _hyper_1_2_chunk (never executed)
               Heap Fetches: 0
         ->  Index Only Scan Backward using _hyper_1_3_chunk_metrics_time_idx on _hyper_1_3_chunk (never executed)
               Heap Fetches: 0
(9 rows)

-- test JOIN on time column
-- should use 2 ChunkAppend
:PREFIX SELECT o1.time FROM :TEST_TABLE o1 INNER JOIN :TEST_TABLE o2 ON o1.time = o2.time ORDER BY o1.time LIMIT 100;
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=100 loops=1)
   ->  Merge Join (actual rows=100 loops=1)
         Merge Cond: (o1."time" = o2."time")
         ->  Custom Scan (ChunkAppend) on metrics o1 (actual rows=20 loops=1)
               Order: o1."time"
               ->  Index Only Scan Backward using _hyper_1_1_chunk_metrics_time_idx on _hyper_1_1_chunk o1_1 (actual rows=20 loops=1)
                     Heap Fetches: 20
               ->  Index Only Scan Backward using _hyper_1_2_chunk_metrics_time_idx on _hyper_1_2_chunk o1_2 (never executed)
                     Heap Fetches: 0
               ->  Index Only Scan Backward using _hyper_1_3_chunk_metrics_time_idx on _hyper_1_3_chunk o1_3 (never executed)
                     Heap Fetches: 0
         ->  Materialize (actual rows=100 loops=1)
               ->  Custom Scan (ChunkAppend) on metrics o2 (actual rows=21 loops=1)
                     Order: o2."time"
                     ->  Index Only Scan Backward using _hyper_1_1_chunk_metrics_time_idx on _hyper_1_1_chunk o2_1 (actual rows=21 loops=1)
                           Heap Fetches: 21
                     ->  Index Only Scan Backward using _hyper_1_2_chunk_metrics_time_idx on _hyper_1_2_chunk o2_2 (never executed)
                           Heap Fetches: 0
                     ->  Index Only Scan Backward using _hyper_1_3_chunk_metrics_time_idx on _hyper_1_3_chunk o2_3 (never executed)
                           Heap Fetches: 0
(20 rows)

-- test JOIN on time column with USING
-- should use 2 ChunkAppend
:PREFIX SELECT o1.time FROM :TEST_TABLE o1 INNER JOIN :TEST_TABLE o2 USING(time) ORDER BY o1.time LIMIT 100;
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=100 loops=1)
   ->  Merge Join (actual rows=100 loops=1)
         Merge Cond: (o1."time" = o2."time")
         ->  Custom Scan (ChunkAppend) on metrics o1 (actual rows=20 loops=1)
               Order: o1."time"
               ->  Index Only Scan Backward using _hyper_1_1_chunk_metrics_time_idx on _hyper_1_1_chunk o1_1 (actual rows=20 loops=1)
                     Heap Fetches: 20
               ->  Index Only Scan Backward using _hyper_1_2_chunk_metrics_time_idx on _hyper_1_2_chunk o1_2 (never executed)
                     Heap Fetches: 0
               ->  Index Only Scan Backward using _hyper_1_3_chunk_metrics_time_idx on _hyper_1_3_chunk o1_3 (never executed)
                     Heap Fetches: 0
         ->  Materialize (actual rows=100 loops=1)
               ->  Custom Scan (ChunkAppend) on metrics o2 (actual rows=21 loops=1)
                     Order: o2."time"
                     ->  Index Only Scan Backward using _hyper_1_1_chunk_metrics_time_idx on _hyper_1_1_chunk o2_1 (actual rows=21 loops=1)
                           Heap Fetches: 21
                     ->  Index Only Scan Backward using _hyper_1_2_chunk_metrics_time_idx on _hyper_1_2_chunk o2_2 (never executed)
                           Heap Fetches: 0
                     ->  Index Only Scan Backward using _hyper_1_3_chunk_metrics_time_idx on _hyper_1_3_chunk o2_3 (never executed)
                           Heap Fetches: 0
(20 rows)

-- test NATURAL JOIN on time column
-- should use 2 ChunkAppend
:PREFIX SELECT o1.time FROM :TEST_TABLE o1 NATURAL INNER JOIN :TEST_TABLE o2 ORDER BY o1.time LIMIT 100;
                                                                              QUERY PLAN                                                                              
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=0 loops=1)
   ->  Sort (actual rows=0 loops=1)
         Sort Key: o1."time"
         Sort Method: quicksort 
         ->  Hash Join (actual rows=0 loops=1)
               Hash Cond: ((o1."time" = o2."time") AND (o1.device_id = o2.device_id) AND (o1.v0 = o2.v0) AND (o1.v1 = o2.v1) AND (o1.v2 = o2.v2) AND (o1.v3 = o2.v3))
               ->  Append (actual rows=1 loops=1)
                     ->  Seq Scan on _hyper_1_1_chunk o1 (actual rows=1 loops=1)
                     ->  Seq Scan on _hyper_1_2_chunk o1_1 (never executed)
                     ->  Seq Scan on _hyper_1_3_chunk o1_2 (never executed)
               ->  Hash (actual rows=0 loops=1)
                     Buckets: 131072  Batches: 1 
                     ->  Append (actual rows=68370 loops=1)
                           ->  Seq Scan on _hyper_1_1_chunk o2 (actual rows=17990 loops=1)
                           ->  Seq Scan on _hyper_1_2_chunk o2_1 (actual rows=25190 loops=1)
                           ->  Seq Scan on _hyper_1_3_chunk o2_2 (actual rows=25190 loops=1)
(16 rows)

-- test LEFT JOIN on time column
-- should use 2 ChunkAppend
:PREFIX SELECT o1.time FROM :TEST_TABLE o1 LEFT JOIN :TEST_TABLE o2 ON o1.time=o2.time ORDER BY o1.time LIMIT 100;
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=100 loops=1)
   ->  Merge Left Join (actual rows=100 loops=1)
         Merge Cond: (o1."time" = o2."time")
         ->  Custom Scan (ChunkAppend) on metrics o1 (actual rows=20 loops=1)
               Order: o1."time"
               ->  Index Only Scan Backward using _hyper_1_1_chunk_metrics_time_idx on _hyper_1_1_chunk o1_1 (actual rows=20 loops=1)
                     Heap Fetches: 20
               ->  Index Only Scan Backward using _hyper_1_2_chunk_metrics_time_idx on _hyper_1_2_chunk o1_2 (never executed)
                     Heap Fetches: 0
               ->  Index Only Scan Backward using _hyper_1_3_chunk_metrics_time_idx on _hyper_1_3_chunk o1_3 (never executed)
                     Heap Fetches: 0
         ->  Materialize (actual rows=100 loops=1)
               ->  Custom Scan (ChunkAppend) on metrics o2 (actual rows=21 loops=1)
                     Order: o2."time"
                     ->  Index Only Scan Backward using _hyper_1_1_chunk_metrics_time_idx on _hyper_1_1_chunk o2_1 (actual rows=21 loops=1)
                           Heap Fetches: 21
                     ->  Index Only Scan Backward using _hyper_1_2_chunk_metrics_time_idx on _hyper_1_2_chunk o2_2 (never executed)
                           Heap Fetches: 0
                     ->  Index Only Scan Backward using _hyper_1_3_chunk_metrics_time_idx on _hyper_1_3_chunk o2_3 (never executed)
                           Heap Fetches: 0
(20 rows)

-- test RIGHT JOIN on time column
-- should use 2 ChunkAppend
:PREFIX SELECT o1.time FROM :TEST_TABLE o1 RIGHT JOIN :TEST_TABLE o2 ON o1.time=o2.time ORDER BY o2.time LIMIT 100;
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=100 loops=1)
   ->  Merge Left Join (actual rows=100 loops=1)
         Merge Cond: (o2."time" = o1."time")
         ->  Custom Scan (ChunkAppend) on metrics o2 (actual rows=20 loops=1)
               Order: o2."time"
               ->  Index Only Scan Backward using _hyper_1_1_chunk_metrics_time_idx on _hyper_1_1_chunk o2_1 (actual rows=20 loops=1)
                     Heap Fetches: 20
               ->  Index Only Scan Backward using _hyper_1_2_chunk_metrics_time_idx on _hyper_1_2_chunk o2_2 (never executed)
                     Heap Fetches: 0
               ->  Index Only Scan Backward using _hyper_1_3_chunk_metrics_time_idx on _hyper_1_3_chunk o2_3 (never executed)
                     Heap Fetches: 0
         ->  Materialize (actual rows=100 loops=1)
               ->  Custom Scan (ChunkAppend) on metrics o1 (actual rows=21 loops=1)
                     Order: o1."time"
                     ->  Index Only Scan Backward using _hyper_1_1_chunk_metrics_time_idx on _hyper_1_1_chunk o1_1 (actual rows=21 loops=1)
                           Heap Fetches: 21
                     ->  Index Only Scan Backward using _hyper_1_2_chunk_metrics_time_idx on _hyper_1_2_chunk o1_2 (never executed)
                           Heap Fetches: 0
                     ->  Index Only Scan Backward using _hyper_1_3_chunk_metrics_time_idx on _hyper_1_3_chunk o1_3 (never executed)
                           Heap Fetches: 0
(20 rows)

-- test JOIN on time column with ON clause expression order switched
-- should use 2 ChunkAppend
:PREFIX SELECT o1.time FROM :TEST_TABLE o1 INNER JOIN :TEST_TABLE o2 ON o2.time = o1.time ORDER BY o1.time LIMIT 100;
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=100 loops=1)
   ->  Merge Join (actual rows=100 loops=1)
         Merge Cond: (o1."time" = o2."time")
         ->  Custom Scan (ChunkAppend) on metrics o1 (actual rows=20 loops=1)
               Order: o1."time"
               ->  Index Only Scan Backward using _hyper_1_1_chunk_metrics_time_idx on _hyper_1_1_chunk o1_1 (actual rows=20 loops=1)
                     Heap Fetches: 20
               ->  Index Only Scan Backward using _hyper_1_2_chunk_metrics_time_idx on _hyper_1_2_chunk o1_2 (never executed)
                     Heap Fetches: 0
               ->  Index Only Scan Backward using _hyper_1_3_chunk_metrics_time_idx on _hyper_1_3_chunk o1_3 (never executed)
                     Heap Fetches: 0
         ->  Materialize (actual rows=100 loops=1)
               ->  Custom Scan (ChunkAppend) on metrics o2 (actual rows=21 loops=1)
                     Order: o2."time"
                     ->  Index Only Scan Backward using _hyper_1_1_chunk_metrics_time_idx on _hyper_1_1_chunk o2_1 (actual rows=21 loops=1)
                           Heap Fetches: 21
                     ->  Index Only Scan Backward using _hyper_1_2_chunk_metrics_time_idx on _hyper_1_2_chunk o2_2 (never executed)
                           Heap Fetches: 0
                     ->  Index Only Scan Backward using _hyper_1_3_chunk_metrics_time_idx on _hyper_1_3_chunk o2_3 (never executed)
                           Heap Fetches: 0
(20 rows)

-- test JOIN on time column with equality condition in WHERE clause
-- should use 2 ChunkAppend
:PREFIX SELECT o1.time FROM :TEST_TABLE o1 INNER JOIN :TEST_TABLE o2 ON true WHERE o1.time = o2.time ORDER BY o1.time LIMIT 100;
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=100 loops=1)
   ->  Merge Join (actual rows=100 loops=1)
         Merge Cond: (o1."time" = o2."time")
         ->  Custom Scan (ChunkAppend) on metrics o1 (actual rows=20 loops=1)
               Order: o1."time"
               ->  Index Only Scan Backward using _hyper_1_1_chunk_metrics_time_idx on _hyper_1_1_chunk o1_1 (actual rows=20 loops=1)
                     Heap Fetches: 20
               ->  Index Only Scan Backward using _hyper_1_2_chunk_metrics_time_idx on _hyper_1_2_chunk o1_2 (never executed)
                     Heap Fetches: 0
               ->  Index Only Scan Backward using _hyper_1_3_chunk_metrics_time_idx on _hyper_1_3_chunk o1_3 (never executed)
                     Heap Fetches: 0
         ->  Materialize (actual rows=100 loops=1)
               ->  Custom Scan (ChunkAppend) on metrics o2 (actual rows=21 loops=1)
                     Order: o2."time"
                     ->  Index Only Scan Backward using _hyper_1_1_chunk_metrics_time_idx on _hyper_1_1_chunk o2_1 (actual rows=21 loops=1)
                           Heap Fetches: 21
                     ->  Index Only Scan Backward using _hyper_1_2_chunk_metrics_time_idx on _hyper_1_2_chunk o2_2 (never executed)
                           Heap Fetches: 0
                     ->  Index Only Scan Backward using _hyper_1_3_chunk_metrics_time_idx on _hyper_1_3_chunk o2_3 (never executed)
                           Heap Fetches: 0
(20 rows)

-- test JOIN on time column with ORDER BY 2nd hypertable
-- should use 2 ChunkAppend
:PREFIX SELECT o1.time FROM :TEST_TABLE o1 INNER JOIN :TEST_TABLE o2 ON o1.time = o2.time ORDER BY o2.time LIMIT 100;
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=100 loops=1)
   ->  Merge Join (actual rows=100 loops=1)
         Merge Cond: (o1."time" = o2."time")
         ->  Custom Scan (ChunkAppend) on metrics o1 (actual rows=20 loops=1)
               Order: o1."time"
               ->  Index Only Scan Backward using _hyper_1_1_chunk_metrics_time_idx on _hyper_1_1_chunk o1_1 (actual rows=20 loops=1)
                     Heap Fetches: 20
               ->  Index Only Scan Backward using _hyper_1_2_chunk_metrics_time_idx on _hyper_1_2_chunk o1_2 (never executed)
                     Heap Fetches: 0
               ->  Index Only Scan Backward using _hyper_1_3_chunk_metrics_time_idx on _hyper_1_3_chunk o1_3 (never executed)
                     Heap Fetches: 0
         ->  Materialize (actual rows=100 loops=1)
               ->  Custom Scan (ChunkAppend) on metrics o2 (actual rows=21 loops=1)
                     Order: o2."time"
                     ->  Index Only Scan Backward using _hyper_1_1_chunk_metrics_time_idx on _hyper_1_1_chunk o2_1 (actual rows=21 loops=1)
                           Heap Fetches: 21
                     ->  Index Only Scan Backward using _hyper_1_2_chunk_metrics_time_idx on _hyper_1_2_chunk o2_2 (never executed)
                           Heap Fetches: 0
                     ->  Index Only Scan Backward using _hyper_1_3_chunk_metrics_time_idx on _hyper_1_3_chunk o2_3 (never executed)
                           Heap Fetches: 0
(20 rows)

-- test JOIN on time column and device_id
-- should use 2 ChunkAppend
:PREFIX SELECT o1.time FROM :TEST_TABLE o1 INNER JOIN :TEST_TABLE o2 ON o1.device_id = o2.device_id AND o1.time = o2.time ORDER BY o1.time LIMIT 100;
                                                               QUERY PLAN                                                               
----------------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=100 loops=1)
   ->  Merge Join (actual rows=100 loops=1)
         Merge Cond: (o1."time" = o2."time")
         Join Filter: (o1.device_id = o2.device_id)
         Rows Removed by Join Filter: 400
         ->  Custom Scan (ChunkAppend) on metrics o1 (actual rows=100 loops=1)
               Order: o1."time"
               ->  Index Scan Backward using _hyper_1_1_chunk_metrics_time_idx on _hyper_1_1_chunk o1_1 (actual rows=100 loops=1)
               ->  Index Scan Backward using _hyper_1_2_chunk_metrics_time_idx on _hyper_1_2_chunk o1_2 (never executed)
               ->  Index Scan Backward using _hyper_1_3_chunk_metrics_time_idx on _hyper_1_3_chunk o1_3 (never executed)
         ->  Materialize (actual rows=500 loops=1)
               ->  Custom Scan (ChunkAppend) on metrics o2 (actual rows=101 loops=1)
                     Order: o2."time"
                     ->  Index Scan Backward using _hyper_1_1_chunk_metrics_time_idx on _hyper_1_1_chunk o2_1 (actual rows=101 loops=1)
                     ->  Index Scan Backward using _hyper_1_2_chunk_metrics_time_idx on _hyper_1_2_chunk o2_2 (never executed)
                     ->  Index Scan Backward using _hyper_1_3_chunk_metrics_time_idx on _hyper_1_3_chunk o2_3 (never executed)
(16 rows)

-- test JOIN on device_id
-- should not use ordered append for 2nd hypertable
:PREFIX SELECT o1.time FROM :TEST_TABLE o1 INNER JOIN :TEST_TABLE o2 ON o1.device_id = o2.device_id WHERE o1.device_id = 1 ORDER BY o1.time LIMIT 100;
                                                                  QUERY PLAN                                                                   
-----------------------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=100 loops=1)
   ->  Nested Loop (actual rows=100 loops=1)
         ->  Custom Scan (ChunkAppend) on metrics o1 (actual rows=1 loops=1)
               Order: o1."time"
               ->  Index Only Scan Backward using _hyper_1_1_chunk_metrics_device_id_time_idx on _hyper_1_1_chunk o1_1 (actual rows=1 loops=1)
                     Index Cond: (device_id = 1)
                     Heap Fetches: 1
               ->  Index Only Scan Backward using _hyper_1_2_chunk_metrics_device_id_time_idx on _hyper_1_2_chunk o1_2 (never executed)
                     Index Cond: (device_id = 1)
                     Heap Fetches: 0
               ->  Index Only Scan Backward using _hyper_1_3_chunk_metrics_device_id_time_idx on _hyper_1_3_chunk o1_3 (never executed)
                     Index Cond: (device_id = 1)
                     Heap Fetches: 0
         ->  Materialize (actual rows=100 loops=1)
               ->  Append (actual rows=100 loops=1)
                     ->  Index Only Scan using _hyper_1_1_chunk_metrics_device_id_time_idx on _hyper_1_1_chunk o2 (actual rows=100 loops=1)
                           Index Cond: (device_id = 1)
                           Heap Fetches: 100
                     ->  Index Only Scan using _hyper_1_2_chunk_metrics_device_id_time_idx on _hyper_1_2_chunk o2_1 (never executed)
                           Index Cond: (device_id = 1)
                           Heap Fetches: 0
                     ->  Index Only Scan using _hyper_1_3_chunk_metrics_device_id_time_idx on _hyper_1_3_chunk o2_2 (never executed)
                           Index Cond: (device_id = 1)
                           Heap Fetches: 0
(24 rows)

-- test JOIN on time column with implicit join
-- should use 2 ChunkAppend
:PREFIX SELECT o1.time FROM :TEST_TABLE o1, :TEST_TABLE o2 WHERE o1.time = o2.time ORDER BY o1.time LIMIT 100;
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=100 loops=1)
   ->  Merge Join (actual rows=100 loops=1)
         Merge Cond: (o1."time" = o2."time")
         ->  Custom Scan (ChunkAppend) on metrics o1 (actual rows=20 loops=1)
               Order: o1."time"
               ->  Index Only Scan Backward using _hyper_1_1_chunk_metrics_time_idx on _hyper_1_1_chunk o1_1 (actual rows=20 loops=1)
                     Heap Fetches: 20
               ->  Index Only Scan Backward using _hyper_1_2_chunk_metrics_time_idx on _hyper_1_2_chunk o1_2 (never executed)
                     Heap Fetches: 0
               ->  Index Only Scan Backward using _hyper_1_3_chunk_metrics_time_idx on _hyper_1_3_chunk o1_3 (never executed)
                     Heap Fetches: 0
         ->  Materialize (actual rows=100 loops=1)
               ->  Custom Scan (ChunkAppend) on metrics o2 (actual rows=21 loops=1)
                     Order: o2."time"
                     ->  Index Only Scan Backward using _hyper_1_1_chunk_metrics_time_idx on _hyper_1_1_chunk o2_1 (actual rows=21 loops=1)
                           Heap Fetches: 21
                     ->  Index Only Scan Backward using _hyper_1_2_chunk_metrics_time_idx on _hyper_1_2_chunk o2_2 (never executed)
                           Heap Fetches: 0
                     ->  Index Only Scan Backward using _hyper_1_3_chunk_metrics_time_idx on _hyper_1_3_chunk o2_3 (never executed)
                           Heap Fetches: 0
(20 rows)

-- test JOIN on time column with 3 hypertables
-- should use 3 ChunkAppend
:PREFIX SELECT o1.time FROM :TEST_TABLE o1 INNER JOIN :TEST_TABLE o2 ON o1.time = o2.time INNER JOIN :TEST_TABLE o3 ON o1.time = o3.time ORDER BY o1.time LIMIT 100;
                                                                      QUERY PLAN                                                                       
-------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=100 loops=1)
   ->  Merge Join (actual rows=100 loops=1)
         Merge Cond: (o3."time" = o1."time")
         ->  Custom Scan (ChunkAppend) on metrics o3 (actual rows=4 loops=1)
               Order: o3."time"
               ->  Index Only Scan Backward using _hyper_1_1_chunk_metrics_time_idx on _hyper_1_1_chunk o3_1 (actual rows=4 loops=1)
                     Heap Fetches: 4
               ->  Index Only Scan Backward using _hyper_1_2_chunk_metrics_time_idx on _hyper_1_2_chunk o3_2 (never executed)
                     Heap Fetches: 0
               ->  Index Only Scan Backward using _hyper_1_3_chunk_metrics_time_idx on _hyper_1_3_chunk o3_3 (never executed)
                     Heap Fetches: 0
         ->  Materialize (actual rows=100 loops=1)
               ->  Merge Join (actual rows=26 loops=1)
                     Merge Cond: (o1."time" = o2."time")
                     ->  Custom Scan (ChunkAppend) on metrics o1 (actual rows=6 loops=1)
                           Order: o1."time"
                           ->  Index Only Scan Backward using _hyper_1_1_chunk_metrics_time_idx on _hyper_1_1_chunk o1_1 (actual rows=6 loops=1)
                                 Heap Fetches: 6
                           ->  Index Only Scan Backward using _hyper_1_2_chunk_metrics_time_idx on _hyper_1_2_chunk o1_2 (never executed)
                                 Heap Fetches: 0
                           ->  Index Only Scan Backward using _hyper_1_3_chunk_metrics_time_idx on _hyper_1_3_chunk o1_3 (never executed)
                                 Heap Fetches: 0
                     ->  Materialize (actual rows=26 loops=1)
                           ->  Custom Scan (ChunkAppend) on metrics o2 (actual rows=6 loops=1)
                                 Order: o2."time"
                                 ->  Index Only Scan Backward using _hyper_1_1_chunk_metrics_time_idx on _hyper_1_1_chunk o2_1 (actual rows=6 loops=1)
                                       Heap Fetches: 6
                                 ->  Index Only Scan Backward using _hyper_1_2_chunk_metrics_time_idx on _hyper_1_2_chunk o2_2 (never executed)
                                       Heap Fetches: 0
                                 ->  Index Only Scan Backward using _hyper_1_3_chunk_metrics_time_idx on _hyper_1_3_chunk o2_3 (never executed)
                                       Heap Fetches: 0
(31 rows)

\set TEST_TABLE 'metrics_space'
\ir :TEST_QUERY_NAME
-- test ASC for ordered chunks
:PREFIX SELECT
  time
FROM :TEST_TABLE
ORDER BY time ASC LIMIT 1;
                                                         QUERY PLAN                                                          
-----------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=1 loops=1)
   ->  Custom Scan (ChunkAppend) on metrics_space (actual rows=1 loops=1)
         Order: metrics_space."time"
         ->  Merge Append (actual rows=1 loops=1)
               Sort Key: _hyper_2_4_chunk."time"
               ->  Index Only Scan using _hyper_2_4_chunk_metrics_space_time_idx on _hyper_2_4_chunk (actual rows=1 loops=1)
                     Heap Fetches: 1
               ->  Index Only Scan using _hyper_2_5_chunk_metrics_space_time_idx on _hyper_2_5_chunk (actual rows=1 loops=1)
                     Heap Fetches: 1
               ->  Index Only Scan using _hyper_2_6_chunk_metrics_space_time_idx on _hyper_2_6_chunk (actual rows=1 loops=1)
                     Heap Fetches: 1
         ->  Merge Append (never executed)
               Sort Key: _hyper_2_7_chunk."time"
               ->  Index Only Scan using _hyper_2_7_chunk_metrics_space_time_idx on _hyper_2_7_chunk (never executed)
                     Heap Fetches: 0
               ->  Index Only Scan using _hyper_2_8_chunk_metrics_space_time_idx on _hyper_2_8_chunk (never executed)
                     Heap Fetches: 0
               ->  Index Only Scan using _hyper_2_9_chunk_metrics_space_time_idx on _hyper_2_9_chunk (never executed)
                     Heap Fetches: 0
         ->  Merge Append (never executed)
               Sort Key: _hyper_2_10_chunk."time"
               ->  Index Only Scan using _hyper_2_10_chunk_metrics_space_time_idx on _hyper_2_10_chunk (never executed)
                     Heap Fetches: 0
               ->  Index Only Scan using _hyper_2_11_chunk_metrics_space_time_idx on _hyper_2_11_chunk (never executed)
                     Heap Fetches: 0
               ->  Index Only Scan using _hyper_2_12_chunk_metrics_space_time_idx on _hyper_2_12_chunk (never executed)
                     Heap Fetches: 0
(27 rows)

-- test DESC for ordered chunks
:PREFIX SELECT
  time
FROM :TEST_TABLE
ORDER BY time DESC LIMIT 1;
                                                               QUERY PLAN                                                               
----------------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=1 loops=1)
   ->  Custom Scan (ChunkAppend) on metrics_space (actual rows=1 loops=1)
         Order: metrics_space."time" DESC
         ->  Merge Append (actual rows=1 loops=1)
               Sort Key: _hyper_2_12_chunk."time" DESC
               ->  Index Only Scan Backward using _hyper_2_12_chunk_metrics_space_time_idx on _hyper_2_12_chunk (actual rows=1 loops=1)
                     Heap Fetches: 1
               ->  Index Only Scan Backward using _hyper_2_11_chunk_metrics_space_time_idx on _hyper_2_11_chunk (actual rows=1 loops=1)
                     Heap Fetches: 1
               ->  Index Only Scan Backward using _hyper_2_10_chunk_metrics_space_time_idx on _hyper_2_10_chunk (actual rows=1 loops=1)
                     Heap Fetches: 1
         ->  Merge Append (never executed)
               Sort Key: _hyper_2_9_chunk."time" DESC
               ->  Index Only Scan Backward using _hyper_2_9_chunk_metrics_space_time_idx on _hyper_2_9_chunk (never executed)
                     Heap Fetches: 0
               ->  Index Only Scan Backward using _hyper_2_8_chunk_metrics_space_time_idx on _hyper_2_8_chunk (never executed)
                     Heap Fetches: 0
               ->  Index Only Scan Backward using _hyper_2_7_chunk_metrics_space_time_idx on _hyper_2_7_chunk (never executed)
                     Heap Fetches: 0
         ->  Merge Append (never executed)
               Sort Key: _hyper_2_6_chunk."time" DESC
               ->  Index Only Scan Backward using _hyper_2_6_chunk_metrics_space_time_idx on _hyper_2_6_chunk (never executed)
                     Heap Fetches: 0
               ->  Index Only Scan Backward using _hyper_2_5_chunk_metrics_space_time_idx on _hyper_2_5_chunk (never executed)
                     Heap Fetches: 0
               ->  Index Only Scan Backward using _hyper_2_4_chunk_metrics_space_time_idx on _hyper_2_4_chunk (never executed)
                     Heap Fetches: 0
(27 rows)

-- test query with ORDER BY column not in targetlist
:PREFIX SELECT
  pg_typeof(device_id), pg_typeof(v2)
FROM :TEST_TABLE
ORDER BY time ASC LIMIT 1;
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=1 loops=1)
   ->  Custom Scan (ChunkAppend) on metrics_space (actual rows=1 loops=1)
         Order: metrics_space."time"
         ->  Merge Append (actual rows=1 loops=1)
               Sort Key: _hyper_2_4_chunk."time"
               ->  Index Scan using _hyper_2_4_chunk_metrics_space_time_idx on _hyper_2_4_chunk (actual rows=1 loops=1)
               ->  Index Scan using _hyper_2_5_chunk_metrics_space_time_idx on _hyper_2_5_chunk (actual rows=1 loops=1)
               ->  Index Scan using _hyper_2_6_chunk_metrics_space_time_idx on _hyper_2_6_chunk (actual rows=1 loops=1)
         ->  Merge Append (never executed)
               Sort Key: _hyper_2_7_chunk."time"
               ->  Index Scan using _hyper_2_7_chunk_metrics_space_time_idx on _hyper_2_7_chunk (never executed)
               ->  Index Scan using _hyper_2_8_chunk_metrics_space_time_idx on _hyper_2_8_chunk (never executed)
               ->  Index Scan using _hyper_2_9_chunk_metrics_space_time_idx on _hyper_2_9_chunk (never executed)
         ->  Merge Append (never executed)
               Sort Key: _hyper_2_10_chunk."time"
               ->  Index Scan using _hyper_2_10_chunk_metrics_space_time_idx on _hyper_2_10_chunk (never executed)
               ->  Index Scan using _hyper_2_11_chunk_metrics_space_time_idx on _hyper_2_11_chunk (never executed)
               ->  Index Scan using _hyper_2_12_chunk_metrics_space_time_idx on _hyper_2_12_chunk (never executed)
(18 rows)

-- ORDER BY may include other columns after time column
:PREFIX SELECT
  time, device_id, v0
FROM :TEST_TABLE
ORDER BY time DESC, device_id LIMIT 1;
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 Limit (actual rows=1 loops=1)
   ->  Sort (actual rows=1 loops=1)
         Sort Key: _hyper_2_12_chunk."time" DESC, _hyper_2_12_chunk.device_id
         Sort Method: top-N heapsort 
         ->  Append (actual rows=68370 loops=1)
               ->  Seq Scan on _hyper_2_12_chunk (actual rows=5038 loops=1)
               ->  Seq Scan on _hyper_2_11_chunk (actual rows=15114 loops=1)
               ->  Seq Scan on _hyper_2_10_chunk (actual rows=5038 loops=1)
               ->  Seq Scan on _hyper_2_9_chunk (actual rows=5038 loops=1)
               ->  Seq Scan on _hyper_2_8_chunk (actual rows=15114 loops=1)
               ->  Seq Scan on _hyper_2_7_chunk (actual rows=5038 loops=1)
               ->  Seq Scan on _hyper_2_6_chunk (actual rows=3598 loops=1)
               ->  Seq Scan on _hyper_2_5_chunk (actual rows=10794 loops=1)
               ->  Seq Scan on _hyper_2_4_chunk (actual rows=3598 loops=1)
(14 rows)

-- test RECORD in targetlist
:PREFIX SELECT
  (time, device_id, v0)
FROM :TEST_TABLE
ORDER BY time DESC, device_id LIMIT 1;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Limit (actual rows=1 loops=1)
   ->  Sort (actual rows=1 loops=1)
         Sort Key: _hyper_2_12_chunk."time" DESC, _hyper_2_12_chunk.device_id
         Sort Method: top-N heapsort 
         ->  Result (actual rows=68370 loops=1)
               ->  Append (actual rows=68370 loops=1)
                     ->  Seq Scan on _hyper_2_12_chunk (actual rows=5038 loops=1)
                     ->  Seq Scan on _hyper_2_11_chunk (actual rows=15114 loops=1)
                     ->  Seq Scan on _hyper_2_10_chunk (actual rows=5038 loops=1)
                     ->  Seq Scan on _hyper_2_9_chunk (actual rows=5038 loops=1)
                     ->  Seq Scan on _hyper_2_8_chunk (actual rows=15114 loops=1)
                     ->  Seq Scan on _hyper_2_7_chunk (actual rows=5038 loops=1)
                     ->  Seq Scan on _hyper_2_6_chunk (actual rows=3598 loops=1)
                     ->  Seq Scan on _hyper_2_5_chunk (actual rows=10794 loops=1)
                     ->  Seq Scan on _hyper_2_4_chunk (actual rows=3598 loops=1)
(15 rows)

-- test sort column not in targetlist
:PREFIX SELECT
  time_bucket('1h',time)
FROM :TEST_TABLE
ORDER BY time DESC LIMIT 1;
                                                               QUERY PLAN                                                               
----------------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=1 loops=1)
   ->  Custom Scan (ChunkAppend) on metrics_space (actual rows=1 loops=1)
         Order: metrics_space."time" DESC
         ->  Merge Append (actual rows=1 loops=1)
               Sort Key: _hyper_2_12_chunk."time" DESC
               ->  Index Only Scan Backward using _hyper_2_12_chunk_metrics_space_time_idx on _hyper_2_12_chunk (actual rows=1 loops=1)
                     Heap Fetches: 1
               ->  Index Only Scan Backward using _hyper_2_11_chunk_metrics_space_time_idx on _hyper_2_11_chunk (actual rows=1 loops=1)
                     Heap Fetches: 1
               ->  Index Only Scan Backward using _hyper_2_10_chunk_metrics_space_time_idx on _hyper_2_10_chunk (actual rows=1 loops=1)
                     Heap Fetches: 1
         ->  Merge Append (never executed)
               Sort Key: _hyper_2_9_chunk."time" DESC
               ->  Index Only Scan Backward using _hyper_2_9_chunk_metrics_space_time_idx on _hyper_2_9_chunk (never executed)
                     Heap Fetches: 0
               ->  Index Only Scan Backward using _hyper_2_8_chunk_metrics_space_time_idx on _hyper_2_8_chunk (never executed)
                     Heap Fetches: 0
               ->  Index Only Scan Backward using _hyper_2_7_chunk_metrics_space_time_idx on _hyper_2_7_chunk (never executed)
                     Heap Fetches: 0
         ->  Merge Append (never executed)
               Sort Key: _hyper_2_6_chunk."time" DESC
               ->  Index Only Scan Backward using _hyper_2_6_chunk_metrics_space_time_idx on _hyper_2_6_chunk (never executed)
                     Heap Fetches: 0
               ->  Index Only Scan Backward using _hyper_2_5_chunk_metrics_space_time_idx on _hyper_2_5_chunk (never executed)
                     Heap Fetches: 0
               ->  Index Only Scan Backward using _hyper_2_4_chunk_metrics_space_time_idx on _hyper_2_4_chunk (never executed)
                     Heap Fetches: 0
(27 rows)

-- queries with ORDER BY non-time column shouldn't use ordered append
:PREFIX SELECT
  device_id
FROM :TEST_TABLE
ORDER BY device_id LIMIT 1;
                                                            QUERY PLAN                                                             
-----------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=1 loops=1)
   ->  Merge Append (actual rows=1 loops=1)
         Sort Key: _hyper_2_4_chunk.device_id
         ->  Index Only Scan using _hyper_2_4_chunk_metrics_space_device_id_time_idx on _hyper_2_4_chunk (actual rows=1 loops=1)
               Heap Fetches: 1
         ->  Index Only Scan using _hyper_2_5_chunk_metrics_space_device_id_time_idx on _hyper_2_5_chunk (actual rows=1 loops=1)
               Heap Fetches: 1
         ->  Index Only Scan using _hyper_2_6_chunk_metrics_space_device_id_time_idx on _hyper_2_6_chunk (actual rows=1 loops=1)
               Heap Fetches: 1
         ->  Index Only Scan using _hyper_2_7_chunk_metrics_space_device_id_time_idx on _hyper_2_7_chunk (actual rows=1 loops=1)
               Heap Fetches: 1
         ->  Index Only Scan using _hyper_2_8_chunk_metrics_space_device_id_time_idx on _hyper_2_8_chunk (actual rows=1 loops=1)
               Heap Fetches: 1
         ->  Index Only Scan using _hyper_2_9_chunk_metrics_space_device_id_time_idx on _hyper_2_9_chunk (actual rows=1 loops=1)
               Heap Fetches: 1
         ->  Index Only Scan using _hyper_2_10_chunk_metrics_space_device_id_time_idx on _hyper_2_10_chunk (actual rows=1 loops=1)
               Heap Fetches: 1
         ->  Index Only Scan using _hyper_2_11_chunk_metrics_space_device_id_time_idx on _hyper_2_11_chunk (actual rows=1 loops=1)
               Heap Fetches: 1
         ->  Index Only Scan using _hyper_2_12_chunk_metrics_space_device_id_time_idx on _hyper_2_12_chunk (actual rows=1 loops=1)
               Heap Fetches: 1
(21 rows)

-- time column must be primary sort order
:PREFIX SELECT
  time, device_id
FROM :TEST_TABLE
ORDER BY device_id, time LIMIT 1;
                                                            QUERY PLAN                                                             
-----------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=1 loops=1)
   ->  Merge Append (actual rows=1 loops=1)
         Sort Key: _hyper_2_4_chunk.device_id, _hyper_2_4_chunk."time"
         ->  Index Only Scan using _hyper_2_4_chunk_metrics_space_device_id_time_idx on _hyper_2_4_chunk (actual rows=1 loops=1)
               Heap Fetches: 1
         ->  Index Only Scan using _hyper_2_5_chunk_metrics_space_device_id_time_idx on _hyper_2_5_chunk (actual rows=1 loops=1)
               Heap Fetches: 1
         ->  Index Only Scan using _hyper_2_6_chunk_metrics_space_device_id_time_idx on _hyper_2_6_chunk (actual rows=1 loops=1)
               Heap Fetches: 1
         ->  Index Only Scan using _hyper_2_7_chunk_metrics_space_device_id_time_idx on _hyper_2_7_chunk (actual rows=1 loops=1)
               Heap Fetches: 1
         ->  Index Only Scan using _hyper_2_8_chunk_metrics_space_device_id_time_idx on _hyper_2_8_chunk (actual rows=1 loops=1)
               Heap Fetches: 1
         ->  Index Only Scan using _hyper_2_9_chunk_metrics_space_device_id_time_idx on _hyper_2_9_chunk (actual rows=1 loops=1)
               Heap Fetches: 1
         ->  Index Only Scan using _hyper_2_10_chunk_metrics_space_device_id_time_idx on _hyper_2_10_chunk (actual rows=1 loops=1)
               Heap Fetches: 1
         ->  Index Only Scan using _hyper_2_11_chunk_metrics_space_device_id_time_idx on _hyper_2_11_chunk (actual rows=1 loops=1)
               Heap Fetches: 1
         ->  Index Only Scan using _hyper_2_12_chunk_metrics_space_device_id_time_idx on _hyper_2_12_chunk (actual rows=1 loops=1)
               Heap Fetches: 1
(21 rows)

-- test equality constraint on ORDER BY prefix
-- currently not optimized
:PREFIX SELECT
  time, device_id
FROM :TEST_TABLE
WHERE device_id = 1
ORDER BY device_id, time LIMIT 10;
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=10 loops=1)
   ->  Merge Append (actual rows=10 loops=1)
         Sort Key: _hyper_2_10_chunk."time"
         ->  Index Scan using _hyper_2_10_chunk_metrics_space_time_idx on _hyper_2_10_chunk (actual rows=1 loops=1)
               Filter: (device_id = 1)
         ->  Index Scan using _hyper_2_4_chunk_metrics_space_time_idx on _hyper_2_4_chunk (actual rows=10 loops=1)
               Filter: (device_id = 1)
         ->  Index Scan using _hyper_2_7_chunk_metrics_space_time_idx on _hyper_2_7_chunk (actual rows=1 loops=1)
               Filter: (device_id = 1)
(9 rows)

-- queries without LIMIT should use ordered append
:PREFIX SELECT
  time
FROM :TEST_TABLE
ORDER BY time ASC;
                                                         QUERY PLAN                                                          
-----------------------------------------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on metrics_space (actual rows=68370 loops=1)
   Order: metrics_space."time"
   ->  Merge Append (actual rows=17990 loops=1)
         Sort Key: _hyper_2_4_chunk."time"
         ->  Index Only Scan using _hyper_2_4_chunk_metrics_space_time_idx on _hyper_2_4_chunk (actual rows=3598 loops=1)
               Heap Fetches: 3598
         ->  Index Only Scan using _hyper_2_5_chunk_metrics_space_time_idx on _hyper_2_5_chunk (actual rows=10794 loops=1)
               Heap Fetches: 10794
         ->  Index Only Scan using _hyper_2_6_chunk_metrics_space_time_idx on _hyper_2_6_chunk (actual rows=3598 loops=1)
               Heap Fetches: 3598
   ->  Merge Append (actual rows=25190 loops=1)
         Sort Key: _hyper_2_7_chunk."time"
         ->  Index Only Scan using _hyper_2_7_chunk_metrics_space_time_idx on _hyper_2_7_chunk (actual rows=5038 loops=1)
               Heap Fetches: 5038
         ->  Index Only Scan using _hyper_2_8_chunk_metrics_space_time_idx on _hyper_2_8_chunk (actual rows=15114 loops=1)
               Heap Fetches: 15114
         ->  Index Only Scan using _hyper_2_9_chunk_metrics_space_time_idx on _hyper_2_9_chunk (actual rows=5038 loops=1)
               Heap Fetches: 5038
   ->  Merge Append (actual rows=25190 loops=1)
         Sort Key: _hyper_2_10_chunk."time"
         ->  Index Only Scan using _hyper_2_10_chunk_metrics_space_time_idx on _hyper_2_10_chunk (actual rows=5038 loops=1)
               Heap Fetches: 5038
         ->  Index Only Scan using _hyper_2_11_chunk_metrics_space_time_idx on _hyper_2_11_chunk (actual rows=15114 loops=1)
               Heap Fetches: 15114
         ->  Index Only Scan using _hyper_2_12_chunk_metrics_space_time_idx on _hyper_2_12_chunk (actual rows=5038 loops=1)
               Heap Fetches: 5038
(26 rows)

-- queries without ORDER BY shouldnt use ordered append
:PREFIX SELECT
  pg_typeof(time)
FROM :TEST_TABLE
LIMIT 1;
                               QUERY PLAN                               
------------------------------------------------------------------------
 Limit (actual rows=1 loops=1)
   ->  Result (actual rows=1 loops=1)
         ->  Append (actual rows=1 loops=1)
               ->  Seq Scan on _hyper_2_4_chunk (actual rows=1 loops=1)
               ->  Seq Scan on _hyper_2_5_chunk (never executed)
               ->  Seq Scan on _hyper_2_6_chunk (never executed)
               ->  Seq Scan on _hyper_2_7_chunk (never executed)
               ->  Seq Scan on _hyper_2_8_chunk (never executed)
               ->  Seq Scan on _hyper_2_9_chunk (never executed)
               ->  Seq Scan on _hyper_2_10_chunk (never executed)
               ->  Seq Scan on _hyper_2_11_chunk (never executed)
               ->  Seq Scan on _hyper_2_12_chunk (never executed)
(12 rows)

-- test interaction with constraint exclusion
:PREFIX SELECT
  time
FROM :TEST_TABLE
WHERE time > '2000-01-07'
ORDER BY time ASC LIMIT 1;
                                                         QUERY PLAN                                                          
-----------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=1 loops=1)
   ->  Custom Scan (ChunkAppend) on metrics_space (actual rows=1 loops=1)
         Order: metrics_space."time"
         ->  Merge Append (actual rows=1 loops=1)
               Sort Key: _hyper_2_7_chunk."time"
               ->  Index Only Scan using _hyper_2_7_chunk_metrics_space_time_idx on _hyper_2_7_chunk (actual rows=1 loops=1)
                     Index Cond: ("time" > 'Fri Jan 07 00:00:00 2000 PST'::timestamp with time zone)
                     Heap Fetches: 1
               ->  Index Only Scan using _hyper_2_8_chunk_metrics_space_time_idx on _hyper_2_8_chunk (actual rows=1 loops=1)
                     Index Cond: ("time" > 'Fri Jan 07 00:00:00 2000 PST'::timestamp with time zone)
                     Heap Fetches: 1
               ->  Index Only Scan using _hyper_2_9_chunk_metrics_space_time_idx on _hyper_2_9_chunk (actual rows=1 loops=1)
                     Index Cond: ("time" > 'Fri Jan 07 00:00:00 2000 PST'::timestamp with time zone)
                     Heap Fetches: 1
         ->  Merge Append (never executed)
               Sort Key: _hyper_2_10_chunk."time"
               ->  Index Only Scan using _hyper_2_10_chunk_metrics_space_time_idx on _hyper_2_10_chunk (never executed)
                     Index Cond: ("time" > 'Fri Jan 07 00:00:00 2000 PST'::timestamp with time zone)
                     Heap Fetches: 0
               ->  Index Only Scan using _hyper_2_11_chunk_metrics_space_time_idx on _hyper_2_11_chunk (never executed)
                     Index Cond: ("time" > 'Fri Jan 07 00:00:00 2000 PST'::timestamp with time zone)
                     Heap Fetches: 0
               ->  Index Only Scan using _hyper_2_12_chunk_metrics_space_time_idx on _hyper_2_12_chunk (never executed)
                     Index Cond: ("time" > 'Fri Jan 07 00:00:00 2000 PST'::timestamp with time zone)
                     Heap Fetches: 0
(25 rows)

:PREFIX SELECT
  time
FROM :TEST_TABLE
WHERE time > '2000-01-07'
ORDER BY time DESC LIMIT 1;
                                                               QUERY PLAN                                                               
----------------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=1 loops=1)
   ->  Custom Scan (ChunkAppend) on metrics_space (actual rows=1 loops=1)
         Order: metrics_space."time" DESC
         ->  Merge Append (actual rows=1 loops=1)
               Sort Key: _hyper_2_12_chunk."time" DESC
               ->  Index Only Scan Backward using _hyper_2_12_chunk_metrics_space_time_idx on _hyper_2_12_chunk (actual rows=1 loops=1)
                     Index Cond: ("time" > 'Fri Jan 07 00:00:00 2000 PST'::timestamp with time zone)
                     Heap Fetches: 1
               ->  Index Only Scan Backward using _hyper_2_11_chunk_metrics_space_time_idx on _hyper_2_11_chunk (actual rows=1 loops=1)
                     Index Cond: ("time" > 'Fri Jan 07 00:00:00 2000 PST'::timestamp with time zone)
                     Heap Fetches: 1
               ->  Index Only Scan Backward using _hyper_2_10_chunk_metrics_space_time_idx on _hyper_2_10_chunk (actual rows=1 loops=1)
                     Index Cond: ("time" > 'Fri Jan 07 00:00:00 2000 PST'::timestamp with time zone)
                     Heap Fetches: 1
         ->  Merge Append (never executed)
               Sort Key: _hyper_2_9_chunk."time" DESC
               ->  Index Only Scan Backward using _hyper_2_9_chunk_metrics_space_time_idx on _hyper_2_9_chunk (never executed)
                     Index Cond: ("time" > 'Fri Jan 07 00:00:00 2000 PST'::timestamp with time zone)
                     Heap Fetches: 0
               ->  Index Only Scan Backward using _hyper_2_8_chunk_metrics_space_time_idx on _hyper_2_8_chunk (never executed)
                     Index Cond: ("time" > 'Fri Jan 07 00:00:00 2000 PST'::timestamp with time zone)
                     Heap Fetches: 0
               ->  Index Only Scan Backward using _hyper_2_7_chunk_metrics_space_time_idx on _hyper_2_7_chunk (never executed)
                     Index Cond: ("time" > 'Fri Jan 07 00:00:00 2000 PST'::timestamp with time zone)
                     Heap Fetches: 0
(25 rows)

-- test interaction with runtime exclusion
:PREFIX SELECT
  time
FROM :TEST_TABLE
WHERE time > '2000-01-08'::text::timestamptz
ORDER BY time ASC LIMIT 1;
                                                         QUERY PLAN                                                          
-----------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=1 loops=1)
   ->  Custom Scan (ChunkAppend) on metrics_space (actual rows=1 loops=1)
         Order: metrics_space."time"
         ->  Merge Append (actual rows=0 loops=1)
               Sort Key: _hyper_2_4_chunk."time"
               ->  Index Only Scan using _hyper_2_4_chunk_metrics_space_time_idx on _hyper_2_4_chunk (actual rows=0 loops=1)
                     Index Cond: ("time" > ('2000-01-08'::cstring)::timestamp with time zone)
                     Heap Fetches: 0
               ->  Index Only Scan using _hyper_2_5_chunk_metrics_space_time_idx on _hyper_2_5_chunk (actual rows=0 loops=1)
                     Index Cond: ("time" > ('2000-01-08'::cstring)::timestamp with time zone)
                     Heap Fetches: 0
               ->  Index Only Scan using _hyper_2_6_chunk_metrics_space_time_idx on _hyper_2_6_chunk (actual rows=0 loops=1)
                     Index Cond: ("time" > ('2000-01-08'::cstring)::timestamp with time zone)
                     Heap Fetches: 0
         ->  Merge Append (actual rows=1 loops=1)
               Sort Key: _hyper_2_7_chunk."time"
               ->  Index Only Scan using _hyper_2_7_chunk_metrics_space_time_idx on _hyper_2_7_chunk (actual rows=1 loops=1)
                     Index Cond: ("time" > ('2000-01-08'::cstring)::timestamp with time zone)
                     Heap Fetches: 1
               ->  Index Only Scan using _hyper_2_8_chunk_metrics_space_time_idx on _hyper_2_8_chunk (actual rows=1 loops=1)
                     Index Cond: ("time" > ('2000-01-08'::cstring)::timestamp with time zone)
                     Heap Fetches: 1
               ->  Index Only Scan using _hyper_2_9_chunk_metrics_space_time_idx on _hyper_2_9_chunk (actual rows=1 loops=1)
                     Index Cond: ("time" > ('2000-01-08'::cstring)::timestamp with time zone)
                     Heap Fetches: 1
         ->  Merge Append (never executed)
               Sort Key: _hyper_2_10_chunk."time"
               ->  Index Only Scan using _hyper_2_10_chunk_metrics_space_time_idx on _hyper_2_10_chunk (never executed)
                     Index Cond: ("time" > ('2000-01-08'::cstring)::timestamp with time zone)
                     Heap Fetches: 0
               ->  Index Only Scan using _hyper_2_11_chunk_metrics_space_time_idx on _hyper_2_11_chunk (never executed)
                     Index Cond: ("time" > ('2000-01-08'::cstring)::timestamp with time zone)
                     Heap Fetches: 0
               ->  Index Only Scan using _hyper_2_12_chunk_metrics_space_time_idx on _hyper_2_12_chunk (never executed)
                     Index Cond: ("time" > ('2000-01-08'::cstring)::timestamp with time zone)
                     Heap Fetches: 0
(36 rows)

:PREFIX SELECT
  time
FROM :TEST_TABLE
WHERE time < '2000-01-08'::text::timestamptz
ORDER BY time ASC LIMIT 1;
                                                         QUERY PLAN                                                          
-----------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=1 loops=1)
   ->  Custom Scan (ChunkAppend) on metrics_space (actual rows=1 loops=1)
         Order: metrics_space."time"
         ->  Merge Append (actual rows=1 loops=1)
               Sort Key: _hyper_2_4_chunk."time"
               ->  Index Only Scan using _hyper_2_4_chunk_metrics_space_time_idx on _hyper_2_4_chunk (actual rows=1 loops=1)
                     Index Cond: ("time" < ('2000-01-08'::cstring)::timestamp with time zone)
                     Heap Fetches: 1
               ->  Index Only Scan using _hyper_2_5_chunk_metrics_space_time_idx on _hyper_2_5_chunk (actual rows=1 loops=1)
                     Index Cond: ("time" < ('2000-01-08'::cstring)::timestamp with time zone)
                     Heap Fetches: 1
               ->  Index Only Scan using _hyper_2_6_chunk_metrics_space_time_idx on _hyper_2_6_chunk (actual rows=1 loops=1)
                     Index Cond: ("time" < ('2000-01-08'::cstring)::timestamp with time zone)
                     Heap Fetches: 1
         ->  Merge Append (never executed)
               Sort Key: _hyper_2_7_chunk."time"
               ->  Index Only Scan using _hyper_2_7_chunk_metrics_space_time_idx on _hyper_2_7_chunk (never executed)
                     Index Cond: ("time" < ('2000-01-08'::cstring)::timestamp with time zone)
                     Heap Fetches: 0
               ->  Index Only Scan using _hyper_2_8_chunk_metrics_space_time_idx on _hyper_2_8_chunk (never executed)
                     Index Cond: ("time" < ('2000-01-08'::cstring)::timestamp with time zone)
                     Heap Fetches: 0
               ->  Index Only Scan using _hyper_2_9_chunk_metrics_space_time_idx on _hyper_2_9_chunk (never executed)
                     Index Cond: ("time" < ('2000-01-08'::cstring)::timestamp with time zone)
                     Heap Fetches: 0
         ->  Merge Append (never executed)
               Sort Key: _hyper_2_10_chunk."time"
               ->  Index Only Scan using _hyper_2_10_chunk_metrics_space_time_idx on _hyper_2_10_chunk (never executed)
                     Index Cond: ("time" < ('2000-01-08'::cstring)::timestamp with time zone)
                     Heap Fetches: 0
               ->  Index Only Scan using _hyper_2_11_chunk_metrics_space_time_idx on _hyper_2_11_chunk (never executed)
                     Index Cond: ("time" < ('2000-01-08'::cstring)::timestamp with time zone)
                     Heap Fetches: 0
               ->  Index Only Scan using _hyper_2_12_chunk_metrics_space_time_idx on _hyper_2_12_chunk (never executed)
                     Index Cond: ("time" < ('2000-01-08'::cstring)::timestamp with time zone)
                     Heap Fetches: 0
(36 rows)

-- test constraint exclusion
:PREFIX SELECT
  time
FROM :TEST_TABLE
WHERE time > '2000-01-08'::text::timestamptz AND time < '2000-01-10'
ORDER BY time ASC LIMIT 1;
                                                                               QUERY PLAN                                                                               
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=1 loops=1)
   ->  Custom Scan (ChunkAppend) on metrics_space (actual rows=1 loops=1)
         Order: metrics_space."time"
         ->  Merge Append (actual rows=0 loops=1)
               Sort Key: _hyper_2_4_chunk."time"
               ->  Index Only Scan using _hyper_2_4_chunk_metrics_space_time_idx on _hyper_2_4_chunk (actual rows=0 loops=1)
                     Index Cond: (("time" > ('2000-01-08'::cstring)::timestamp with time zone) AND ("time" < 'Mon Jan 10 00:00:00 2000 PST'::timestamp with time zone))
                     Heap Fetches: 0
               ->  Index Only Scan using _hyper_2_5_chunk_metrics_space_time_idx on _hyper_2_5_chunk (actual rows=0 loops=1)
                     Index Cond: (("time" > ('2000-01-08'::cstring)::timestamp with time zone) AND ("time" < 'Mon Jan 10 00:00:00 2000 PST'::timestamp with time zone))
                     Heap Fetches: 0
               ->  Index Only Scan using _hyper_2_6_chunk_metrics_space_time_idx on _hyper_2_6_chunk (actual rows=0 loops=1)
                     Index Cond: (("time" > ('2000-01-08'::cstring)::timestamp with time zone) AND ("time" < 'Mon Jan 10 00:00:00 2000 PST'::timestamp with time zone))
                     Heap Fetches: 0
         ->  Merge Append (actual rows=1 loops=1)
               Sort Key: _hyper_2_7_chunk."time"
               ->  Index Only Scan using _hyper_2_7_chunk_metrics_space_time_idx on _hyper_2_7_chunk (actual rows=1 loops=1)
                     Index Cond: (("time" > ('2000-01-08'::cstring)::timestamp with time zone) AND ("time" < 'Mon Jan 10 00:00:00 2000 PST'::timestamp with time zone))
                     Heap Fetches: 1
               ->  Index Only Scan using _hyper_2_8_chunk_metrics_space_time_idx on _hyper_2_8_chunk (actual rows=1 loops=1)
                     Index Cond: (("time" > ('2000-01-08'::cstring)::timestamp with time zone) AND ("time" < 'Mon Jan 10 00:00:00 2000 PST'::timestamp with time zone))
                     Heap Fetches: 1
               ->  Index Only Scan using _hyper_2_9_chunk_metrics_space_time_idx on _hyper_2_9_chunk (actual rows=1 loops=1)
                     Index Cond: (("time" > ('2000-01-08'::cstring)::timestamp with time zone) AND ("time" < 'Mon Jan 10 00:00:00 2000 PST'::timestamp with time zone))
                     Heap Fetches: 1
(25 rows)

:PREFIX SELECT
  time
FROM :TEST_TABLE
WHERE time < '2000-01-08'::text::timestamptz AND time > '2000-01-07'
ORDER BY time ASC LIMIT 1;
                                                                               QUERY PLAN                                                                               
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=1 loops=1)
   ->  Custom Scan (ChunkAppend) on metrics_space (actual rows=1 loops=1)
         Order: metrics_space."time"
         ->  Merge Append (actual rows=1 loops=1)
               Sort Key: _hyper_2_7_chunk."time"
               ->  Index Only Scan using _hyper_2_7_chunk_metrics_space_time_idx on _hyper_2_7_chunk (actual rows=1 loops=1)
                     Index Cond: (("time" < ('2000-01-08'::cstring)::timestamp with time zone) AND ("time" > 'Fri Jan 07 00:00:00 2000 PST'::timestamp with time zone))
                     Heap Fetches: 1
               ->  Index Only Scan using _hyper_2_8_chunk_metrics_space_time_idx on _hyper_2_8_chunk (actual rows=1 loops=1)
                     Index Cond: (("time" < ('2000-01-08'::cstring)::timestamp with time zone) AND ("time" > 'Fri Jan 07 00:00:00 2000 PST'::timestamp with time zone))
                     Heap Fetches: 1
               ->  Index Only Scan using _hyper_2_9_chunk_metrics_space_time_idx on _hyper_2_9_chunk (actual rows=1 loops=1)
                     Index Cond: (("time" < ('2000-01-08'::cstring)::timestamp with time zone) AND ("time" > 'Fri Jan 07 00:00:00 2000 PST'::timestamp with time zone))
                     Heap Fetches: 1
         ->  Merge Append (never executed)
               Sort Key: _hyper_2_10_chunk."time"
               ->  Index Only Scan using _hyper_2_10_chunk_metrics_space_time_idx on _hyper_2_10_chunk (never executed)
                     Index Cond: (("time" < ('2000-01-08'::cstring)::timestamp with time zone) AND ("time" > 'Fri Jan 07 00:00:00 2000 PST'::timestamp with time zone))
                     Heap Fetches: 0
               ->  Index Only Scan using _hyper_2_11_chunk_metrics_space_time_idx on _hyper_2_11_chunk (never executed)
                     Index Cond: (("time" < ('2000-01-08'::cstring)::timestamp with time zone) AND ("time" > 'Fri Jan 07 00:00:00 2000 PST'::timestamp with time zone))
                     Heap Fetches: 0
               ->  Index Only Scan using _hyper_2_12_chunk_metrics_space_time_idx on _hyper_2_12_chunk (never executed)
                     Index Cond: (("time" < ('2000-01-08'::cstring)::timestamp with time zone) AND ("time" > 'Fri Jan 07 00:00:00 2000 PST'::timestamp with time zone))
                     Heap Fetches: 0
(25 rows)

-- min/max queries
:PREFIX SELECT max(time) FROM :TEST_TABLE;
                                                                   QUERY PLAN                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------
 Result (actual rows=1 loops=1)
   InitPlan 1 (returns $0)
     ->  Limit (actual rows=1 loops=1)
           ->  Custom Scan (ChunkAppend) on metrics_space (actual rows=1 loops=1)
                 Order: metrics_space."time" DESC
                 ->  Merge Append (actual rows=1 loops=1)
                       Sort Key: _hyper_2_12_chunk."time" DESC
                       ->  Index Only Scan Backward using _hyper_2_12_chunk_metrics_space_time_idx on _hyper_2_12_chunk (actual rows=1 loops=1)
                             Index Cond: ("time" IS NOT NULL)
                             Heap Fetches: 1
                       ->  Index Only Scan Backward using _hyper_2_11_chunk_metrics_space_time_idx on _hyper_2_11_chunk (actual rows=1 loops=1)
                             Index Cond: ("time" IS NOT NULL)
                             Heap Fetches: 1
                       ->  Index Only Scan Backward using _hyper_2_10_chunk_metrics_space_time_idx on _hyper_2_10_chunk (actual rows=1 loops=1)
                             Index Cond: ("time" IS NOT NULL)
                             Heap Fetches: 1
                 ->  Merge Append (never executed)
                       Sort Key: _hyper_2_9_chunk."time" DESC
                       ->  Index Only Scan Backward using _hyper_2_9_chunk_metrics_space_time_idx on _hyper_2_9_chunk (never executed)
                             Index Cond: ("time" IS NOT NULL)
                             Heap Fetches: 0
                       ->  Index Only Scan Backward using _hyper_2_8_chunk_metrics_space_time_idx on _hyper_2_8_chunk (never executed)
                             Index Cond: ("time" IS NOT NULL)
                             Heap Fetches: 0
                       ->  Index Only Scan Backward using _hyper_2_7_chunk_metrics_space_time_idx on _hyper_2_7_chunk (never executed)
                             Index Cond: ("time" IS NOT NULL)
                             Heap Fetches: 0
                 ->  Merge Append (never executed)
                       Sort Key: _hyper_2_6_chunk."time" DESC
                       ->  Index Only Scan Backward using _hyper_2_6_chunk_metrics_space_time_idx on _hyper_2_6_chunk (never executed)
                             Index Cond: ("time" IS NOT NULL)
                             Heap Fetches: 0
                       ->  Index Only Scan Backward using _hyper_2_5_chunk_metrics_space_time_idx on _hyper_2_5_chunk (never executed)
                             Index Cond: ("time" IS NOT NULL)
                             Heap Fetches: 0
                       ->  Index Only Scan Backward using _hyper_2_4_chunk_metrics_space_time_idx on _hyper_2_4_chunk (never executed)
                             Index Cond: ("time" IS NOT NULL)
                             Heap Fetches: 0
(38 rows)

:PREFIX SELECT min(time) FROM :TEST_TABLE;
                                                             QUERY PLAN                                                              
-------------------------------------------------------------------------------------------------------------------------------------
 Result (actual rows=1 loops=1)
   InitPlan 1 (returns $0)
     ->  Limit (actual rows=1 loops=1)
           ->  Custom Scan (ChunkAppend) on metrics_space (actual rows=1 loops=1)
                 Order: metrics_space."time"
                 ->  Merge Append (actual rows=1 loops=1)
                       Sort Key: _hyper_2_4_chunk."time"
                       ->  Index Only Scan using _hyper_2_4_chunk_metrics_space_time_idx on _hyper_2_4_chunk (actual rows=1 loops=1)
                             Index Cond: ("time" IS NOT NULL)
                             Heap Fetches: 1
                       ->  Index Only Scan using _hyper_2_5_chunk_metrics_space_time_idx on _hyper_2_5_chunk (actual rows=1 loops=1)
                             Index Cond: ("time" IS NOT NULL)
                             Heap Fetches: 1
                       ->  Index Only Scan using _hyper_2_6_chunk_metrics_space_time_idx on _hyper_2_6_chunk (actual rows=1 loops=1)
                             Index Cond: ("time" IS NOT NULL)
                             Heap Fetches: 1
                 ->  Merge Append (never executed)
                       Sort Key: _hyper_2_7_chunk."time"
                       ->  Index Only Scan using _hyper_2_7_chunk_metrics_space_time_idx on _hyper_2_7_chunk (never executed)
                             Index Cond: ("time" IS NOT NULL)
                             Heap Fetches: 0
                       ->  Index Only Scan using _hyper_2_8_chunk_metrics_space_time_idx on _hyper_2_8_chunk (never executed)
                             Index Cond: ("time" IS NOT NULL)
                             Heap Fetches: 0
                       ->  Index Only Scan using _hyper_2_9_chunk_metrics_space_time_idx on _hyper_2_9_chunk (never executed)
                             Index Cond: ("time" IS NOT NULL)
                             Heap Fetches: 0
                 ->  Merge Append (never executed)
                       Sort Key: _hyper_2_10_chunk."time"
                       ->  Index Only Scan using _hyper_2_10_chunk_metrics_space_time_idx on _hyper_2_10_chunk (never executed)
                             Index Cond: ("time" IS NOT NULL)
                             Heap Fetches: 0
                       ->  Index Only Scan using _hyper_2_11_chunk_metrics_space_time_idx on _hyper_2_11_chunk (never executed)
                             Index Cond: ("time" IS NOT NULL)
                             Heap Fetches: 0
                       ->  Index Only Scan using _hyper_2_12_chunk_metrics_space_time_idx on _hyper_2_12_chunk (never executed)
                             Index Cond: ("time" IS NOT NULL)
                             Heap Fetches: 0
(38 rows)

-- test first/last (doesn't use ordered append yet)
:PREFIX SELECT first(time, time) FROM :TEST_TABLE;
                                                              QUERY PLAN                                                               
---------------------------------------------------------------------------------------------------------------------------------------
 Result (actual rows=1 loops=1)
   InitPlan 1 (returns $0)
     ->  Limit (actual rows=1 loops=1)
           ->  Result (actual rows=1 loops=1)
                 ->  Merge Append (actual rows=1 loops=1)
                       Sort Key: _hyper_2_4_chunk."time"
                       ->  Index Only Scan using _hyper_2_4_chunk_metrics_space_time_idx on _hyper_2_4_chunk (actual rows=1 loops=1)
                             Index Cond: ("time" IS NOT NULL)
                             Heap Fetches: 1
                       ->  Index Only Scan using _hyper_2_5_chunk_metrics_space_time_idx on _hyper_2_5_chunk (actual rows=1 loops=1)
                             Index Cond: ("time" IS NOT NULL)
                             Heap Fetches: 1
                       ->  Index Only Scan using _hyper_2_6_chunk_metrics_space_time_idx on _hyper_2_6_chunk (actual rows=1 loops=1)
                             Index Cond: ("time" IS NOT NULL)
                             Heap Fetches: 1
                       ->  Index Only Scan using _hyper_2_7_chunk_metrics_space_time_idx on _hyper_2_7_chunk (actual rows=1 loops=1)
                             Index Cond: ("time" IS NOT NULL)
                             Heap Fetches: 1
                       ->  Index Only Scan using _hyper_2_8_chunk_metrics_space_time_idx on _hyper_2_8_chunk (actual rows=1 loops=1)
                             Index Cond: ("time" IS NOT NULL)
                             Heap Fetches: 1
                       ->  Index Only Scan using _hyper_2_9_chunk_metrics_space_time_idx on _hyper_2_9_chunk (actual rows=1 loops=1)
                             Index Cond: ("time" IS NOT NULL)
                             Heap Fetches: 1
                       ->  Index Only Scan using _hyper_2_10_chunk_metrics_space_time_idx on _hyper_2_10_chunk (actual rows=1 loops=1)
                             Index Cond: ("time" IS NOT NULL)
                             Heap Fetches: 1
                       ->  Index Only Scan using _hyper_2_11_chunk_metrics_space_time_idx on _hyper_2_11_chunk (actual rows=1 loops=1)
                             Index Cond: ("time" IS NOT NULL)
                             Heap Fetches: 1
                       ->  Index Only Scan using _hyper_2_12_chunk_metrics_space_time_idx on _hyper_2_12_chunk (actual rows=1 loops=1)
                             Index Cond: ("time" IS NOT NULL)
                             Heap Fetches: 1
(33 rows)

:PREFIX SELECT last(time, time) FROM :TEST_TABLE;
                                                                   QUERY PLAN                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------
 Result (actual rows=1 loops=1)
   InitPlan 1 (returns $0)
     ->  Limit (actual rows=1 loops=1)
           ->  Result (actual rows=1 loops=1)
                 ->  Merge Append (actual rows=1 loops=1)
                       Sort Key: _hyper_2_4_chunk."time" DESC
                       ->  Index Only Scan Backward using _hyper_2_4_chunk_metrics_space_time_idx on _hyper_2_4_chunk (actual rows=1 loops=1)
                             Index Cond: ("time" IS NOT NULL)
                             Heap Fetches: 1
                       ->  Index Only Scan Backward using _hyper_2_5_chunk_metrics_space_time_idx on _hyper_2_5_chunk (actual rows=1 loops=1)
                             Index Cond: ("time" IS NOT NULL)
                             Heap Fetches: 1
                       ->  Index Only Scan Backward using _hyper_2_6_chunk_metrics_space_time_idx on _hyper_2_6_chunk (actual rows=1 loops=1)
                             Index Cond: ("time" IS NOT NULL)
                             Heap Fetches: 1
                       ->  Index Only Scan Backward using _hyper_2_7_chunk_metrics_space_time_idx on _hyper_2_7_chunk (actual rows=1 loops=1)
                             Index Cond: ("time" IS NOT NULL)
                             Heap Fetches: 1
                       ->  Index Only Scan Backward using _hyper_2_8_chunk_metrics_space_time_idx on _hyper_2_8_chunk (actual rows=1 loops=1)
                             Index Cond: ("time" IS NOT NULL)
                             Heap Fetches: 1
                       ->  Index Only Scan Backward using _hyper_2_9_chunk_metrics_space_time_idx on _hyper_2_9_chunk (actual rows=1 loops=1)
                             Index Cond: ("time" IS NOT NULL)
                             Heap Fetches: 1
                       ->  Index Only Scan Backward using _hyper_2_10_chunk_metrics_space_time_idx on _hyper_2_10_chunk (actual rows=1 loops=1)
                             Index Cond: ("time" IS NOT NULL)
                             Heap Fetches: 1
                       ->  Index Only Scan Backward using _hyper_2_11_chunk_metrics_space_time_idx on _hyper_2_11_chunk (actual rows=1 loops=1)
                             Index Cond: ("time" IS NOT NULL)
                             Heap Fetches: 1
                       ->  Index Only Scan Backward using _hyper_2_12_chunk_metrics_space_time_idx on _hyper_2_12_chunk (actual rows=1 loops=1)
                             Index Cond: ("time" IS NOT NULL)
                             Heap Fetches: 1
(33 rows)

-- test query with time_bucket
:PREFIX SELECT
  time_bucket('1d',time)
FROM :TEST_TABLE
ORDER BY time ASC LIMIT 1;
                                                         QUERY PLAN                                                          
-----------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=1 loops=1)
   ->  Custom Scan (ChunkAppend) on metrics_space (actual rows=1 loops=1)
         Order: metrics_space."time"
         ->  Merge Append (actual rows=1 loops=1)
               Sort Key: _hyper_2_4_chunk."time"
               ->  Index Only Scan using _hyper_2_4_chunk_metrics_space_time_idx on _hyper_2_4_chunk (actual rows=1 loops=1)
                     Heap Fetches: 1
               ->  Index Only Scan using _hyper_2_5_chunk_metrics_space_time_idx on _hyper_2_5_chunk (actual rows=1 loops=1)
                     Heap Fetches: 1
               ->  Index Only Scan using _hyper_2_6_chunk_metrics_space_time_idx on _hyper_2_6_chunk (actual rows=1 loops=1)
                     Heap Fetches: 1
         ->  Merge Append (never executed)
               Sort Key: _hyper_2_7_chunk."time"
               ->  Index Only Scan using _hyper_2_7_chunk_metrics_space_time_idx on _hyper_2_7_chunk (never executed)
                     Heap Fetches: 0
               ->  Index Only Scan using _hyper_2_8_chunk_metrics_space_time_idx on _hyper_2_8_chunk (never executed)
                     Heap Fetches: 0
               ->  Index Only Scan using _hyper_2_9_chunk_metrics_space_time_idx on _hyper_2_9_chunk (never executed)
                     Heap Fetches: 0
         ->  Merge Append (never executed)
               Sort Key: _hyper_2_10_chunk."time"
               ->  Index Only Scan using _hyper_2_10_chunk_metrics_space_time_idx on _hyper_2_10_chunk (never executed)
                     Heap Fetches: 0
               ->  Index Only Scan using _hyper_2_11_chunk_metrics_space_time_idx on _hyper_2_11_chunk (never executed)
                     Heap Fetches: 0
               ->  Index Only Scan using _hyper_2_12_chunk_metrics_space_time_idx on _hyper_2_12_chunk (never executed)
                     Heap Fetches: 0
(27 rows)

-- test query with ORDER BY time_bucket
:PREFIX SELECT
  time_bucket('1d',time)
FROM :TEST_TABLE
ORDER BY 1 LIMIT 1;
                                                         QUERY PLAN                                                          
-----------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=1 loops=1)
   ->  Custom Scan (ChunkAppend) on metrics_space (actual rows=1 loops=1)
         Order: time_bucket('@ 1 day'::interval, metrics_space."time")
         ->  Merge Append (actual rows=1 loops=1)
               Sort Key: (time_bucket('@ 1 day'::interval, _hyper_2_4_chunk."time"))
               ->  Index Only Scan using _hyper_2_4_chunk_metrics_space_time_idx on _hyper_2_4_chunk (actual rows=1 loops=1)
                     Heap Fetches: 1
               ->  Index Only Scan using _hyper_2_5_chunk_metrics_space_time_idx on _hyper_2_5_chunk (actual rows=1 loops=1)
                     Heap Fetches: 1
               ->  Index Only Scan using _hyper_2_6_chunk_metrics_space_time_idx on _hyper_2_6_chunk (actual rows=1 loops=1)
                     Heap Fetches: 1
         ->  Merge Append (never executed)
               Sort Key: (time_bucket('@ 1 day'::interval, _hyper_2_7_chunk."time"))
               ->  Index Only Scan using _hyper_2_7_chunk_metrics_space_time_idx on _hyper_2_7_chunk (never executed)
                     Heap Fetches: 0
               ->  Index Only Scan using _hyper_2_8_chunk_metrics_space_time_idx on _hyper_2_8_chunk (never executed)
                     Heap Fetches: 0
               ->  Index Only Scan using _hyper_2_9_chunk_metrics_space_time_idx on _hyper_2_9_chunk (never executed)
                     Heap Fetches: 0
         ->  Merge Append (never executed)
               Sort Key: (time_bucket('@ 1 day'::interval, _hyper_2_10_chunk."time"))
               ->  Index Only Scan using _hyper_2_10_chunk_metrics_space_time_idx on _hyper_2_10_chunk (never executed)
                     Heap Fetches: 0
               ->  Index Only Scan using _hyper_2_11_chunk_metrics_space_time_idx on _hyper_2_11_chunk (never executed)
                     Heap Fetches: 0
               ->  Index Only Scan using _hyper_2_12_chunk_metrics_space_time_idx on _hyper_2_12_chunk (never executed)
                     Heap Fetches: 0
(27 rows)

-- test query with ORDER BY time_bucket, device_id
-- must not use ordered append
:PREFIX SELECT
  time_bucket('1d',time), device_id, v0
FROM :TEST_TABLE
ORDER BY time_bucket('1d',time), device_id LIMIT 1;
                                                QUERY PLAN                                                 
-----------------------------------------------------------------------------------------------------------
 Limit (actual rows=1 loops=1)
   ->  Sort (actual rows=1 loops=1)
         Sort Key: (time_bucket('@ 1 day'::interval, _hyper_2_4_chunk."time")), _hyper_2_4_chunk.device_id
         Sort Method: top-N heapsort 
         ->  Result (actual rows=68370 loops=1)
               ->  Append (actual rows=68370 loops=1)
                     ->  Seq Scan on _hyper_2_4_chunk (actual rows=3598 loops=1)
                     ->  Seq Scan on _hyper_2_5_chunk (actual rows=10794 loops=1)
                     ->  Seq Scan on _hyper_2_6_chunk (actual rows=3598 loops=1)
                     ->  Seq Scan on _hyper_2_7_chunk (actual rows=5038 loops=1)
                     ->  Seq Scan on _hyper_2_8_chunk (actual rows=15114 loops=1)
                     ->  Seq Scan on _hyper_2_9_chunk (actual rows=5038 loops=1)
                     ->  Seq Scan on _hyper_2_10_chunk (actual rows=5038 loops=1)
                     ->  Seq Scan on _hyper_2_11_chunk (actual rows=15114 loops=1)
                     ->  Seq Scan on _hyper_2_12_chunk (actual rows=5038 loops=1)
(15 rows)

-- test query with ORDER BY date_trunc
:PREFIX SELECT
  time_bucket('1d',time)
FROM :TEST_TABLE
ORDER BY date_trunc('day', time) LIMIT 1;
                                                         QUERY PLAN                                                          
-----------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=1 loops=1)
   ->  Custom Scan (ChunkAppend) on metrics_space (actual rows=1 loops=1)
         Order: date_trunc('day'::text, metrics_space."time")
         ->  Merge Append (actual rows=1 loops=1)
               Sort Key: (date_trunc('day'::text, _hyper_2_4_chunk."time"))
               ->  Index Only Scan using _hyper_2_4_chunk_metrics_space_time_idx on _hyper_2_4_chunk (actual rows=1 loops=1)
                     Heap Fetches: 1
               ->  Index Only Scan using _hyper_2_5_chunk_metrics_space_time_idx on _hyper_2_5_chunk (actual rows=1 loops=1)
                     Heap Fetches: 1
               ->  Index Only Scan using _hyper_2_6_chunk_metrics_space_time_idx on _hyper_2_6_chunk (actual rows=1 loops=1)
                     Heap Fetches: 1
         ->  Merge Append (never executed)
               Sort Key: (date_trunc('day'::text, _hyper_2_7_chunk."time"))
               ->  Index Only Scan using _hyper_2_7_chunk_metrics_space_time_idx on _hyper_2_7_chunk (never executed)
                     Heap Fetches: 0
               ->  Index Only Scan using _hyper_2_8_chunk_metrics_space_time_idx on _hyper_2_8_chunk (never executed)
                     Heap Fetches: 0
               ->  Index Only Scan using _hyper_2_9_chunk_metrics_space_time_idx on _hyper_2_9_chunk (never executed)
                     Heap Fetches: 0
         ->  Merge Append (never executed)
               Sort Key: (date_trunc('day'::text, _hyper_2_10_chunk."time"))
               ->  Index Only Scan using _hyper_2_10_chunk_metrics_space_time_idx on _hyper_2_10_chunk (never executed)
                     Heap Fetches: 0
               ->  Index Only Scan using _hyper_2_11_chunk_metrics_space_time_idx on _hyper_2_11_chunk (never executed)
                     Heap Fetches: 0
               ->  Index Only Scan using _hyper_2_12_chunk_metrics_space_time_idx on _hyper_2_12_chunk (never executed)
                     Heap Fetches: 0
(27 rows)

-- test query with ORDER BY date_trunc
:PREFIX SELECT
  date_trunc('day',time), device_id, v0
FROM :TEST_TABLE
ORDER BY 1 LIMIT 1;
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=1 loops=1)
   ->  Custom Scan (ChunkAppend) on metrics_space (actual rows=1 loops=1)
         Order: date_trunc('day'::text, metrics_space."time")
         ->  Merge Append (actual rows=1 loops=1)
               Sort Key: (date_trunc('day'::text, _hyper_2_4_chunk."time"))
               ->  Index Scan using _hyper_2_4_chunk_metrics_space_time_idx on _hyper_2_4_chunk (actual rows=1 loops=1)
               ->  Index Scan using _hyper_2_5_chunk_metrics_space_time_idx on _hyper_2_5_chunk (actual rows=1 loops=1)
               ->  Index Scan using _hyper_2_6_chunk_metrics_space_time_idx on _hyper_2_6_chunk (actual rows=1 loops=1)
         ->  Merge Append (never executed)
               Sort Key: (date_trunc('day'::text, _hyper_2_7_chunk."time"))
               ->  Index Scan using _hyper_2_7_chunk_metrics_space_time_idx on _hyper_2_7_chunk (never executed)
               ->  Index Scan using _hyper_2_8_chunk_metrics_space_time_idx on _hyper_2_8_chunk (never executed)
               ->  Index Scan using _hyper_2_9_chunk_metrics_space_time_idx on _hyper_2_9_chunk (never executed)
         ->  Merge Append (never executed)
               Sort Key: (date_trunc('day'::text, _hyper_2_10_chunk."time"))
               ->  Index Scan using _hyper_2_10_chunk_metrics_space_time_idx on _hyper_2_10_chunk (never executed)
               ->  Index Scan using _hyper_2_11_chunk_metrics_space_time_idx on _hyper_2_11_chunk (never executed)
               ->  Index Scan using _hyper_2_12_chunk_metrics_space_time_idx on _hyper_2_12_chunk (never executed)
(18 rows)

-- test query with ORDER BY date_trunc, device_id
-- must not use ordered append
:PREFIX SELECT
  date_trunc('day',time), device_id, v0
FROM :TEST_TABLE
ORDER BY 1,2 LIMIT 1;
                                            QUERY PLAN                                            
--------------------------------------------------------------------------------------------------
 Limit (actual rows=1 loops=1)
   ->  Sort (actual rows=1 loops=1)
         Sort Key: (date_trunc('day'::text, _hyper_2_4_chunk."time")), _hyper_2_4_chunk.device_id
         Sort Method: top-N heapsort 
         ->  Result (actual rows=68370 loops=1)
               ->  Append (actual rows=68370 loops=1)
                     ->  Seq Scan on _hyper_2_4_chunk (actual rows=3598 loops=1)
                     ->  Seq Scan on _hyper_2_5_chunk (actual rows=10794 loops=1)
                     ->  Seq Scan on _hyper_2_6_chunk (actual rows=3598 loops=1)
                     ->  Seq Scan on _hyper_2_7_chunk (actual rows=5038 loops=1)
                     ->  Seq Scan on _hyper_2_8_chunk (actual rows=15114 loops=1)
                     ->  Seq Scan on _hyper_2_9_chunk (actual rows=5038 loops=1)
                     ->  Seq Scan on _hyper_2_10_chunk (actual rows=5038 loops=1)
                     ->  Seq Scan on _hyper_2_11_chunk (actual rows=15114 loops=1)
                     ->  Seq Scan on _hyper_2_12_chunk (actual rows=5038 loops=1)
(15 rows)

-- test query with now() should result in ordered ChunkAppend
:PREFIX SELECT time FROM :TEST_TABLE WHERE time < now() + '1 month'
ORDER BY time DESC limit 1;
                                                               QUERY PLAN                                                               
----------------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=1 loops=1)
   ->  Custom Scan (ChunkAppend) on metrics_space (actual rows=1 loops=1)
         Order: metrics_space."time" DESC
         ->  Merge Append (actual rows=1 loops=1)
               Sort Key: _hyper_2_12_chunk."time" DESC
               ->  Index Only Scan Backward using _hyper_2_12_chunk_metrics_space_time_idx on _hyper_2_12_chunk (actual rows=1 loops=1)
                     Index Cond: ("time" < (now() + '@ 1 mon'::interval))
                     Heap Fetches: 1
               ->  Index Only Scan Backward using _hyper_2_11_chunk_metrics_space_time_idx on _hyper_2_11_chunk (actual rows=1 loops=1)
                     Index Cond: ("time" < (now() + '@ 1 mon'::interval))
                     Heap Fetches: 1
               ->  Index Only Scan Backward using _hyper_2_10_chunk_metrics_space_time_idx on _hyper_2_10_chunk (actual rows=1 loops=1)
                     Index Cond: ("time" < (now() + '@ 1 mon'::interval))
                     Heap Fetches: 1
         ->  Merge Append (never executed)
               Sort Key: _hyper_2_9_chunk."time" DESC
               ->  Index Only Scan Backward using _hyper_2_9_chunk_metrics_space_time_idx on _hyper_2_9_chunk (never executed)
                     Index Cond: ("time" < (now() + '@ 1 mon'::interval))
                     Heap Fetches: 0
               ->  Index Only Scan Backward using _hyper_2_8_chunk_metrics_space_time_idx on _hyper_2_8_chunk (never executed)
                     Index Cond: ("time" < (now() + '@ 1 mon'::interval))
                     Heap Fetches: 0
               ->  Index Only Scan Backward using _hyper_2_7_chunk_metrics_space_time_idx on _hyper_2_7_chunk (never executed)
                     Index Cond: ("time" < (now() + '@ 1 mon'::interval))
                     Heap Fetches: 0
         ->  Merge Append (never executed)
               Sort Key: _hyper_2_6_chunk."time" DESC
               ->  Index Only Scan Backward using _hyper_2_6_chunk_metrics_space_time_idx on _hyper_2_6_chunk (never executed)
                     Index Cond: ("time" < (now() + '@ 1 mon'::interval))
                     Heap Fetches: 0
               ->  Index Only Scan Backward using _hyper_2_5_chunk_metrics_space_time_idx on _hyper_2_5_chunk (never executed)
                     Index Cond: ("time" < (now() + '@ 1 mon'::interval))
                     Heap Fetches: 0
               ->  Index Only Scan Backward using _hyper_2_4_chunk_metrics_space_time_idx on _hyper_2_4_chunk (never executed)
                     Index Cond: ("time" < (now() + '@ 1 mon'::interval))
                     Heap Fetches: 0
(36 rows)

-- test CTE
:PREFIX WITH i AS (SELECT time FROM :TEST_TABLE WHERE time < now() ORDER BY time DESC limit 100)
SELECT * FROM i;
                                                                   QUERY PLAN                                                                    
-------------------------------------------------------------------------------------------------------------------------------------------------
 CTE Scan on i (actual rows=100 loops=1)
   CTE i
     ->  Limit (actual rows=100 loops=1)
           ->  Custom Scan (ChunkAppend) on metrics_space (actual rows=100 loops=1)
                 Order: metrics_space."time" DESC
                 ->  Merge Append (actual rows=100 loops=1)
                       Sort Key: _hyper_2_12_chunk."time" DESC
                       ->  Index Only Scan Backward using _hyper_2_12_chunk_metrics_space_time_idx on _hyper_2_12_chunk (actual rows=21 loops=1)
                             Index Cond: ("time" < now())
                             Heap Fetches: 21
                       ->  Index Only Scan Backward using _hyper_2_11_chunk_metrics_space_time_idx on _hyper_2_11_chunk (actual rows=60 loops=1)
                             Index Cond: ("time" < now())
                             Heap Fetches: 60
                       ->  Index Only Scan Backward using _hyper_2_10_chunk_metrics_space_time_idx on _hyper_2_10_chunk (actual rows=21 loops=1)
                             Index Cond: ("time" < now())
                             Heap Fetches: 21
                 ->  Merge Append (never executed)
                       Sort Key: _hyper_2_9_chunk."time" DESC
                       ->  Index Only Scan Backward using _hyper_2_9_chunk_metrics_space_time_idx on _hyper_2_9_chunk (never executed)
                             Index Cond: ("time" < now())
                             Heap Fetches: 0
                       ->  Index Only Scan Backward using _hyper_2_8_chunk_metrics_space_time_idx on _hyper_2_8_chunk (never executed)
                             Index Cond: ("time" < now())
                             Heap Fetches: 0
                       ->  Index Only Scan Backward using _hyper_2_7_chunk_metrics_space_time_idx on _hyper_2_7_chunk (never executed)
                             Index Cond: ("time" < now())
                             Heap Fetches: 0
                 ->  Merge Append (never executed)
                       Sort Key: _hyper_2_6_chunk."time" DESC
                       ->  Index Only Scan Backward using _hyper_2_6_chunk_metrics_space_time_idx on _hyper_2_6_chunk (never executed)
                             Index Cond: ("time" < now())
                             Heap Fetches: 0
                       ->  Index Only Scan Backward using _hyper_2_5_chunk_metrics_space_time_idx on _hyper_2_5_chunk (never executed)
                             Index Cond: ("time" < now())
                             Heap Fetches: 0
                       ->  Index Only Scan Backward using _hyper_2_4_chunk_metrics_space_time_idx on _hyper_2_4_chunk (never executed)
                             Index Cond: ("time" < now())
                             Heap Fetches: 0
(38 rows)

-- test LATERAL with ordered append in the outer query
:PREFIX SELECT time, pg_typeof(l) FROM :TEST_TABLE, LATERAL(SELECT * FROM (VALUES (1),(2)) v) l ORDER BY time DESC limit 2;
                                                                  QUERY PLAN                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=2 loops=1)
   ->  Nested Loop (actual rows=2 loops=1)
         ->  Custom Scan (ChunkAppend) on metrics_space (actual rows=1 loops=1)
               Order: metrics_space."time" DESC
               ->  Merge Append (actual rows=1 loops=1)
                     Sort Key: _hyper_2_12_chunk."time" DESC
                     ->  Index Only Scan Backward using _hyper_2_12_chunk_metrics_space_time_idx on _hyper_2_12_chunk (actual rows=1 loops=1)
                           Heap Fetches: 1
                     ->  Index Only Scan Backward using _hyper_2_11_chunk_metrics_space_time_idx on _hyper_2_11_chunk (actual rows=1 loops=1)
                           Heap Fetches: 1
                     ->  Index Only Scan Backward using _hyper_2_10_chunk_metrics_space_time_idx on _hyper_2_10_chunk (actual rows=1 loops=1)
                           Heap Fetches: 1
               ->  Merge Append (never executed)
                     Sort Key: _hyper_2_9_chunk."time" DESC
                     ->  Index Only Scan Backward using _hyper_2_9_chunk_metrics_space_time_idx on _hyper_2_9_chunk (never executed)
                           Heap Fetches: 0
                     ->  Index Only Scan Backward using _hyper_2_8_chunk_metrics_space_time_idx on _hyper_2_8_chunk (never executed)
                           Heap Fetches: 0
                     ->  Index Only Scan Backward using _hyper_2_7_chunk_metrics_space_time_idx on _hyper_2_7_chunk (never executed)
                           Heap Fetches: 0
               ->  Merge Append (never executed)
                     Sort Key: _hyper_2_6_chunk."time" DESC
                     ->  Index Only Scan Backward using _hyper_2_6_chunk_metrics_space_time_idx on _hyper_2_6_chunk (never executed)
                           Heap Fetches: 0
                     ->  Index Only Scan Backward using _hyper_2_5_chunk_metrics_space_time_idx on _hyper_2_5_chunk (never executed)
                           Heap Fetches: 0
                     ->  Index Only Scan Backward using _hyper_2_4_chunk_metrics_space_time_idx on _hyper_2_4_chunk (never executed)
                           Heap Fetches: 0
         ->  Materialize (actual rows=2 loops=1)
               ->  Values Scan on "*VALUES*" (actual rows=2 loops=1)
(30 rows)

-- test LATERAL with ordered append in the lateral query
:PREFIX SELECT time, pg_typeof(v) FROM (VALUES (1),(2)) v, LATERAL(SELECT * FROM :TEST_TABLE ORDER BY time DESC limit 2) l;
                                                                        QUERY PLAN                                                                        
----------------------------------------------------------------------------------------------------------------------------------------------------------
 Nested Loop (actual rows=4 loops=1)
   ->  Values Scan on "*VALUES*" (actual rows=2 loops=1)
   ->  Materialize (actual rows=2 loops=2)
         ->  Subquery Scan on l (actual rows=2 loops=1)
               ->  Limit (actual rows=2 loops=1)
                     ->  Custom Scan (ChunkAppend) on metrics_space (actual rows=2 loops=1)
                           Order: metrics_space."time" DESC
                           ->  Merge Append (actual rows=2 loops=1)
                                 Sort Key: _hyper_2_12_chunk."time" DESC
                                 ->  Index Only Scan Backward using _hyper_2_12_chunk_metrics_space_time_idx on _hyper_2_12_chunk (actual rows=2 loops=1)
                                       Heap Fetches: 2
                                 ->  Index Only Scan Backward using _hyper_2_11_chunk_metrics_space_time_idx on _hyper_2_11_chunk (actual rows=1 loops=1)
                                       Heap Fetches: 1
                                 ->  Index Only Scan Backward using _hyper_2_10_chunk_metrics_space_time_idx on _hyper_2_10_chunk (actual rows=1 loops=1)
                                       Heap Fetches: 1
                           ->  Merge Append (never executed)
                                 Sort Key: _hyper_2_9_chunk."time" DESC
                                 ->  Index Only Scan Backward using _hyper_2_9_chunk_metrics_space_time_idx on _hyper_2_9_chunk (never executed)
                                       Heap Fetches: 0
                                 ->  Index Only Scan Backward using _hyper_2_8_chunk_metrics_space_time_idx on _hyper_2_8_chunk (never executed)
                                       Heap Fetches: 0
                                 ->  Index Only Scan Backward using _hyper_2_7_chunk_metrics_space_time_idx on _hyper_2_7_chunk (never executed)
                                       Heap Fetches: 0
                           ->  Merge Append (never executed)
                                 Sort Key: _hyper_2_6_chunk."time" DESC
                                 ->  Index Only Scan Backward using _hyper_2_6_chunk_metrics_space_time_idx on _hyper_2_6_chunk (never executed)
                                       Heap Fetches: 0
                                 ->  Index Only Scan Backward using _hyper_2_5_chunk_metrics_space_time_idx on _hyper_2_5_chunk (never executed)
                                       Heap Fetches: 0
                                 ->  Index Only Scan Backward using _hyper_2_4_chunk_metrics_space_time_idx on _hyper_2_4_chunk (never executed)
                                       Heap Fetches: 0
(31 rows)

-- test plan with best index is chosen
-- this should use device_id, time index
:PREFIX SELECT time, device_id FROM :TEST_TABLE WHERE device_id = 1 ORDER BY time DESC LIMIT 1;
                                                         QUERY PLAN                                                          
-----------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=1 loops=1)
   ->  Custom Scan (ChunkAppend) on metrics_space (actual rows=1 loops=1)
         Order: metrics_space."time" DESC
         ->  Index Scan Backward using _hyper_2_10_chunk_metrics_space_time_idx on _hyper_2_10_chunk (actual rows=1 loops=1)
               Filter: (device_id = 1)
         ->  Index Scan Backward using _hyper_2_7_chunk_metrics_space_time_idx on _hyper_2_7_chunk (never executed)
               Filter: (device_id = 1)
         ->  Index Scan Backward using _hyper_2_4_chunk_metrics_space_time_idx on _hyper_2_4_chunk (never executed)
               Filter: (device_id = 1)
(9 rows)

-- test plan with best index is chosen
-- this should use time index
:PREFIX SELECT time FROM :TEST_TABLE ORDER BY time DESC LIMIT 1;
                                                               QUERY PLAN                                                               
----------------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=1 loops=1)
   ->  Custom Scan (ChunkAppend) on metrics_space (actual rows=1 loops=1)
         Order: metrics_space."time" DESC
         ->  Merge Append (actual rows=1 loops=1)
               Sort Key: _hyper_2_12_chunk."time" DESC
               ->  Index Only Scan Backward using _hyper_2_12_chunk_metrics_space_time_idx on _hyper_2_12_chunk (actual rows=1 loops=1)
                     Heap Fetches: 1
               ->  Index Only Scan Backward using _hyper_2_11_chunk_metrics_space_time_idx on _hyper_2_11_chunk (actual rows=1 loops=1)
                     Heap Fetches: 1
               ->  Index Only Scan Backward using _hyper_2_10_chunk_metrics_space_time_idx on _hyper_2_10_chunk (actual rows=1 loops=1)
                     Heap Fetches: 1
         ->  Merge Append (never executed)
               Sort Key: _hyper_2_9_chunk."time" DESC
               ->  Index Only Scan Backward using _hyper_2_9_chunk_metrics_space_time_idx on _hyper_2_9_chunk (never executed)
                     Heap Fetches: 0
               ->  Index Only Scan Backward using _hyper_2_8_chunk_metrics_space_time_idx on _hyper_2_8_chunk (never executed)
                     Heap Fetches: 0
               ->  Index Only Scan Backward using _hyper_2_7_chunk_metrics_space_time_idx on _hyper_2_7_chunk (never executed)
                     Heap Fetches: 0
         ->  Merge Append (never executed)
               Sort Key: _hyper_2_6_chunk."time" DESC
               ->  Index Only Scan Backward using _hyper_2_6_chunk_metrics_space_time_idx on _hyper_2_6_chunk (never executed)
                     Heap Fetches: 0
               ->  Index Only Scan Backward using _hyper_2_5_chunk_metrics_space_time_idx on _hyper_2_5_chunk (never executed)
                     Heap Fetches: 0
               ->  Index Only Scan Backward using _hyper_2_4_chunk_metrics_space_time_idx on _hyper_2_4_chunk (never executed)
                     Heap Fetches: 0
(27 rows)

-- test LATERAL with correlated query
-- only last chunk should be executed
:PREFIX SELECT g.time, l.time
FROM generate_series('2000-01-01'::timestamptz,'2000-01-03','1d') AS g(time)
LEFT OUTER JOIN LATERAL(
  SELECT * FROM :TEST_TABLE o
    WHERE o.time >= g.time AND o.time < g.time + '1d'::interval ORDER BY time DESC LIMIT 1
) l ON true;
                                                                    QUERY PLAN                                                                    
--------------------------------------------------------------------------------------------------------------------------------------------------
 Nested Loop Left Join (actual rows=3 loops=1)
   ->  Function Scan on generate_series g (actual rows=3 loops=1)
   ->  Limit (actual rows=1 loops=3)
         ->  Custom Scan (ChunkAppend) on metrics_space o (actual rows=1 loops=3)
               Order: o."time" DESC
               ->  Merge Append (actual rows=0 loops=3)
                     Sort Key: o_1."time" DESC
                     ->  Index Only Scan Backward using _hyper_2_12_chunk_metrics_space_time_idx on _hyper_2_12_chunk o_1 (actual rows=0 loops=3)
                           Index Cond: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)))
                           Heap Fetches: 0
                     ->  Index Only Scan Backward using _hyper_2_11_chunk_metrics_space_time_idx on _hyper_2_11_chunk o_2 (actual rows=0 loops=3)
                           Index Cond: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)))
                           Heap Fetches: 0
                     ->  Index Only Scan Backward using _hyper_2_10_chunk_metrics_space_time_idx on _hyper_2_10_chunk o_3 (actual rows=0 loops=3)
                           Index Cond: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)))
                           Heap Fetches: 0
               ->  Merge Append (actual rows=0 loops=3)
                     Sort Key: o_4."time" DESC
                     ->  Index Only Scan Backward using _hyper_2_9_chunk_metrics_space_time_idx on _hyper_2_9_chunk o_4 (actual rows=0 loops=3)
                           Index Cond: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)))
                           Heap Fetches: 0
                     ->  Index Only Scan Backward using _hyper_2_8_chunk_metrics_space_time_idx on _hyper_2_8_chunk o_5 (actual rows=0 loops=3)
                           Index Cond: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)))
                           Heap Fetches: 0
                     ->  Index Only Scan Backward using _hyper_2_7_chunk_metrics_space_time_idx on _hyper_2_7_chunk o_6 (actual rows=0 loops=3)
                           Index Cond: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)))
                           Heap Fetches: 0
               ->  Merge Append (actual rows=1 loops=3)
                     Sort Key: o_7."time" DESC
                     ->  Index Only Scan Backward using _hyper_2_6_chunk_metrics_space_time_idx on _hyper_2_6_chunk o_7 (actual rows=1 loops=3)
                           Index Cond: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)))
                           Heap Fetches: 3
                     ->  Index Only Scan Backward using _hyper_2_5_chunk_metrics_space_time_idx on _hyper_2_5_chunk o_8 (actual rows=1 loops=3)
                           Index Cond: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)))
                           Heap Fetches: 3
                     ->  Index Only Scan Backward using _hyper_2_4_chunk_metrics_space_time_idx on _hyper_2_4_chunk o_9 (actual rows=1 loops=3)
                           Index Cond: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)))
                           Heap Fetches: 3
(38 rows)

-- test LATERAL with correlated query
-- only 2nd chunk should be executed
:PREFIX SELECT g.time, l.time
FROM generate_series('2000-01-10'::timestamptz,'2000-01-11','1d') AS g(time)
LEFT OUTER JOIN LATERAL(
  SELECT * FROM :TEST_TABLE o
    WHERE o.time >= g.time AND o.time < g.time + '1d'::interval ORDER BY time LIMIT 1
) l ON true;
                                                              QUERY PLAN                                                               
---------------------------------------------------------------------------------------------------------------------------------------
 Nested Loop Left Join (actual rows=2 loops=1)
   ->  Function Scan on generate_series g (actual rows=2 loops=1)
   ->  Limit (actual rows=1 loops=2)
         ->  Custom Scan (ChunkAppend) on metrics_space o (actual rows=1 loops=2)
               Order: o."time"
               ->  Merge Append (actual rows=0 loops=2)
                     Sort Key: o_1."time"
                     ->  Index Only Scan using _hyper_2_4_chunk_metrics_space_time_idx on _hyper_2_4_chunk o_1 (actual rows=0 loops=2)
                           Index Cond: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)))
                           Heap Fetches: 0
                     ->  Index Only Scan using _hyper_2_5_chunk_metrics_space_time_idx on _hyper_2_5_chunk o_2 (actual rows=0 loops=2)
                           Index Cond: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)))
                           Heap Fetches: 0
                     ->  Index Only Scan using _hyper_2_6_chunk_metrics_space_time_idx on _hyper_2_6_chunk o_3 (actual rows=0 loops=2)
                           Index Cond: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)))
                           Heap Fetches: 0
               ->  Merge Append (actual rows=1 loops=2)
                     Sort Key: o_4."time"
                     ->  Index Only Scan using _hyper_2_7_chunk_metrics_space_time_idx on _hyper_2_7_chunk o_4 (actual rows=1 loops=2)
                           Index Cond: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)))
                           Heap Fetches: 2
                     ->  Index Only Scan using _hyper_2_8_chunk_metrics_space_time_idx on _hyper_2_8_chunk o_5 (actual rows=1 loops=2)
                           Index Cond: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)))
                           Heap Fetches: 2
                     ->  Index Only Scan using _hyper_2_9_chunk_metrics_space_time_idx on _hyper_2_9_chunk o_6 (actual rows=1 loops=2)
                           Index Cond: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)))
                           Heap Fetches: 2
               ->  Merge Append (never executed)
                     Sort Key: o_7."time"
                     ->  Index Only Scan using _hyper_2_10_chunk_metrics_space_time_idx on _hyper_2_10_chunk o_7 (never executed)
                           Index Cond: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)))
                           Heap Fetches: 0
                     ->  Index Only Scan using _hyper_2_11_chunk_metrics_space_time_idx on _hyper_2_11_chunk o_8 (never executed)
                           Index Cond: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)))
                           Heap Fetches: 0
                     ->  Index Only Scan using _hyper_2_12_chunk_metrics_space_time_idx on _hyper_2_12_chunk o_9 (never executed)
                           Index Cond: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)))
                           Heap Fetches: 0
(38 rows)

-- test startup and runtime exclusion together
:PREFIX SELECT g.time, l.time
FROM generate_series('2000-01-01'::timestamptz,'2000-01-03','1d') AS g(time)
LEFT OUTER JOIN LATERAL(
  SELECT * FROM :TEST_TABLE o
    WHERE o.time >= g.time AND o.time < g.time + '1d'::interval AND o.time < now() ORDER BY time DESC LIMIT 1
) l ON true;
                                                                    QUERY PLAN                                                                    
--------------------------------------------------------------------------------------------------------------------------------------------------
 Nested Loop Left Join (actual rows=3 loops=1)
   ->  Function Scan on generate_series g (actual rows=3 loops=1)
   ->  Limit (actual rows=1 loops=3)
         ->  Custom Scan (ChunkAppend) on metrics_space o (actual rows=1 loops=3)
               Order: o."time" DESC
               ->  Merge Append (actual rows=0 loops=3)
                     Sort Key: o_1."time" DESC
                     ->  Index Only Scan Backward using _hyper_2_12_chunk_metrics_space_time_idx on _hyper_2_12_chunk o_1 (actual rows=0 loops=3)
                           Index Cond: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)) AND ("time" < now()))
                           Heap Fetches: 0
                     ->  Index Only Scan Backward using _hyper_2_11_chunk_metrics_space_time_idx on _hyper_2_11_chunk o_2 (actual rows=0 loops=3)
                           Index Cond: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)) AND ("time" < now()))
                           Heap Fetches: 0
                     ->  Index Only Scan Backward using _hyper_2_10_chunk_metrics_space_time_idx on _hyper_2_10_chunk o_3 (actual rows=0 loops=3)
                           Index Cond: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)) AND ("time" < now()))
                           Heap Fetches: 0
               ->  Merge Append (actual rows=0 loops=3)
                     Sort Key: o_4."time" DESC
                     ->  Index Only Scan Backward using _hyper_2_9_chunk_metrics_space_time_idx on _hyper_2_9_chunk o_4 (actual rows=0 loops=3)
                           Index Cond: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)) AND ("time" < now()))
                           Heap Fetches: 0
                     ->  Index Only Scan Backward using _hyper_2_8_chunk_metrics_space_time_idx on _hyper_2_8_chunk o_5 (actual rows=0 loops=3)
                           Index Cond: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)) AND ("time" < now()))
                           Heap Fetches: 0
                     ->  Index Only Scan Backward using _hyper_2_7_chunk_metrics_space_time_idx on _hyper_2_7_chunk o_6 (actual rows=0 loops=3)
                           Index Cond: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)) AND ("time" < now()))
                           Heap Fetches: 0
               ->  Merge Append (actual rows=1 loops=3)
                     Sort Key: o_7."time" DESC
                     ->  Index Only Scan Backward using _hyper_2_6_chunk_metrics_space_time_idx on _hyper_2_6_chunk o_7 (actual rows=1 loops=3)
                           Index Cond: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)) AND ("time" < now()))
                           Heap Fetches: 3
                     ->  Index Only Scan Backward using _hyper_2_5_chunk_metrics_space_time_idx on _hyper_2_5_chunk o_8 (actual rows=1 loops=3)
                           Index Cond: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)) AND ("time" < now()))
                           Heap Fetches: 3
                     ->  Index Only Scan Backward using _hyper_2_4_chunk_metrics_space_time_idx on _hyper_2_4_chunk o_9 (actual rows=1 loops=3)
                           Index Cond: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)) AND ("time" < now()))
                           Heap Fetches: 3
(38 rows)

-- test startup and runtime exclusion together
-- all chunks should be filtered
:PREFIX SELECT g.time, l.time
FROM generate_series('2000-01-01'::timestamptz,'2000-01-03','1d') AS g(time)
LEFT OUTER JOIN LATERAL(
  SELECT * FROM :TEST_TABLE o
    WHERE o.time >= g.time AND o.time < g.time + '1d'::interval AND o.time > now() ORDER BY time DESC LIMIT 1
) l ON true;
                                                                    QUERY PLAN                                                                    
--------------------------------------------------------------------------------------------------------------------------------------------------
 Nested Loop Left Join (actual rows=3 loops=1)
   ->  Function Scan on generate_series g (actual rows=3 loops=1)
   ->  Limit (actual rows=0 loops=3)
         ->  Custom Scan (ChunkAppend) on metrics_space o (actual rows=0 loops=3)
               Order: o."time" DESC
               ->  Merge Append (actual rows=0 loops=3)
                     Sort Key: o_1."time" DESC
                     ->  Index Only Scan Backward using _hyper_2_12_chunk_metrics_space_time_idx on _hyper_2_12_chunk o_1 (actual rows=0 loops=3)
                           Index Cond: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)) AND ("time" > now()))
                           Heap Fetches: 0
                     ->  Index Only Scan Backward using _hyper_2_11_chunk_metrics_space_time_idx on _hyper_2_11_chunk o_2 (actual rows=0 loops=3)
                           Index Cond: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)) AND ("time" > now()))
                           Heap Fetches: 0
                     ->  Index Only Scan Backward using _hyper_2_10_chunk_metrics_space_time_idx on _hyper_2_10_chunk o_3 (actual rows=0 loops=3)
                           Index Cond: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)) AND ("time" > now()))
                           Heap Fetches: 0
               ->  Merge Append (actual rows=0 loops=3)
                     Sort Key: o_4."time" DESC
                     ->  Index Only Scan Backward using _hyper_2_9_chunk_metrics_space_time_idx on _hyper_2_9_chunk o_4 (actual rows=0 loops=3)
                           Index Cond: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)) AND ("time" > now()))
                           Heap Fetches: 0
                     ->  Index Only Scan Backward using _hyper_2_8_chunk_metrics_space_time_idx on _hyper_2_8_chunk o_5 (actual rows=0 loops=3)
                           Index Cond: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)) AND ("time" > now()))
                           Heap Fetches: 0
                     ->  Index Only Scan Backward using _hyper_2_7_chunk_metrics_space_time_idx on _hyper_2_7_chunk o_6 (actual rows=0 loops=3)
                           Index Cond: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)) AND ("time" > now()))
                           Heap Fetches: 0
               ->  Merge Append (actual rows=0 loops=3)
                     Sort Key: o_7."time" DESC
                     ->  Index Only Scan Backward using _hyper_2_6_chunk_metrics_space_time_idx on _hyper_2_6_chunk o_7 (actual rows=0 loops=3)
                           Index Cond: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)) AND ("time" > now()))
                           Heap Fetches: 0
                     ->  Index Only Scan Backward using _hyper_2_5_chunk_metrics_space_time_idx on _hyper_2_5_chunk o_8 (actual rows=0 loops=3)
                           Index Cond: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)) AND ("time" > now()))
                           Heap Fetches: 0
                     ->  Index Only Scan Backward using _hyper_2_4_chunk_metrics_space_time_idx on _hyper_2_4_chunk o_9 (actual rows=0 loops=3)
                           Index Cond: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)) AND ("time" > now()))
                           Heap Fetches: 0
(38 rows)

-- test CTE
-- no chunk exclusion for CTE because cte query is not pulled up
:PREFIX WITH cte AS (SELECT time FROM :TEST_TABLE ORDER BY time)
SELECT * FROM cte WHERE time < '2000-02-01'::timestamptz;
                                                             QUERY PLAN                                                              
-------------------------------------------------------------------------------------------------------------------------------------
 CTE Scan on cte (actual rows=68370 loops=1)
   Filter: ("time" < 'Tue Feb 01 00:00:00 2000 PST'::timestamp with time zone)
   CTE cte
     ->  Custom Scan (ChunkAppend) on metrics_space (actual rows=68370 loops=1)
           Order: metrics_space."time"
           ->  Merge Append (actual rows=17990 loops=1)
                 Sort Key: _hyper_2_4_chunk."time"
                 ->  Index Only Scan using _hyper_2_4_chunk_metrics_space_time_idx on _hyper_2_4_chunk (actual rows=3598 loops=1)
                       Heap Fetches: 3598
                 ->  Index Only Scan using _hyper_2_5_chunk_metrics_space_time_idx on _hyper_2_5_chunk (actual rows=10794 loops=1)
                       Heap Fetches: 10794
                 ->  Index Only Scan using _hyper_2_6_chunk_metrics_space_time_idx on _hyper_2_6_chunk (actual rows=3598 loops=1)
                       Heap Fetches: 3598
           ->  Merge Append (actual rows=25190 loops=1)
                 Sort Key: _hyper_2_7_chunk."time"
                 ->  Index Only Scan using _hyper_2_7_chunk_metrics_space_time_idx on _hyper_2_7_chunk (actual rows=5038 loops=1)
                       Heap Fetches: 5038
                 ->  Index Only Scan using _hyper_2_8_chunk_metrics_space_time_idx on _hyper_2_8_chunk (actual rows=15114 loops=1)
                       Heap Fetches: 15114
                 ->  Index Only Scan using _hyper_2_9_chunk_metrics_space_time_idx on _hyper_2_9_chunk (actual rows=5038 loops=1)
                       Heap Fetches: 5038
           ->  Merge Append (actual rows=25190 loops=1)
                 Sort Key: _hyper_2_10_chunk."time"
                 ->  Index Only Scan using _hyper_2_10_chunk_metrics_space_time_idx on _hyper_2_10_chunk (actual rows=5038 loops=1)
                       Heap Fetches: 5038
                 ->  Index Only Scan using _hyper_2_11_chunk_metrics_space_time_idx on _hyper_2_11_chunk (actual rows=15114 loops=1)
                       Heap Fetches: 15114
                 ->  Index Only Scan using _hyper_2_12_chunk_metrics_space_time_idx on _hyper_2_12_chunk (actual rows=5038 loops=1)
                       Heap Fetches: 5038
(29 rows)

-- test JOIN
-- no exclusion on joined table because quals are not propagated yet
:PREFIX SELECT o1.time, o2.time
FROM :TEST_TABLE o1
INNER JOIN :TEST_TABLE o2 ON o1.time = o2.time
WHERE o1.time < '2000-02-01'
ORDER BY o1.time;
                                                                  QUERY PLAN                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------
 Merge Join (actual rows=341850 loops=1)
   Merge Cond: (o1."time" = o2."time")
   ->  Custom Scan (ChunkAppend) on metrics_space o1 (actual rows=68370 loops=1)
         Order: o1."time"
         ->  Merge Append (actual rows=17990 loops=1)
               Sort Key: o1_1."time"
               ->  Index Only Scan using _hyper_2_4_chunk_metrics_space_time_idx on _hyper_2_4_chunk o1_1 (actual rows=3598 loops=1)
                     Index Cond: ("time" < 'Tue Feb 01 00:00:00 2000 PST'::timestamp with time zone)
                     Heap Fetches: 3598
               ->  Index Only Scan using _hyper_2_5_chunk_metrics_space_time_idx on _hyper_2_5_chunk o1_2 (actual rows=10794 loops=1)
                     Index Cond: ("time" < 'Tue Feb 01 00:00:00 2000 PST'::timestamp with time zone)
                     Heap Fetches: 10794
               ->  Index Only Scan using _hyper_2_6_chunk_metrics_space_time_idx on _hyper_2_6_chunk o1_3 (actual rows=3598 loops=1)
                     Index Cond: ("time" < 'Tue Feb 01 00:00:00 2000 PST'::timestamp with time zone)
                     Heap Fetches: 3598
         ->  Merge Append (actual rows=25190 loops=1)
               Sort Key: o1_4."time"
               ->  Index Only Scan using _hyper_2_7_chunk_metrics_space_time_idx on _hyper_2_7_chunk o1_4 (actual rows=5038 loops=1)
                     Index Cond: ("time" < 'Tue Feb 01 00:00:00 2000 PST'::timestamp with time zone)
                     Heap Fetches: 5038
               ->  Index Only Scan using _hyper_2_8_chunk_metrics_space_time_idx on _hyper_2_8_chunk o1_5 (actual rows=15114 loops=1)
                     Index Cond: ("time" < 'Tue Feb 01 00:00:00 2000 PST'::timestamp with time zone)
                     Heap Fetches: 15114
               ->  Index Only Scan using _hyper_2_9_chunk_metrics_space_time_idx on _hyper_2_9_chunk o1_6 (actual rows=5038 loops=1)
                     Index Cond: ("time" < 'Tue Feb 01 00:00:00 2000 PST'::timestamp with time zone)
                     Heap Fetches: 5038
         ->  Merge Append (actual rows=25190 loops=1)
               Sort Key: o1_7."time"
               ->  Index Only Scan using _hyper_2_10_chunk_metrics_space_time_idx on _hyper_2_10_chunk o1_7 (actual rows=5038 loops=1)
                     Index Cond: ("time" < 'Tue Feb 01 00:00:00 2000 PST'::timestamp with time zone)
                     Heap Fetches: 5038
               ->  Index Only Scan using _hyper_2_11_chunk_metrics_space_time_idx on _hyper_2_11_chunk o1_8 (actual rows=15114 loops=1)
                     Index Cond: ("time" < 'Tue Feb 01 00:00:00 2000 PST'::timestamp with time zone)
                     Heap Fetches: 15114
               ->  Index Only Scan using _hyper_2_12_chunk_metrics_space_time_idx on _hyper_2_12_chunk o1_9 (actual rows=5038 loops=1)
                     Index Cond: ("time" < 'Tue Feb 01 00:00:00 2000 PST'::timestamp with time zone)
                     Heap Fetches: 5038
   ->  Materialize (actual rows=341846 loops=1)
         ->  Custom Scan (ChunkAppend) on metrics_space o2 (actual rows=68370 loops=1)
               Order: o2."time"
               ->  Merge Append (actual rows=17990 loops=1)
                     Sort Key: o2_1."time"
                     ->  Index Only Scan using _hyper_2_4_chunk_metrics_space_time_idx on _hyper_2_4_chunk o2_1 (actual rows=3598 loops=1)
                           Index Cond: ("time" < 'Tue Feb 01 00:00:00 2000 PST'::timestamp with time zone)
                           Heap Fetches: 3598
                     ->  Index Only Scan using _hyper_2_5_chunk_metrics_space_time_idx on _hyper_2_5_chunk o2_2 (actual rows=10794 loops=1)
                           Index Cond: ("time" < 'Tue Feb 01 00:00:00 2000 PST'::timestamp with time zone)
                           Heap Fetches: 10794
                     ->  Index Only Scan using _hyper_2_6_chunk_metrics_space_time_idx on _hyper_2_6_chunk o2_3 (actual rows=3598 loops=1)
                           Index Cond: ("time" < 'Tue Feb 01 00:00:00 2000 PST'::timestamp with time zone)
                           Heap Fetches: 3598
               ->  Merge Append (actual rows=25190 loops=1)
                     Sort Key: o2_4."time"
                     ->  Index Only Scan using _hyper_2_7_chunk_metrics_space_time_idx on _hyper_2_7_chunk o2_4 (actual rows=5038 loops=1)
                           Index Cond: ("time" < 'Tue Feb 01 00:00:00 2000 PST'::timestamp with time zone)
                           Heap Fetches: 5038
                     ->  Index Only Scan using _hyper_2_8_chunk_metrics_space_time_idx on _hyper_2_8_chunk o2_5 (actual rows=15114 loops=1)
                           Index Cond: ("time" < 'Tue Feb 01 00:00:00 2000 PST'::timestamp with time zone)
                           Heap Fetches: 15114
                     ->  Index Only Scan using _hyper_2_9_chunk_metrics_space_time_idx on _hyper_2_9_chunk o2_6 (actual rows=5038 loops=1)
                           Index Cond: ("time" < 'Tue Feb 01 00:00:00 2000 PST'::timestamp with time zone)
                           Heap Fetches: 5038
               ->  Merge Append (actual rows=25190 loops=1)
                     Sort Key: o2_7."time"
                     ->  Index Only Scan using _hyper_2_10_chunk_metrics_space_time_idx on _hyper_2_10_chunk o2_7 (actual rows=5038 loops=1)
                           Index Cond: ("time" < 'Tue Feb 01 00:00:00 2000 PST'::timestamp with time zone)
                           Heap Fetches: 5038
                     ->  Index Only Scan using _hyper_2_11_chunk_metrics_space_time_idx on _hyper_2_11_chunk o2_8 (actual rows=15114 loops=1)
                           Index Cond: ("time" < 'Tue Feb 01 00:00:00 2000 PST'::timestamp with time zone)
                           Heap Fetches: 15114
                     ->  Index Only Scan using _hyper_2_12_chunk_metrics_space_time_idx on _hyper_2_12_chunk o2_9 (actual rows=5038 loops=1)
                           Index Cond: ("time" < 'Tue Feb 01 00:00:00 2000 PST'::timestamp with time zone)
                           Heap Fetches: 5038
(73 rows)

-- test JOIN
-- last chunk of o2 should not be executed
:PREFIX SELECT o1.time, o2.time
FROM :TEST_TABLE o1
INNER JOIN (SELECT * FROM :TEST_TABLE o2 ORDER BY time) o2 ON o1.time = o2.time
WHERE o1.time < '2000-01-08'
ORDER BY o1.time LIMIT 10;
                                                                  QUERY PLAN                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=10 loops=1)
   ->  Merge Join (actual rows=10 loops=1)
         Merge Cond: (o1."time" = o2."time")
         ->  Custom Scan (ChunkAppend) on metrics_space o1 (actual rows=2 loops=1)
               Order: o1."time"
               ->  Merge Append (actual rows=2 loops=1)
                     Sort Key: o1_1."time"
                     ->  Index Only Scan using _hyper_2_4_chunk_metrics_space_time_idx on _hyper_2_4_chunk o1_1 (actual rows=2 loops=1)
                           Index Cond: ("time" < 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
                           Heap Fetches: 2
                     ->  Index Only Scan using _hyper_2_5_chunk_metrics_space_time_idx on _hyper_2_5_chunk o1_2 (actual rows=1 loops=1)
                           Index Cond: ("time" < 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
                           Heap Fetches: 1
                     ->  Index Only Scan using _hyper_2_6_chunk_metrics_space_time_idx on _hyper_2_6_chunk o1_3 (actual rows=1 loops=1)
                           Index Cond: ("time" < 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
                           Heap Fetches: 1
               ->  Merge Append (never executed)
                     Sort Key: o1_4."time"
                     ->  Index Only Scan using _hyper_2_7_chunk_metrics_space_time_idx on _hyper_2_7_chunk o1_4 (never executed)
                           Index Cond: ("time" < 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
                           Heap Fetches: 0
                     ->  Index Only Scan using _hyper_2_8_chunk_metrics_space_time_idx on _hyper_2_8_chunk o1_5 (never executed)
                           Index Cond: ("time" < 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
                           Heap Fetches: 0
                     ->  Index Only Scan using _hyper_2_9_chunk_metrics_space_time_idx on _hyper_2_9_chunk o1_6 (never executed)
                           Index Cond: ("time" < 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
                           Heap Fetches: 0
         ->  Materialize (actual rows=10 loops=1)
               ->  Custom Scan (ChunkAppend) on metrics_space o2 (actual rows=6 loops=1)
                     Order: o2."time"
                     ->  Merge Append (actual rows=6 loops=1)
                           Sort Key: o2_1."time"
                           ->  Index Only Scan using _hyper_2_4_chunk_metrics_space_time_idx on _hyper_2_4_chunk o2_1 (actual rows=2 loops=1)
                                 Heap Fetches: 2
                           ->  Index Only Scan using _hyper_2_5_chunk_metrics_space_time_idx on _hyper_2_5_chunk o2_2 (actual rows=4 loops=1)
                                 Heap Fetches: 4
                           ->  Index Only Scan using _hyper_2_6_chunk_metrics_space_time_idx on _hyper_2_6_chunk o2_3 (actual rows=2 loops=1)
                                 Heap Fetches: 2
                     ->  Merge Append (never executed)
                           Sort Key: o2_4."time"
                           ->  Index Only Scan using _hyper_2_7_chunk_metrics_space_time_idx on _hyper_2_7_chunk o2_4 (never executed)
                                 Heap Fetches: 0
                           ->  Index Only Scan using _hyper_2_8_chunk_metrics_space_time_idx on _hyper_2_8_chunk o2_5 (never executed)
                                 Heap Fetches: 0
                           ->  Index Only Scan using _hyper_2_9_chunk_metrics_space_time_idx on _hyper_2_9_chunk o2_6 (never executed)
                                 Heap Fetches: 0
                     ->  Merge Append (never executed)
                           Sort Key: o2_7."time"
                           ->  Index Only Scan using _hyper_2_10_chunk_metrics_space_time_idx on _hyper_2_10_chunk o2_7 (never executed)
                                 Heap Fetches: 0
                           ->  Index Only Scan using _hyper_2_11_chunk_metrics_space_time_idx on _hyper_2_11_chunk o2_8 (never executed)
                                 Heap Fetches: 0
                           ->  Index Only Scan using _hyper_2_12_chunk_metrics_space_time_idx on _hyper_2_12_chunk o2_9 (never executed)
                                 Heap Fetches: 0
(54 rows)

-- test subquery
-- not ChunkAppend so no chunk exclusion
:PREFIX SELECT time
FROM :TEST_TABLE WHERE time = (SELECT max(time) FROM :TEST_TABLE) ORDER BY time;
                                                                                 QUERY PLAN                                                                                 
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on metrics_space (actual rows=5 loops=1)
   InitPlan 2 (returns $1)
     ->  Result (actual rows=1 loops=1)
           InitPlan 1 (returns $0)
             ->  Limit (actual rows=1 loops=1)
                   ->  Custom Scan (ChunkAppend) on metrics_space metrics_space_1 (actual rows=1 loops=1)
                         Order: metrics_space_1."time" DESC
                         ->  Merge Append (actual rows=1 loops=1)
                               Sort Key: _hyper_2_12_chunk_1."time" DESC
                               ->  Index Only Scan Backward using _hyper_2_12_chunk_metrics_space_time_idx on _hyper_2_12_chunk _hyper_2_12_chunk_1 (actual rows=1 loops=1)
                                     Index Cond: ("time" IS NOT NULL)
                                     Heap Fetches: 1
                               ->  Index Only Scan Backward using _hyper_2_11_chunk_metrics_space_time_idx on _hyper_2_11_chunk _hyper_2_11_chunk_1 (actual rows=1 loops=1)
                                     Index Cond: ("time" IS NOT NULL)
                                     Heap Fetches: 1
                               ->  Index Only Scan Backward using _hyper_2_10_chunk_metrics_space_time_idx on _hyper_2_10_chunk _hyper_2_10_chunk_1 (actual rows=1 loops=1)
                                     Index Cond: ("time" IS NOT NULL)
                                     Heap Fetches: 1
                         ->  Merge Append (never executed)
                               Sort Key: _hyper_2_9_chunk_1."time" DESC
                               ->  Index Only Scan Backward using _hyper_2_9_chunk_metrics_space_time_idx on _hyper_2_9_chunk _hyper_2_9_chunk_1 (never executed)
                                     Index Cond: ("time" IS NOT NULL)
                                     Heap Fetches: 0
                               ->  Index Only Scan Backward using _hyper_2_8_chunk_metrics_space_time_idx on _hyper_2_8_chunk _hyper_2_8_chunk_1 (never executed)
                                     Index Cond: ("time" IS NOT NULL)
                                     Heap Fetches: 0
                               ->  Index Only Scan Backward using _hyper_2_7_chunk_metrics_space_time_idx on _hyper_2_7_chunk _hyper_2_7_chunk_1 (never executed)
                                     Index Cond: ("time" IS NOT NULL)
                                     Heap Fetches: 0
                         ->  Merge Append (never executed)
                               Sort Key: _hyper_2_6_chunk_1."time" DESC
                               ->  Index Only Scan Backward using _hyper_2_6_chunk_metrics_space_time_idx on _hyper_2_6_chunk _hyper_2_6_chunk_1 (never executed)
                                     Index Cond: ("time" IS NOT NULL)
                                     Heap Fetches: 0
                               ->  Index Only Scan Backward using _hyper_2_5_chunk_metrics_space_time_idx on _hyper_2_5_chunk _hyper_2_5_chunk_1 (never executed)
                                     Index Cond: ("time" IS NOT NULL)
                                     Heap Fetches: 0
                               ->  Index Only Scan Backward using _hyper_2_4_chunk_metrics_space_time_idx on _hyper_2_4_chunk _hyper_2_4_chunk_1 (never executed)
                                     Index Cond: ("time" IS NOT NULL)
                                     Heap Fetches: 0
   ->  Merge Append (actual rows=0 loops=1)
         ->  Index Only Scan using _hyper_2_4_chunk_metrics_space_time_idx on _hyper_2_4_chunk (actual rows=0 loops=1)
               Index Cond: ("time" = $1)
               Heap Fetches: 0
         ->  Index Only Scan using _hyper_2_5_chunk_metrics_space_time_idx on _hyper_2_5_chunk (actual rows=0 loops=1)
               Index Cond: ("time" = $1)
               Heap Fetches: 0
         ->  Index Only Scan using _hyper_2_6_chunk_metrics_space_time_idx on _hyper_2_6_chunk (actual rows=0 loops=1)
               Index Cond: ("time" = $1)
               Heap Fetches: 0
   ->  Merge Append (actual rows=0 loops=1)
         ->  Index Only Scan using _hyper_2_7_chunk_metrics_space_time_idx on _hyper_2_7_chunk (actual rows=0 loops=1)
               Index Cond: ("time" = $1)
               Heap Fetches: 0
         ->  Index Only Scan using _hyper_2_8_chunk_metrics_space_time_idx on _hyper_2_8_chunk (actual rows=0 loops=1)
               Index Cond: ("time" = $1)
               Heap Fetches: 0
         ->  Index Only Scan using _hyper_2_9_chunk_metrics_space_time_idx on _hyper_2_9_chunk (actual rows=0 loops=1)
               Index Cond: ("time" = $1)
               Heap Fetches: 0
   ->  Merge Append (actual rows=5 loops=1)
         ->  Index Only Scan using _hyper_2_10_chunk_metrics_space_time_idx on _hyper_2_10_chunk (actual rows=1 loops=1)
               Index Cond: ("time" = $1)
               Heap Fetches: 1
         ->  Index Only Scan using _hyper_2_11_chunk_metrics_space_time_idx on _hyper_2_11_chunk (actual rows=3 loops=1)
               Index Cond: ("time" = $1)
               Heap Fetches: 3
         ->  Index Only Scan using _hyper_2_12_chunk_metrics_space_time_idx on _hyper_2_12_chunk (actual rows=1 loops=1)
               Index Cond: ("time" = $1)
               Heap Fetches: 1
(70 rows)

-- test join against max query
-- not ChunkAppend so no chunk exclusion
SET enable_hashjoin = false;
:PREFIX SELECT o1.time, o2.*
FROM :TEST_TABLE o1 INNER JOIN (SELECT max(time) AS max_time FROM :TEST_TABLE) o2 ON o1.time = o2.max_time ORDER BY time;
                                                                         QUERY PLAN                                                                         
------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort (actual rows=5 loops=1)
   Sort Key: o1."time"
   Sort Method: quicksort 
   ->  Nested Loop (actual rows=5 loops=1)
         ->  Result (actual rows=1 loops=1)
               InitPlan 1 (returns $0)
                 ->  Limit (actual rows=1 loops=1)
                       ->  Custom Scan (ChunkAppend) on metrics_space (actual rows=1 loops=1)
                             Order: metrics_space."time" DESC
                             ->  Merge Append (actual rows=1 loops=1)
                                   Sort Key: _hyper_2_12_chunk."time" DESC
                                   ->  Index Only Scan Backward using _hyper_2_12_chunk_metrics_space_time_idx on _hyper_2_12_chunk (actual rows=1 loops=1)
                                         Index Cond: ("time" IS NOT NULL)
                                         Heap Fetches: 1
                                   ->  Index Only Scan Backward using _hyper_2_11_chunk_metrics_space_time_idx on _hyper_2_11_chunk (actual rows=1 loops=1)
                                         Index Cond: ("time" IS NOT NULL)
                                         Heap Fetches: 1
                                   ->  Index Only Scan Backward using _hyper_2_10_chunk_metrics_space_time_idx on _hyper_2_10_chunk (actual rows=1 loops=1)
                                         Index Cond: ("time" IS NOT NULL)
                                         Heap Fetches: 1
                             ->  Merge Append (never executed)
                                   Sort Key: _hyper_2_9_chunk."time" DESC
                                   ->  Index Only Scan Backward using _hyper_2_9_chunk_metrics_space_time_idx on _hyper_2_9_chunk (never executed)
                                         Index Cond: ("time" IS NOT NULL)
                                         Heap Fetches: 0
                                   ->  Index Only Scan Backward using _hyper_2_8_chunk_metrics_space_time_idx on _hyper_2_8_chunk (never executed)
                                         Index Cond: ("time" IS NOT NULL)
                                         Heap Fetches: 0
                                   ->  Index Only Scan Backward using _hyper_2_7_chunk_metrics_space_time_idx on _hyper_2_7_chunk (never executed)
                                         Index Cond: ("time" IS NOT NULL)
                                         Heap Fetches: 0
                             ->  Merge Append (never executed)
                                   Sort Key: _hyper_2_6_chunk."time" DESC
                                   ->  Index Only Scan Backward using _hyper_2_6_chunk_metrics_space_time_idx on _hyper_2_6_chunk (never executed)
                                         Index Cond: ("time" IS NOT NULL)
                                         Heap Fetches: 0
                                   ->  Index Only Scan Backward using _hyper_2_5_chunk_metrics_space_time_idx on _hyper_2_5_chunk (never executed)
                                         Index Cond: ("time" IS NOT NULL)
                                         Heap Fetches: 0
                                   ->  Index Only Scan Backward using _hyper_2_4_chunk_metrics_space_time_idx on _hyper_2_4_chunk (never executed)
                                         Index Cond: ("time" IS NOT NULL)
                                         Heap Fetches: 0
         ->  Append (actual rows=5 loops=1)
               ->  Index Only Scan using _hyper_2_4_chunk_metrics_space_time_idx on _hyper_2_4_chunk o1 (actual rows=0 loops=1)
                     Index Cond: ("time" = ($0))
                     Heap Fetches: 0
               ->  Index Only Scan using _hyper_2_5_chunk_metrics_space_time_idx on _hyper_2_5_chunk o1_1 (actual rows=0 loops=1)
                     Index Cond: ("time" = ($0))
                     Heap Fetches: 0
               ->  Index Only Scan using _hyper_2_6_chunk_metrics_space_time_idx on _hyper_2_6_chunk o1_2 (actual rows=0 loops=1)
                     Index Cond: ("time" = ($0))
                     Heap Fetches: 0
               ->  Index Only Scan using _hyper_2_7_chunk_metrics_space_time_idx on _hyper_2_7_chunk o1_3 (actual rows=0 loops=1)
                     Index Cond: ("time" = ($0))
                     Heap Fetches: 0
               ->  Index Only Scan using _hyper_2_8_chunk_metrics_space_time_idx on _hyper_2_8_chunk o1_4 (actual rows=0 loops=1)
                     Index Cond: ("time" = ($0))
                     Heap Fetches: 0
               ->  Index Only Scan using _hyper_2_9_chunk_metrics_space_time_idx on _hyper_2_9_chunk o1_5 (actual rows=0 loops=1)
                     Index Cond: ("time" = ($0))
                     Heap Fetches: 0
               ->  Index Only Scan using _hyper_2_10_chunk_metrics_space_time_idx on _hyper_2_10_chunk o1_6 (actual rows=1 loops=1)
                     Index Cond: ("time" = ($0))
                     Heap Fetches: 1
               ->  Index Only Scan using _hyper_2_11_chunk_metrics_space_time_idx on _hyper_2_11_chunk o1_7 (actual rows=3 loops=1)
                     Index Cond: ("time" = ($0))
                     Heap Fetches: 3
               ->  Index Only Scan using _hyper_2_12_chunk_metrics_space_time_idx on _hyper_2_12_chunk o1_8 (actual rows=1 loops=1)
                     Index Cond: ("time" = ($0))
                     Heap Fetches: 1
(70 rows)

RESET enable_hashjoin;
-- test ordered append with limit expression
:PREFIX SELECT time
FROM :TEST_TABLE ORDER BY time LIMIT (SELECT length('four'));
                                                         QUERY PLAN                                                          
-----------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=4 loops=1)
   InitPlan 1 (returns $0)
     ->  Result (actual rows=1 loops=1)
   ->  Custom Scan (ChunkAppend) on metrics_space (actual rows=4 loops=1)
         Order: metrics_space."time"
         ->  Merge Append (actual rows=4 loops=1)
               Sort Key: _hyper_2_4_chunk."time"
               ->  Index Only Scan using _hyper_2_4_chunk_metrics_space_time_idx on _hyper_2_4_chunk (actual rows=2 loops=1)
                     Heap Fetches: 2
               ->  Index Only Scan using _hyper_2_5_chunk_metrics_space_time_idx on _hyper_2_5_chunk (actual rows=3 loops=1)
                     Heap Fetches: 3
               ->  Index Only Scan using _hyper_2_6_chunk_metrics_space_time_idx on _hyper_2_6_chunk (actual rows=1 loops=1)
                     Heap Fetches: 1
         ->  Merge Append (never executed)
               Sort Key: _hyper_2_7_chunk."time"
               ->  Index Only Scan using _hyper_2_7_chunk_metrics_space_time_idx on _hyper_2_7_chunk (never executed)
                     Heap Fetches: 0
               ->  Index Only Scan using _hyper_2_8_chunk_metrics_space_time_idx on _hyper_2_8_chunk (never executed)
                     Heap Fetches: 0
               ->  Index Only Scan using _hyper_2_9_chunk_metrics_space_time_idx on _hyper_2_9_chunk (never executed)
                     Heap Fetches: 0
         ->  Merge Append (never executed)
               Sort Key: _hyper_2_10_chunk."time"
               ->  Index Only Scan using _hyper_2_10_chunk_metrics_space_time_idx on _hyper_2_10_chunk (never executed)
                     Heap Fetches: 0
               ->  Index Only Scan using _hyper_2_11_chunk_metrics_space_time_idx on _hyper_2_11_chunk (never executed)
                     Heap Fetches: 0
               ->  Index Only Scan using _hyper_2_12_chunk_metrics_space_time_idx on _hyper_2_12_chunk (never executed)
                     Heap Fetches: 0
(29 rows)

-- test with ordered guc disabled
SET timescaledb.enable_ordered_append TO off;
:PREFIX SELECT time
FROM :TEST_TABLE ORDER BY time LIMIT 3;
                                                       QUERY PLAN                                                        
-------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=3 loops=1)
   ->  Merge Append (actual rows=3 loops=1)
         Sort Key: _hyper_2_4_chunk."time"
         ->  Index Only Scan using _hyper_2_4_chunk_metrics_space_time_idx on _hyper_2_4_chunk (actual rows=2 loops=1)
               Heap Fetches: 2
         ->  Index Only Scan using _hyper_2_5_chunk_metrics_space_time_idx on _hyper_2_5_chunk (actual rows=2 loops=1)
               Heap Fetches: 2
         ->  Index Only Scan using _hyper_2_6_chunk_metrics_space_time_idx on _hyper_2_6_chunk (actual rows=1 loops=1)
               Heap Fetches: 1
         ->  Index Only Scan using _hyper_2_7_chunk_metrics_space_time_idx on _hyper_2_7_chunk (actual rows=1 loops=1)
               Heap Fetches: 1
         ->  Index Only Scan using _hyper_2_8_chunk_metrics_space_time_idx on _hyper_2_8_chunk (actual rows=1 loops=1)
               Heap Fetches: 1
         ->  Index Only Scan using _hyper_2_9_chunk_metrics_space_time_idx on _hyper_2_9_chunk (actual rows=1 loops=1)
               Heap Fetches: 1
         ->  Index Only Scan using _hyper_2_10_chunk_metrics_space_time_idx on _hyper_2_10_chunk (actual rows=1 loops=1)
               Heap Fetches: 1
         ->  Index Only Scan using _hyper_2_11_chunk_metrics_space_time_idx on _hyper_2_11_chunk (actual rows=1 loops=1)
               Heap Fetches: 1
         ->  Index Only Scan using _hyper_2_12_chunk_metrics_space_time_idx on _hyper_2_12_chunk (actual rows=1 loops=1)
               Heap Fetches: 1
(21 rows)

RESET timescaledb.enable_ordered_append;
:PREFIX SELECT time
FROM :TEST_TABLE ORDER BY time LIMIT 3;
                                                         QUERY PLAN                                                          
-----------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=3 loops=1)
   ->  Custom Scan (ChunkAppend) on metrics_space (actual rows=3 loops=1)
         Order: metrics_space."time"
         ->  Merge Append (actual rows=3 loops=1)
               Sort Key: _hyper_2_4_chunk."time"
               ->  Index Only Scan using _hyper_2_4_chunk_metrics_space_time_idx on _hyper_2_4_chunk (actual rows=2 loops=1)
                     Heap Fetches: 2
               ->  Index Only Scan using _hyper_2_5_chunk_metrics_space_time_idx on _hyper_2_5_chunk (actual rows=2 loops=1)
                     Heap Fetches: 2
               ->  Index Only Scan using _hyper_2_6_chunk_metrics_space_time_idx on _hyper_2_6_chunk (actual rows=1 loops=1)
                     Heap Fetches: 1
         ->  Merge Append (never executed)
               Sort Key: _hyper_2_7_chunk."time"
               ->  Index Only Scan using _hyper_2_7_chunk_metrics_space_time_idx on _hyper_2_7_chunk (never executed)
                     Heap Fetches: 0
               ->  Index Only Scan using _hyper_2_8_chunk_metrics_space_time_idx on _hyper_2_8_chunk (never executed)
                     Heap Fetches: 0
               ->  Index Only Scan using _hyper_2_9_chunk_metrics_space_time_idx on _hyper_2_9_chunk (never executed)
                     Heap Fetches: 0
         ->  Merge Append (never executed)
               Sort Key: _hyper_2_10_chunk."time"
               ->  Index Only Scan using _hyper_2_10_chunk_metrics_space_time_idx on _hyper_2_10_chunk (never executed)
                     Heap Fetches: 0
               ->  Index Only Scan using _hyper_2_11_chunk_metrics_space_time_idx on _hyper_2_11_chunk (never executed)
                     Heap Fetches: 0
               ->  Index Only Scan using _hyper_2_12_chunk_metrics_space_time_idx on _hyper_2_12_chunk (never executed)
                     Heap Fetches: 0
(27 rows)

-- test with chunk append disabled
SET timescaledb.enable_chunk_append TO off;
:PREFIX SELECT time
FROM :TEST_TABLE ORDER BY time LIMIT 3;
                                                       QUERY PLAN                                                        
-------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=3 loops=1)
   ->  Merge Append (actual rows=3 loops=1)
         Sort Key: _hyper_2_4_chunk."time"
         ->  Index Only Scan using _hyper_2_4_chunk_metrics_space_time_idx on _hyper_2_4_chunk (actual rows=2 loops=1)
               Heap Fetches: 2
         ->  Index Only Scan using _hyper_2_5_chunk_metrics_space_time_idx on _hyper_2_5_chunk (actual rows=2 loops=1)
               Heap Fetches: 2
         ->  Index Only Scan using _hyper_2_6_chunk_metrics_space_time_idx on _hyper_2_6_chunk (actual rows=1 loops=1)
               Heap Fetches: 1
         ->  Index Only Scan using _hyper_2_7_chunk_metrics_space_time_idx on _hyper_2_7_chunk (actual rows=1 loops=1)
               Heap Fetches: 1
         ->  Index Only Scan using _hyper_2_8_chunk_metrics_space_time_idx on _hyper_2_8_chunk (actual rows=1 loops=1)
               Heap Fetches: 1
         ->  Index Only Scan using _hyper_2_9_chunk_metrics_space_time_idx on _hyper_2_9_chunk (actual rows=1 loops=1)
               Heap Fetches: 1
         ->  Index Only Scan using _hyper_2_10_chunk_metrics_space_time_idx on _hyper_2_10_chunk (actual rows=1 loops=1)
               Heap Fetches: 1
         ->  Index Only Scan using _hyper_2_11_chunk_metrics_space_time_idx on _hyper_2_11_chunk (actual rows=1 loops=1)
               Heap Fetches: 1
         ->  Index Only Scan using _hyper_2_12_chunk_metrics_space_time_idx on _hyper_2_12_chunk (actual rows=1 loops=1)
               Heap Fetches: 1
(21 rows)

RESET timescaledb.enable_chunk_append;
:PREFIX SELECT time
FROM :TEST_TABLE ORDER BY time LIMIT 3;
                                                         QUERY PLAN                                                          
-----------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=3 loops=1)
   ->  Custom Scan (ChunkAppend) on metrics_space (actual rows=3 loops=1)
         Order: metrics_space."time"
         ->  Merge Append (actual rows=3 loops=1)
               Sort Key: _hyper_2_4_chunk."time"
               ->  Index Only Scan using _hyper_2_4_chunk_metrics_space_time_idx on _hyper_2_4_chunk (actual rows=2 loops=1)
                     Heap Fetches: 2
               ->  Index Only Scan using _hyper_2_5_chunk_metrics_space_time_idx on _hyper_2_5_chunk (actual rows=2 loops=1)
                     Heap Fetches: 2
               ->  Index Only Scan using _hyper_2_6_chunk_metrics_space_time_idx on _hyper_2_6_chunk (actual rows=1 loops=1)
                     Heap Fetches: 1
         ->  Merge Append (never executed)
               Sort Key: _hyper_2_7_chunk."time"
               ->  Index Only Scan using _hyper_2_7_chunk_metrics_space_time_idx on _hyper_2_7_chunk (never executed)
                     Heap Fetches: 0
               ->  Index Only Scan using _hyper_2_8_chunk_metrics_space_time_idx on _hyper_2_8_chunk (never executed)
                     Heap Fetches: 0
               ->  Index Only Scan using _hyper_2_9_chunk_metrics_space_time_idx on _hyper_2_9_chunk (never executed)
                     Heap Fetches: 0
         ->  Merge Append (never executed)
               Sort Key: _hyper_2_10_chunk."time"
               ->  Index Only Scan using _hyper_2_10_chunk_metrics_space_time_idx on _hyper_2_10_chunk (never executed)
                     Heap Fetches: 0
               ->  Index Only Scan using _hyper_2_11_chunk_metrics_space_time_idx on _hyper_2_11_chunk (never executed)
                     Heap Fetches: 0
               ->  Index Only Scan using _hyper_2_12_chunk_metrics_space_time_idx on _hyper_2_12_chunk (never executed)
                     Heap Fetches: 0
(27 rows)

-- test JOIN on time column
-- should use 2 ChunkAppend
:PREFIX SELECT o1.time FROM :TEST_TABLE o1 INNER JOIN :TEST_TABLE o2 ON o1.time = o2.time ORDER BY o1.time LIMIT 100;
                                                                  QUERY PLAN                                                                   
-----------------------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=100 loops=1)
   ->  Merge Join (actual rows=100 loops=1)
         Merge Cond: (o1."time" = o2."time")
         ->  Custom Scan (ChunkAppend) on metrics_space o1 (actual rows=20 loops=1)
               Order: o1."time"
               ->  Merge Append (actual rows=20 loops=1)
                     Sort Key: o1_1."time"
                     ->  Index Only Scan using _hyper_2_4_chunk_metrics_space_time_idx on _hyper_2_4_chunk o1_1 (actual rows=5 loops=1)
                           Heap Fetches: 5
                     ->  Index Only Scan using _hyper_2_5_chunk_metrics_space_time_idx on _hyper_2_5_chunk o1_2 (actual rows=13 loops=1)
                           Heap Fetches: 13
                     ->  Index Only Scan using _hyper_2_6_chunk_metrics_space_time_idx on _hyper_2_6_chunk o1_3 (actual rows=4 loops=1)
                           Heap Fetches: 4
               ->  Merge Append (never executed)
                     Sort Key: o1_4."time"
                     ->  Index Only Scan using _hyper_2_7_chunk_metrics_space_time_idx on _hyper_2_7_chunk o1_4 (never executed)
                           Heap Fetches: 0
                     ->  Index Only Scan using _hyper_2_8_chunk_metrics_space_time_idx on _hyper_2_8_chunk o1_5 (never executed)
                           Heap Fetches: 0
                     ->  Index Only Scan using _hyper_2_9_chunk_metrics_space_time_idx on _hyper_2_9_chunk o1_6 (never executed)
                           Heap Fetches: 0
               ->  Merge Append (never executed)
                     Sort Key: o1_7."time"
                     ->  Index Only Scan using _hyper_2_10_chunk_metrics_space_time_idx on _hyper_2_10_chunk o1_7 (never executed)
                           Heap Fetches: 0
                     ->  Index Only Scan using _hyper_2_11_chunk_metrics_space_time_idx on _hyper_2_11_chunk o1_8 (never executed)
                           Heap Fetches: 0
                     ->  Index Only Scan using _hyper_2_12_chunk_metrics_space_time_idx on _hyper_2_12_chunk o1_9 (never executed)
                           Heap Fetches: 0
         ->  Materialize (actual rows=100 loops=1)
               ->  Custom Scan (ChunkAppend) on metrics_space o2 (actual rows=21 loops=1)
                     Order: o2."time"
                     ->  Merge Append (actual rows=21 loops=1)
                           Sort Key: o2_1."time"
                           ->  Index Only Scan using _hyper_2_4_chunk_metrics_space_time_idx on _hyper_2_4_chunk o2_1 (actual rows=5 loops=1)
                                 Heap Fetches: 5
                           ->  Index Only Scan using _hyper_2_5_chunk_metrics_space_time_idx on _hyper_2_5_chunk o2_2 (actual rows=13 loops=1)
                                 Heap Fetches: 13
                           ->  Index Only Scan using _hyper_2_6_chunk_metrics_space_time_idx on _hyper_2_6_chunk o2_3 (actual rows=5 loops=1)
                                 Heap Fetches: 5
                     ->  Merge Append (never executed)
                           Sort Key: o2_4."time"
                           ->  Index Only Scan using _hyper_2_7_chunk_metrics_space_time_idx on _hyper_2_7_chunk o2_4 (never executed)
                                 Heap Fetches: 0
                           ->  Index Only Scan using _hyper_2_8_chunk_metrics_space_time_idx on _hyper_2_8_chunk o2_5 (never executed)
                                 Heap Fetches: 0
                           ->  Index Only Scan using _hyper_2_9_chunk_metrics_space_time_idx on _hyper_2_9_chunk o2_6 (never executed)
                                 Heap Fetches: 0
                     ->  Merge Append (never executed)
                           Sort Key: o2_7."time"
                           ->  Index Only Scan using _hyper_2_10_chunk_metrics_space_time_idx on _hyper_2_10_chunk o2_7 (never executed)
                                 Heap Fetches: 0
                           ->  Index Only Scan using _hyper_2_11_chunk_metrics_space_time_idx on _hyper_2_11_chunk o2_8 (never executed)
                                 Heap Fetches: 0
                           ->  Index Only Scan using _hyper_2_12_chunk_metrics_space_time_idx on _hyper_2_12_chunk o2_9 (never executed)
                                 Heap Fetches: 0
(56 rows)

-- test JOIN on time column with USING
-- should use 2 ChunkAppend
:PREFIX SELECT o1.time FROM :TEST_TABLE o1 INNER JOIN :TEST_TABLE o2 USING(time) ORDER BY o1.time LIMIT 100;
                                                                  QUERY PLAN                                                                   
-----------------------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=100 loops=1)
   ->  Merge Join (actual rows=100 loops=1)
         Merge Cond: (o1."time" = o2."time")
         ->  Custom Scan (ChunkAppend) on metrics_space o1 (actual rows=20 loops=1)
               Order: o1."time"
               ->  Merge Append (actual rows=20 loops=1)
                     Sort Key: o1_1."time"
                     ->  Index Only Scan using _hyper_2_4_chunk_metrics_space_time_idx on _hyper_2_4_chunk o1_1 (actual rows=5 loops=1)
                           Heap Fetches: 5
                     ->  Index Only Scan using _hyper_2_5_chunk_metrics_space_time_idx on _hyper_2_5_chunk o1_2 (actual rows=13 loops=1)
                           Heap Fetches: 13
                     ->  Index Only Scan using _hyper_2_6_chunk_metrics_space_time_idx on _hyper_2_6_chunk o1_3 (actual rows=4 loops=1)
                           Heap Fetches: 4
               ->  Merge Append (never executed)
                     Sort Key: o1_4."time"
                     ->  Index Only Scan using _hyper_2_7_chunk_metrics_space_time_idx on _hyper_2_7_chunk o1_4 (never executed)
                           Heap Fetches: 0
                     ->  Index Only Scan using _hyper_2_8_chunk_metrics_space_time_idx on _hyper_2_8_chunk o1_5 (never executed)
                           Heap Fetches: 0
                     ->  Index Only Scan using _hyper_2_9_chunk_metrics_space_time_idx on _hyper_2_9_chunk o1_6 (never executed)
                           Heap Fetches: 0
               ->  Merge Append (never executed)
                     Sort Key: o1_7."time"
                     ->  Index Only Scan using _hyper_2_10_chunk_metrics_space_time_idx on _hyper_2_10_chunk o1_7 (never executed)
                           Heap Fetches: 0
                     ->  Index Only Scan using _hyper_2_11_chunk_metrics_space_time_idx on _hyper_2_11_chunk o1_8 (never executed)
                           Heap Fetches: 0
                     ->  Index Only Scan using _hyper_2_12_chunk_metrics_space_time_idx on _hyper_2_12_chunk o1_9 (never executed)
                           Heap Fetches: 0
         ->  Materialize (actual rows=100 loops=1)
               ->  Custom Scan (ChunkAppend) on metrics_space o2 (actual rows=21 loops=1)
                     Order: o2."time"
                     ->  Merge Append (actual rows=21 loops=1)
                           Sort Key: o2_1."time"
                           ->  Index Only Scan using _hyper_2_4_chunk_metrics_space_time_idx on _hyper_2_4_chunk o2_1 (actual rows=5 loops=1)
                                 Heap Fetches: 5
                           ->  Index Only Scan using _hyper_2_5_chunk_metrics_space_time_idx on _hyper_2_5_chunk o2_2 (actual rows=13 loops=1)
                                 Heap Fetches: 13
                           ->  Index Only Scan using _hyper_2_6_chunk_metrics_space_time_idx on _hyper_2_6_chunk o2_3 (actual rows=5 loops=1)
                                 Heap Fetches: 5
                     ->  Merge Append (never executed)
                           Sort Key: o2_4."time"
                           ->  Index Only Scan using _hyper_2_7_chunk_metrics_space_time_idx on _hyper_2_7_chunk o2_4 (never executed)
                                 Heap Fetches: 0
                           ->  Index Only Scan using _hyper_2_8_chunk_metrics_space_time_idx on _hyper_2_8_chunk o2_5 (never executed)
                                 Heap Fetches: 0
                           ->  Index Only Scan using _hyper_2_9_chunk_metrics_space_time_idx on _hyper_2_9_chunk o2_6 (never executed)
                                 Heap Fetches: 0
                     ->  Merge Append (never executed)
                           Sort Key: o2_7."time"
                           ->  Index Only Scan using _hyper_2_10_chunk_metrics_space_time_idx on _hyper_2_10_chunk o2_7 (never executed)
                                 Heap Fetches: 0
                           ->  Index Only Scan using _hyper_2_11_chunk_metrics_space_time_idx on _hyper_2_11_chunk o2_8 (never executed)
                                 Heap Fetches: 0
                           ->  Index Only Scan using _hyper_2_12_chunk_metrics_space_time_idx on _hyper_2_12_chunk o2_9 (never executed)
                                 Heap Fetches: 0
(56 rows)

-- test NATURAL JOIN on time column
-- should use 2 ChunkAppend
:PREFIX SELECT o1.time FROM :TEST_TABLE o1 NATURAL INNER JOIN :TEST_TABLE o2 ORDER BY o1.time LIMIT 100;
                                                                       QUERY PLAN                                                                        
---------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=0 loops=1)
   ->  Sort (actual rows=0 loops=1)
         Sort Key: o1."time"
         Sort Method: quicksort 
         ->  Merge Join (actual rows=0 loops=1)
               Merge Cond: ((o1.device_id = o2.device_id) AND (o1."time" = o2."time"))
               Join Filter: ((o1.v0 = o2.v0) AND (o1.v1 = o2.v1) AND (o1.v2 = o2.v2) AND (o1.v3 = o2.v3))
               Rows Removed by Join Filter: 68370
               ->  Merge Append (actual rows=68370 loops=1)
                     Sort Key: o1.device_id, o1."time"
                     ->  Index Scan using _hyper_2_4_chunk_metrics_space_device_id_time_idx on _hyper_2_4_chunk o1 (actual rows=3598 loops=1)
                     ->  Index Scan using _hyper_2_5_chunk_metrics_space_device_id_time_idx on _hyper_2_5_chunk o1_1 (actual rows=10794 loops=1)
                     ->  Index Scan using _hyper_2_6_chunk_metrics_space_device_id_time_idx on _hyper_2_6_chunk o1_2 (actual rows=3598 loops=1)
                     ->  Index Scan using _hyper_2_7_chunk_metrics_space_device_id_time_idx on _hyper_2_7_chunk o1_3 (actual rows=5038 loops=1)
                     ->  Index Scan using _hyper_2_8_chunk_metrics_space_device_id_time_idx on _hyper_2_8_chunk o1_4 (actual rows=15114 loops=1)
                     ->  Index Scan using _hyper_2_9_chunk_metrics_space_device_id_time_idx on _hyper_2_9_chunk o1_5 (actual rows=5038 loops=1)
                     ->  Index Scan using _hyper_2_10_chunk_metrics_space_device_id_time_idx on _hyper_2_10_chunk o1_6 (actual rows=5038 loops=1)
                     ->  Index Scan using _hyper_2_11_chunk_metrics_space_device_id_time_idx on _hyper_2_11_chunk o1_7 (actual rows=15114 loops=1)
                     ->  Index Scan using _hyper_2_12_chunk_metrics_space_device_id_time_idx on _hyper_2_12_chunk o1_8 (actual rows=5038 loops=1)
               ->  Materialize (actual rows=68370 loops=1)
                     ->  Merge Append (actual rows=68370 loops=1)
                           Sort Key: o2.device_id, o2."time"
                           ->  Index Scan using _hyper_2_4_chunk_metrics_space_device_id_time_idx on _hyper_2_4_chunk o2 (actual rows=3598 loops=1)
                           ->  Index Scan using _hyper_2_5_chunk_metrics_space_device_id_time_idx on _hyper_2_5_chunk o2_1 (actual rows=10794 loops=1)
                           ->  Index Scan using _hyper_2_6_chunk_metrics_space_device_id_time_idx on _hyper_2_6_chunk o2_2 (actual rows=3598 loops=1)
                           ->  Index Scan using _hyper_2_7_chunk_metrics_space_device_id_time_idx on _hyper_2_7_chunk o2_3 (actual rows=5038 loops=1)
                           ->  Index Scan using _hyper_2_8_chunk_metrics_space_device_id_time_idx on _hyper_2_8_chunk o2_4 (actual rows=15114 loops=1)
                           ->  Index Scan using _hyper_2_9_chunk_metrics_space_device_id_time_idx on _hyper_2_9_chunk o2_5 (actual rows=5038 loops=1)
                           ->  Index Scan using _hyper_2_10_chunk_metrics_space_device_id_time_idx on _hyper_2_10_chunk o2_6 (actual rows=5038 loops=1)
                           ->  Index Scan using _hyper_2_11_chunk_metrics_space_device_id_time_idx on _hyper_2_11_chunk o2_7 (actual rows=15114 loops=1)
                           ->  Index Scan using _hyper_2_12_chunk_metrics_space_device_id_time_idx on _hyper_2_12_chunk o2_8 (actual rows=5038 loops=1)
(31 rows)

-- test LEFT JOIN on time column
-- should use 2 ChunkAppend
:PREFIX SELECT o1.time FROM :TEST_TABLE o1 LEFT JOIN :TEST_TABLE o2 ON o1.time=o2.time ORDER BY o1.time LIMIT 100;
                                                                  QUERY PLAN                                                                   
-----------------------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=100 loops=1)
   ->  Merge Left Join (actual rows=100 loops=1)
         Merge Cond: (o1."time" = o2."time")
         ->  Custom Scan (ChunkAppend) on metrics_space o1 (actual rows=20 loops=1)
               Order: o1."time"
               ->  Merge Append (actual rows=20 loops=1)
                     Sort Key: o1_1."time"
                     ->  Index Only Scan using _hyper_2_4_chunk_metrics_space_time_idx on _hyper_2_4_chunk o1_1 (actual rows=5 loops=1)
                           Heap Fetches: 5
                     ->  Index Only Scan using _hyper_2_5_chunk_metrics_space_time_idx on _hyper_2_5_chunk o1_2 (actual rows=13 loops=1)
                           Heap Fetches: 13
                     ->  Index Only Scan using _hyper_2_6_chunk_metrics_space_time_idx on _hyper_2_6_chunk o1_3 (actual rows=4 loops=1)
                           Heap Fetches: 4
               ->  Merge Append (never executed)
                     Sort Key: o1_4."time"
                     ->  Index Only Scan using _hyper_2_7_chunk_metrics_space_time_idx on _hyper_2_7_chunk o1_4 (never executed)
                           Heap Fetches: 0
                     ->  Index Only Scan using _hyper_2_8_chunk_metrics_space_time_idx on _hyper_2_8_chunk o1_5 (never executed)
                           Heap Fetches: 0
                     ->  Index Only Scan using _hyper_2_9_chunk_metrics_space_time_idx on _hyper_2_9_chunk o1_6 (never executed)
                           Heap Fetches: 0
               ->  Merge Append (never executed)
                     Sort Key: o1_7."time"
                     ->  Index Only Scan using _hyper_2_10_chunk_metrics_space_time_idx on _hyper_2_10_chunk o1_7 (never executed)
                           Heap Fetches: 0
                     ->  Index Only Scan using _hyper_2_11_chunk_metrics_space_time_idx on _hyper_2_11_chunk o1_8 (never executed)
                           Heap Fetches: 0
                     ->  Index Only Scan using _hyper_2_12_chunk_metrics_space_time_idx on _hyper_2_12_chunk o1_9 (never executed)
                           Heap Fetches: 0
         ->  Materialize (actual rows=100 loops=1)
               ->  Custom Scan (ChunkAppend) on metrics_space o2 (actual rows=21 loops=1)
                     Order: o2."time"
                     ->  Merge Append (actual rows=21 loops=1)
                           Sort Key: o2_1."time"
                           ->  Index Only Scan using _hyper_2_4_chunk_metrics_space_time_idx on _hyper_2_4_chunk o2_1 (actual rows=5 loops=1)
                                 Heap Fetches: 5
                           ->  Index Only Scan using _hyper_2_5_chunk_metrics_space_time_idx on _hyper_2_5_chunk o2_2 (actual rows=13 loops=1)
                                 Heap Fetches: 13
                           ->  Index Only Scan using _hyper_2_6_chunk_metrics_space_time_idx on _hyper_2_6_chunk o2_3 (actual rows=5 loops=1)
                                 Heap Fetches: 5
                     ->  Merge Append (never executed)
                           Sort Key: o2_4."time"
                           ->  Index Only Scan using _hyper_2_7_chunk_metrics_space_time_idx on _hyper_2_7_chunk o2_4 (never executed)
                                 Heap Fetches: 0
                           ->  Index Only Scan using _hyper_2_8_chunk_metrics_space_time_idx on _hyper_2_8_chunk o2_5 (never executed)
                                 Heap Fetches: 0
                           ->  Index Only Scan using _hyper_2_9_chunk_metrics_space_time_idx on _hyper_2_9_chunk o2_6 (never executed)
                                 Heap Fetches: 0
                     ->  Merge Append (never executed)
                           Sort Key: o2_7."time"
                           ->  Index Only Scan using _hyper_2_10_chunk_metrics_space_time_idx on _hyper_2_10_chunk o2_7 (never executed)
                                 Heap Fetches: 0
                           ->  Index Only Scan using _hyper_2_11_chunk_metrics_space_time_idx on _hyper_2_11_chunk o2_8 (never executed)
                                 Heap Fetches: 0
                           ->  Index Only Scan using _hyper_2_12_chunk_metrics_space_time_idx on _hyper_2_12_chunk o2_9 (never executed)
                                 Heap Fetches: 0
(56 rows)

-- test RIGHT JOIN on time column
-- should use 2 ChunkAppend
:PREFIX SELECT o1.time FROM :TEST_TABLE o1 RIGHT JOIN :TEST_TABLE o2 ON o1.time=o2.time ORDER BY o2.time LIMIT 100;
                                                                  QUERY PLAN                                                                   
-----------------------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=100 loops=1)
   ->  Merge Left Join (actual rows=100 loops=1)
         Merge Cond: (o2."time" = o1."time")
         ->  Custom Scan (ChunkAppend) on metrics_space o2 (actual rows=20 loops=1)
               Order: o2."time"
               ->  Merge Append (actual rows=20 loops=1)
                     Sort Key: o2_1."time"
                     ->  Index Only Scan using _hyper_2_4_chunk_metrics_space_time_idx on _hyper_2_4_chunk o2_1 (actual rows=5 loops=1)
                           Heap Fetches: 5
                     ->  Index Only Scan using _hyper_2_5_chunk_metrics_space_time_idx on _hyper_2_5_chunk o2_2 (actual rows=13 loops=1)
                           Heap Fetches: 13
                     ->  Index Only Scan using _hyper_2_6_chunk_metrics_space_time_idx on _hyper_2_6_chunk o2_3 (actual rows=4 loops=1)
                           Heap Fetches: 4
               ->  Merge Append (never executed)
                     Sort Key: o2_4."time"
                     ->  Index Only Scan using _hyper_2_7_chunk_metrics_space_time_idx on _hyper_2_7_chunk o2_4 (never executed)
                           Heap Fetches: 0
                     ->  Index Only Scan using _hyper_2_8_chunk_metrics_space_time_idx on _hyper_2_8_chunk o2_5 (never executed)
                           Heap Fetches: 0
                     ->  Index Only Scan using _hyper_2_9_chunk_metrics_space_time_idx on _hyper_2_9_chunk o2_6 (never executed)
                           Heap Fetches: 0
               ->  Merge Append (never executed)
                     Sort Key: o2_7."time"
                     ->  Index Only Scan using _hyper_2_10_chunk_metrics_space_time_idx on _hyper_2_10_chunk o2_7 (never executed)
                           Heap Fetches: 0
                     ->  Index Only Scan using _hyper_2_11_chunk_metrics_space_time_idx on _hyper_2_11_chunk o2_8 (never executed)
                           Heap Fetches: 0
                     ->  Index Only Scan using _hyper_2_12_chunk_metrics_space_time_idx on _hyper_2_12_chunk o2_9 (never executed)
                           Heap Fetches: 0
         ->  Materialize (actual rows=100 loops=1)
               ->  Custom Scan (ChunkAppend) on metrics_space o1 (actual rows=21 loops=1)
                     Order: o1."time"
                     ->  Merge Append (actual rows=21 loops=1)
                           Sort Key: o1_1."time"
                           ->  Index Only Scan using _hyper_2_4_chunk_metrics_space_time_idx on _hyper_2_4_chunk o1_1 (actual rows=5 loops=1)
                                 Heap Fetches: 5
                           ->  Index Only Scan using _hyper_2_5_chunk_metrics_space_time_idx on _hyper_2_5_chunk o1_2 (actual rows=13 loops=1)
                                 Heap Fetches: 13
                           ->  Index Only Scan using _hyper_2_6_chunk_metrics_space_time_idx on _hyper_2_6_chunk o1_3 (actual rows=5 loops=1)
                                 Heap Fetches: 5
                     ->  Merge Append (never executed)
                           Sort Key: o1_4."time"
                           ->  Index Only Scan using _hyper_2_7_chunk_metrics_space_time_idx on _hyper_2_7_chunk o1_4 (never executed)
                                 Heap Fetches: 0
                           ->  Index Only Scan using _hyper_2_8_chunk_metrics_space_time_idx on _hyper_2_8_chunk o1_5 (never executed)
                                 Heap Fetches: 0
                           ->  Index Only Scan using _hyper_2_9_chunk_metrics_space_time_idx on _hyper_2_9_chunk o1_6 (never executed)
                                 Heap Fetches: 0
                     ->  Merge Append (never executed)
                           Sort Key: o1_7."time"
                           ->  Index Only Scan using _hyper_2_10_chunk_metrics_space_time_idx on _hyper_2_10_chunk o1_7 (never executed)
                                 Heap Fetches: 0
                           ->  Index Only Scan using _hyper_2_11_chunk_metrics_space_time_idx on _hyper_2_11_chunk o1_8 (never executed)
                                 Heap Fetches: 0
                           ->  Index Only Scan using _hyper_2_12_chunk_metrics_space_time_idx on _hyper_2_12_chunk o1_9 (never executed)
                                 Heap Fetches: 0
(56 rows)

-- test JOIN on time column with ON clause expression order switched
-- should use 2 ChunkAppend
:PREFIX SELECT o1.time FROM :TEST_TABLE o1 INNER JOIN :TEST_TABLE o2 ON o2.time = o1.time ORDER BY o1.time LIMIT 100;
                                                                  QUERY PLAN                                                                   
-----------------------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=100 loops=1)
   ->  Merge Join (actual rows=100 loops=1)
         Merge Cond: (o1."time" = o2."time")
         ->  Custom Scan (ChunkAppend) on metrics_space o1 (actual rows=20 loops=1)
               Order: o1."time"
               ->  Merge Append (actual rows=20 loops=1)
                     Sort Key: o1_1."time"
                     ->  Index Only Scan using _hyper_2_4_chunk_metrics_space_time_idx on _hyper_2_4_chunk o1_1 (actual rows=5 loops=1)
                           Heap Fetches: 5
                     ->  Index Only Scan using _hyper_2_5_chunk_metrics_space_time_idx on _hyper_2_5_chunk o1_2 (actual rows=13 loops=1)
                           Heap Fetches: 13
                     ->  Index Only Scan using _hyper_2_6_chunk_metrics_space_time_idx on _hyper_2_6_chunk o1_3 (actual rows=4 loops=1)
                           Heap Fetches: 4
               ->  Merge Append (never executed)
                     Sort Key: o1_4."time"
                     ->  Index Only Scan using _hyper_2_7_chunk_metrics_space_time_idx on _hyper_2_7_chunk o1_4 (never executed)
                           Heap Fetches: 0
                     ->  Index Only Scan using _hyper_2_8_chunk_metrics_space_time_idx on _hyper_2_8_chunk o1_5 (never executed)
                           Heap Fetches: 0
                     ->  Index Only Scan using _hyper_2_9_chunk_metrics_space_time_idx on _hyper_2_9_chunk o1_6 (never executed)
                           Heap Fetches: 0
               ->  Merge Append (never executed)
                     Sort Key: o1_7."time"
                     ->  Index Only Scan using _hyper_2_10_chunk_metrics_space_time_idx on _hyper_2_10_chunk o1_7 (never executed)
                           Heap Fetches: 0
                     ->  Index Only Scan using _hyper_2_11_chunk_metrics_space_time_idx on _hyper_2_11_chunk o1_8 (never executed)
                           Heap Fetches: 0
                     ->  Index Only Scan using _hyper_2_12_chunk_metrics_space_time_idx on _hyper_2_12_chunk o1_9 (never executed)
                           Heap Fetches: 0
         ->  Materialize (actual rows=100 loops=1)
               ->  Custom Scan (ChunkAppend) on metrics_space o2 (actual rows=21 loops=1)
                     Order: o2."time"
                     ->  Merge Append (actual rows=21 loops=1)
                           Sort Key: o2_1."time"
                           ->  Index Only Scan using _hyper_2_4_chunk_metrics_space_time_idx on _hyper_2_4_chunk o2_1 (actual rows=5 loops=1)
                                 Heap Fetches: 5
                           ->  Index Only Scan using _hyper_2_5_chunk_metrics_space_time_idx on _hyper_2_5_chunk o2_2 (actual rows=13 loops=1)
                                 Heap Fetches: 13
                           ->  Index Only Scan using _hyper_2_6_chunk_metrics_space_time_idx on _hyper_2_6_chunk o2_3 (actual rows=5 loops=1)
                                 Heap Fetches: 5
                     ->  Merge Append (never executed)
                           Sort Key: o2_4."time"
                           ->  Index Only Scan using _hyper_2_7_chunk_metrics_space_time_idx on _hyper_2_7_chunk o2_4 (never executed)
                                 Heap Fetches: 0
                           ->  Index Only Scan using _hyper_2_8_chunk_metrics_space_time_idx on _hyper_2_8_chunk o2_5 (never executed)
                                 Heap Fetches: 0
                           ->  Index Only Scan using _hyper_2_9_chunk_metrics_space_time_idx on _hyper_2_9_chunk o2_6 (never executed)
                                 Heap Fetches: 0
                     ->  Merge Append (never executed)
                           Sort Key: o2_7."time"
                           ->  Index Only Scan using _hyper_2_10_chunk_metrics_space_time_idx on _hyper_2_10_chunk o2_7 (never executed)
                                 Heap Fetches: 0
                           ->  Index Only Scan using _hyper_2_11_chunk_metrics_space_time_idx on _hyper_2_11_chunk o2_8 (never executed)
                                 Heap Fetches: 0
                           ->  Index Only Scan using _hyper_2_12_chunk_metrics_space_time_idx on _hyper_2_12_chunk o2_9 (never executed)
                                 Heap Fetches: 0
(56 rows)

-- test JOIN on time column with equality condition in WHERE clause
-- should use 2 ChunkAppend
:PREFIX SELECT o1.time FROM :TEST_TABLE o1 INNER JOIN :TEST_TABLE o2 ON true WHERE o1.time = o2.time ORDER BY o1.time LIMIT 100;
                                                                  QUERY PLAN                                                                   
-----------------------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=100 loops=1)
   ->  Merge Join (actual rows=100 loops=1)
         Merge Cond: (o1."time" = o2."time")
         ->  Custom Scan (ChunkAppend) on metrics_space o1 (actual rows=20 loops=1)
               Order: o1."time"
               ->  Merge Append (actual rows=20 loops=1)
                     Sort Key: o1_1."time"
                     ->  Index Only Scan using _hyper_2_4_chunk_metrics_space_time_idx on _hyper_2_4_chunk o1_1 (actual rows=5 loops=1)
                           Heap Fetches: 5
                     ->  Index Only Scan using _hyper_2_5_chunk_metrics_space_time_idx on _hyper_2_5_chunk o1_2 (actual rows=13 loops=1)
                           Heap Fetches: 13
                     ->  Index Only Scan using _hyper_2_6_chunk_metrics_space_time_idx on _hyper_2_6_chunk o1_3 (actual rows=4 loops=1)
                           Heap Fetches: 4
               ->  Merge Append (never executed)
                     Sort Key: o1_4."time"
                     ->  Index Only Scan using _hyper_2_7_chunk_metrics_space_time_idx on _hyper_2_7_chunk o1_4 (never executed)
                           Heap Fetches: 0
                     ->  Index Only Scan using _hyper_2_8_chunk_metrics_space_time_idx on _hyper_2_8_chunk o1_5 (never executed)
                           Heap Fetches: 0
                     ->  Index Only Scan using _hyper_2_9_chunk_metrics_space_time_idx on _hyper_2_9_chunk o1_6 (never executed)
                           Heap Fetches: 0
               ->  Merge Append (never executed)
                     Sort Key: o1_7."time"
                     ->  Index Only Scan using _hyper_2_10_chunk_metrics_space_time_idx on _hyper_2_10_chunk o1_7 (never executed)
                           Heap Fetches: 0
                     ->  Index Only Scan using _hyper_2_11_chunk_metrics_space_time_idx on _hyper_2_11_chunk o1_8 (never executed)
                           Heap Fetches: 0
                     ->  Index Only Scan using _hyper_2_12_chunk_metrics_space_time_idx on _hyper_2_12_chunk o1_9 (never executed)
                           Heap Fetches: 0
         ->  Materialize (actual rows=100 loops=1)
               ->  Custom Scan (ChunkAppend) on metrics_space o2 (actual rows=21 loops=1)
                     Order: o2."time"
                     ->  Merge Append (actual rows=21 loops=1)
                           Sort Key: o2_1."time"
                           ->  Index Only Scan using _hyper_2_4_chunk_metrics_space_time_idx on _hyper_2_4_chunk o2_1 (actual rows=5 loops=1)
                                 Heap Fetches: 5
                           ->  Index Only Scan using _hyper_2_5_chunk_metrics_space_time_idx on _hyper_2_5_chunk o2_2 (actual rows=13 loops=1)
                                 Heap Fetches: 13
                           ->  Index Only Scan using _hyper_2_6_chunk_metrics_space_time_idx on _hyper_2_6_chunk o2_3 (actual rows=5 loops=1)
                                 Heap Fetches: 5
                     ->  Merge Append (never executed)
                           Sort Key: o2_4."time"
                           ->  Index Only Scan using _hyper_2_7_chunk_metrics_space_time_idx on _hyper_2_7_chunk o2_4 (never executed)
                                 Heap Fetches: 0
                           ->  Index Only Scan using _hyper_2_8_chunk_metrics_space_time_idx on _hyper_2_8_chunk o2_5 (never executed)
                                 Heap Fetches: 0
                           ->  Index Only Scan using _hyper_2_9_chunk_metrics_space_time_idx on _hyper_2_9_chunk o2_6 (never executed)
                                 Heap Fetches: 0
                     ->  Merge Append (never executed)
                           Sort Key: o2_7."time"
                           ->  Index Only Scan using _hyper_2_10_chunk_metrics_space_time_idx on _hyper_2_10_chunk o2_7 (never executed)
                                 Heap Fetches: 0
                           ->  Index Only Scan using _hyper_2_11_chunk_metrics_space_time_idx on _hyper_2_11_chunk o2_8 (never executed)
                                 Heap Fetches: 0
                           ->  Index Only Scan using _hyper_2_12_chunk_metrics_space_time_idx on _hyper_2_12_chunk o2_9 (never executed)
                                 Heap Fetches: 0
(56 rows)

-- test JOIN on time column with ORDER BY 2nd hypertable
-- should use 2 ChunkAppend
:PREFIX SELECT o1.time FROM :TEST_TABLE o1 INNER JOIN :TEST_TABLE o2 ON o1.time = o2.time ORDER BY o2.time LIMIT 100;
                                                                  QUERY PLAN                                                                   
-----------------------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=100 loops=1)
   ->  Merge Join (actual rows=100 loops=1)
         Merge Cond: (o1."time" = o2."time")
         ->  Custom Scan (ChunkAppend) on metrics_space o1 (actual rows=20 loops=1)
               Order: o1."time"
               ->  Merge Append (actual rows=20 loops=1)
                     Sort Key: o1_1."time"
                     ->  Index Only Scan using _hyper_2_4_chunk_metrics_space_time_idx on _hyper_2_4_chunk o1_1 (actual rows=5 loops=1)
                           Heap Fetches: 5
                     ->  Index Only Scan using _hyper_2_5_chunk_metrics_space_time_idx on _hyper_2_5_chunk o1_2 (actual rows=13 loops=1)
                           Heap Fetches: 13
                     ->  Index Only Scan using _hyper_2_6_chunk_metrics_space_time_idx on _hyper_2_6_chunk o1_3 (actual rows=4 loops=1)
                           Heap Fetches: 4
               ->  Merge Append (never executed)
                     Sort Key: o1_4."time"
                     ->  Index Only Scan using _hyper_2_7_chunk_metrics_space_time_idx on _hyper_2_7_chunk o1_4 (never executed)
                           Heap Fetches: 0
                     ->  Index Only Scan using _hyper_2_8_chunk_metrics_space_time_idx on _hyper_2_8_chunk o1_5 (never executed)
                           Heap Fetches: 0
                     ->  Index Only Scan using _hyper_2_9_chunk_metrics_space_time_idx on _hyper_2_9_chunk o1_6 (never executed)
                           Heap Fetches: 0
               ->  Merge Append (never executed)
                     Sort Key: o1_7."time"
                     ->  Index Only Scan using _hyper_2_10_chunk_metrics_space_time_idx on _hyper_2_10_chunk o1_7 (never executed)
                           Heap Fetches: 0
                     ->  Index Only Scan using _hyper_2_11_chunk_metrics_space_time_idx on _hyper_2_11_chunk o1_8 (never executed)
                           Heap Fetches: 0
                     ->  Index Only Scan using _hyper_2_12_chunk_metrics_space_time_idx on _hyper_2_12_chunk o1_9 (never executed)
                           Heap Fetches: 0
         ->  Materialize (actual rows=100 loops=1)
               ->  Custom Scan (ChunkAppend) on metrics_space o2 (actual rows=21 loops=1)
                     Order: o2."time"
                     ->  Merge Append (actual rows=21 loops=1)
                           Sort Key: o2_1."time"
                           ->  Index Only Scan using _hyper_2_4_chunk_metrics_space_time_idx on _hyper_2_4_chunk o2_1 (actual rows=5 loops=1)
                                 Heap Fetches: 5
                           ->  Index Only Scan using _hyper_2_5_chunk_metrics_space_time_idx on _hyper_2_5_chunk o2_2 (actual rows=13 loops=1)
                                 Heap Fetches: 13
                           ->  Index Only Scan using _hyper_2_6_chunk_metrics_space_time_idx on _hyper_2_6_chunk o2_3 (actual rows=5 loops=1)
                                 Heap Fetches: 5
                     ->  Merge Append (never executed)
                           Sort Key: o2_4."time"
                           ->  Index Only Scan using _hyper_2_7_chunk_metrics_space_time_idx on _hyper_2_7_chunk o2_4 (never executed)
                                 Heap Fetches: 0
                           ->  Index Only Scan using _hyper_2_8_chunk_metrics_space_time_idx on _hyper_2_8_chunk o2_5 (never executed)
                                 Heap Fetches: 0
                           ->  Index Only Scan using _hyper_2_9_chunk_metrics_space_time_idx on _hyper_2_9_chunk o2_6 (never executed)
                                 Heap Fetches: 0
                     ->  Merge Append (never executed)
                           Sort Key: o2_7."time"
                           ->  Index Only Scan using _hyper_2_10_chunk_metrics_space_time_idx on _hyper_2_10_chunk o2_7 (never executed)
                                 Heap Fetches: 0
                           ->  Index Only Scan using _hyper_2_11_chunk_metrics_space_time_idx on _hyper_2_11_chunk o2_8 (never executed)
                                 Heap Fetches: 0
                           ->  Index Only Scan using _hyper_2_12_chunk_metrics_space_time_idx on _hyper_2_12_chunk o2_9 (never executed)
                                 Heap Fetches: 0
(56 rows)

-- test JOIN on time column and device_id
-- should use 2 ChunkAppend
:PREFIX SELECT o1.time FROM :TEST_TABLE o1 INNER JOIN :TEST_TABLE o2 ON o1.device_id = o2.device_id AND o1.time = o2.time ORDER BY o1.time LIMIT 100;
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=100 loops=1)
   ->  Merge Join (actual rows=100 loops=1)
         Merge Cond: (o1."time" = o2."time")
         Join Filter: (o1.device_id = o2.device_id)
         Rows Removed by Join Filter: 400
         ->  Custom Scan (ChunkAppend) on metrics_space o1 (actual rows=100 loops=1)
               Order: o1."time"
               ->  Merge Append (actual rows=100 loops=1)
                     Sort Key: o1_1."time"
                     ->  Index Scan using _hyper_2_4_chunk_metrics_space_time_idx on _hyper_2_4_chunk o1_1 (actual rows=21 loops=1)
                     ->  Index Scan using _hyper_2_5_chunk_metrics_space_time_idx on _hyper_2_5_chunk o1_2 (actual rows=60 loops=1)
                     ->  Index Scan using _hyper_2_6_chunk_metrics_space_time_idx on _hyper_2_6_chunk o1_3 (actual rows=21 loops=1)
               ->  Merge Append (never executed)
                     Sort Key: o1_4."time"
                     ->  Index Scan using _hyper_2_7_chunk_metrics_space_time_idx on _hyper_2_7_chunk o1_4 (never executed)
                     ->  Index Scan using _hyper_2_8_chunk_metrics_space_time_idx on _hyper_2_8_chunk o1_5 (never executed)
                     ->  Index Scan using _hyper_2_9_chunk_metrics_space_time_idx on _hyper_2_9_chunk o1_6 (never executed)
               ->  Merge Append (never executed)
                     Sort Key: o1_7."time"
                     ->  Index Scan using _hyper_2_10_chunk_metrics_space_time_idx on _hyper_2_10_chunk o1_7 (never executed)
                     ->  Index Scan using _hyper_2_11_chunk_metrics_space_time_idx on _hyper_2_11_chunk o1_8 (never executed)
                     ->  Index Scan using _hyper_2_12_chunk_metrics_space_time_idx on _hyper_2_12_chunk o1_9 (never executed)
         ->  Materialize (actual rows=500 loops=1)
               ->  Custom Scan (ChunkAppend) on metrics_space o2 (actual rows=101 loops=1)
                     Order: o2."time"
                     ->  Merge Append (actual rows=101 loops=1)
                           Sort Key: o2_1."time"
                           ->  Index Scan using _hyper_2_4_chunk_metrics_space_time_idx on _hyper_2_4_chunk o2_1 (actual rows=21 loops=1)
                           ->  Index Scan using _hyper_2_5_chunk_metrics_space_time_idx on _hyper_2_5_chunk o2_2 (actual rows=61 loops=1)
                           ->  Index Scan using _hyper_2_6_chunk_metrics_space_time_idx on _hyper_2_6_chunk o2_3 (actual rows=21 loops=1)
                     ->  Merge Append (never executed)
                           Sort Key: o2_4."time"
                           ->  Index Scan using _hyper_2_7_chunk_metrics_space_time_idx on _hyper_2_7_chunk o2_4 (never executed)
                           ->  Index Scan using _hyper_2_8_chunk_metrics_space_time_idx on _hyper_2_8_chunk o2_5 (never executed)
                           ->  Index Scan using _hyper_2_9_chunk_metrics_space_time_idx on _hyper_2_9_chunk o2_6 (never executed)
                     ->  Merge Append (never executed)
                           Sort Key: o2_7."time"
                           ->  Index Scan using _hyper_2_10_chunk_metrics_space_time_idx on _hyper_2_10_chunk o2_7 (never executed)
                           ->  Index Scan using _hyper_2_11_chunk_metrics_space_time_idx on _hyper_2_11_chunk o2_8 (never executed)
                           ->  Index Scan using _hyper_2_12_chunk_metrics_space_time_idx on _hyper_2_12_chunk o2_9 (never executed)
(40 rows)

-- test JOIN on device_id
-- should not use ordered append for 2nd hypertable
:PREFIX SELECT o1.time FROM :TEST_TABLE o1 INNER JOIN :TEST_TABLE o2 ON o1.device_id = o2.device_id WHERE o1.device_id = 1 ORDER BY o1.time LIMIT 100;
                                                         QUERY PLAN                                                          
-----------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=100 loops=1)
   ->  Nested Loop (actual rows=100 loops=1)
         ->  Custom Scan (ChunkAppend) on metrics_space o1 (actual rows=1 loops=1)
               Order: o1."time"
               ->  Index Scan using _hyper_2_4_chunk_metrics_space_time_idx on _hyper_2_4_chunk o1_1 (actual rows=1 loops=1)
                     Filter: (device_id = 1)
               ->  Index Scan using _hyper_2_7_chunk_metrics_space_time_idx on _hyper_2_7_chunk o1_2 (never executed)
                     Filter: (device_id = 1)
               ->  Index Scan using _hyper_2_10_chunk_metrics_space_time_idx on _hyper_2_10_chunk o1_3 (never executed)
                     Filter: (device_id = 1)
         ->  Materialize (actual rows=100 loops=1)
               ->  Append (actual rows=100 loops=1)
                     ->  Seq Scan on _hyper_2_10_chunk o2 (actual rows=100 loops=1)
                           Filter: (device_id = 1)
                     ->  Seq Scan on _hyper_2_4_chunk o2_1 (never executed)
                           Filter: (device_id = 1)
                     ->  Seq Scan on _hyper_2_7_chunk o2_2 (never executed)
                           Filter: (device_id = 1)
(18 rows)

-- test JOIN on time column with implicit join
-- should use 2 ChunkAppend
:PREFIX SELECT o1.time FROM :TEST_TABLE o1, :TEST_TABLE o2 WHERE o1.time = o2.time ORDER BY o1.time LIMIT 100;
                                                                  QUERY PLAN                                                                   
-----------------------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=100 loops=1)
   ->  Merge Join (actual rows=100 loops=1)
         Merge Cond: (o1."time" = o2."time")
         ->  Custom Scan (ChunkAppend) on metrics_space o1 (actual rows=20 loops=1)
               Order: o1."time"
               ->  Merge Append (actual rows=20 loops=1)
                     Sort Key: o1_1."time"
                     ->  Index Only Scan using _hyper_2_4_chunk_metrics_space_time_idx on _hyper_2_4_chunk o1_1 (actual rows=5 loops=1)
                           Heap Fetches: 5
                     ->  Index Only Scan using _hyper_2_5_chunk_metrics_space_time_idx on _hyper_2_5_chunk o1_2 (actual rows=13 loops=1)
                           Heap Fetches: 13
                     ->  Index Only Scan using _hyper_2_6_chunk_metrics_space_time_idx on _hyper_2_6_chunk o1_3 (actual rows=4 loops=1)
                           Heap Fetches: 4
               ->  Merge Append (never executed)
                     Sort Key: o1_4."time"
                     ->  Index Only Scan using _hyper_2_7_chunk_metrics_space_time_idx on _hyper_2_7_chunk o1_4 (never executed)
                           Heap Fetches: 0
                     ->  Index Only Scan using _hyper_2_8_chunk_metrics_space_time_idx on _hyper_2_8_chunk o1_5 (never executed)
                           Heap Fetches: 0
                     ->  Index Only Scan using _hyper_2_9_chunk_metrics_space_time_idx on _hyper_2_9_chunk o1_6 (never executed)
                           Heap Fetches: 0
               ->  Merge Append (never executed)
                     Sort Key: o1_7."time"
                     ->  Index Only Scan using _hyper_2_10_chunk_metrics_space_time_idx on _hyper_2_10_chunk o1_7 (never executed)
                           Heap Fetches: 0
                     ->  Index Only Scan using _hyper_2_11_chunk_metrics_space_time_idx on _hyper_2_11_chunk o1_8 (never executed)
                           Heap Fetches: 0
                     ->  Index Only Scan using _hyper_2_12_chunk_metrics_space_time_idx on _hyper_2_12_chunk o1_9 (never executed)
                           Heap Fetches: 0
         ->  Materialize (actual rows=100 loops=1)
               ->  Custom Scan (ChunkAppend) on metrics_space o2 (actual rows=21 loops=1)
                     Order: o2."time"
                     ->  Merge Append (actual rows=21 loops=1)
                           Sort Key: o2_1."time"
                           ->  Index Only Scan using _hyper_2_4_chunk_metrics_space_time_idx on _hyper_2_4_chunk o2_1 (actual rows=5 loops=1)
                                 Heap Fetches: 5
                           ->  Index Only Scan using _hyper_2_5_chunk_metrics_space_time_idx on _hyper_2_5_chunk o2_2 (actual rows=13 loops=1)
                                 Heap Fetches: 13
                           ->  Index Only Scan using _hyper_2_6_chunk_metrics_space_time_idx on _hyper_2_6_chunk o2_3 (actual rows=5 loops=1)
                                 Heap Fetches: 5
                     ->  Merge Append (never executed)
                           Sort Key: o2_4."time"
                           ->  Index Only Scan using _hyper_2_7_chunk_metrics_space_time_idx on _hyper_2_7_chunk o2_4 (never executed)
                                 Heap Fetches: 0
                           ->  Index Only Scan using _hyper_2_8_chunk_metrics_space_time_idx on _hyper_2_8_chunk o2_5 (never executed)
                                 Heap Fetches: 0
                           ->  Index Only Scan using _hyper_2_9_chunk_metrics_space_time_idx on _hyper_2_9_chunk o2_6 (never executed)
                                 Heap Fetches: 0
                     ->  Merge Append (never executed)
                           Sort Key: o2_7."time"
                           ->  Index Only Scan using _hyper_2_10_chunk_metrics_space_time_idx on _hyper_2_10_chunk o2_7 (never executed)
                                 Heap Fetches: 0
                           ->  Index Only Scan using _hyper_2_11_chunk_metrics_space_time_idx on _hyper_2_11_chunk o2_8 (never executed)
                                 Heap Fetches: 0
                           ->  Index Only Scan using _hyper_2_12_chunk_metrics_space_time_idx on _hyper_2_12_chunk o2_9 (never executed)
                                 Heap Fetches: 0
(56 rows)

-- test JOIN on time column with 3 hypertables
-- should use 3 ChunkAppend
:PREFIX SELECT o1.time FROM :TEST_TABLE o1 INNER JOIN :TEST_TABLE o2 ON o1.time = o2.time INNER JOIN :TEST_TABLE o3 ON o1.time = o3.time ORDER BY o1.time LIMIT 100;
                                                                        QUERY PLAN                                                                        
----------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=100 loops=1)
   ->  Merge Join (actual rows=100 loops=1)
         Merge Cond: (o3."time" = o1."time")
         ->  Custom Scan (ChunkAppend) on metrics_space o3 (actual rows=4 loops=1)
               Order: o3."time"
               ->  Merge Append (actual rows=4 loops=1)
                     Sort Key: o3_1."time"
                     ->  Index Only Scan using _hyper_2_4_chunk_metrics_space_time_idx on _hyper_2_4_chunk o3_1 (actual rows=2 loops=1)
                           Heap Fetches: 2
                     ->  Index Only Scan using _hyper_2_5_chunk_metrics_space_time_idx on _hyper_2_5_chunk o3_2 (actual rows=3 loops=1)
                           Heap Fetches: 3
                     ->  Index Only Scan using _hyper_2_6_chunk_metrics_space_time_idx on _hyper_2_6_chunk o3_3 (actual rows=1 loops=1)
                           Heap Fetches: 1
               ->  Merge Append (never executed)
                     Sort Key: o3_4."time"
                     ->  Index Only Scan using _hyper_2_7_chunk_metrics_space_time_idx on _hyper_2_7_chunk o3_4 (never executed)
                           Heap Fetches: 0
                     ->  Index Only Scan using _hyper_2_8_chunk_metrics_space_time_idx on _hyper_2_8_chunk o3_5 (never executed)
                           Heap Fetches: 0
                     ->  Index Only Scan using _hyper_2_9_chunk_metrics_space_time_idx on _hyper_2_9_chunk o3_6 (never executed)
                           Heap Fetches: 0
               ->  Merge Append (never executed)
                     Sort Key: o3_7."time"
                     ->  Index Only Scan using _hyper_2_10_chunk_metrics_space_time_idx on _hyper_2_10_chunk o3_7 (never executed)
                           Heap Fetches: 0
                     ->  Index Only Scan using _hyper_2_11_chunk_metrics_space_time_idx on _hyper_2_11_chunk o3_8 (never executed)
                           Heap Fetches: 0
                     ->  Index Only Scan using _hyper_2_12_chunk_metrics_space_time_idx on _hyper_2_12_chunk o3_9 (never executed)
                           Heap Fetches: 0
         ->  Materialize (actual rows=100 loops=1)
               ->  Merge Join (actual rows=26 loops=1)
                     Merge Cond: (o1."time" = o2."time")
                     ->  Custom Scan (ChunkAppend) on metrics_space o1 (actual rows=6 loops=1)
                           Order: o1."time"
                           ->  Merge Append (actual rows=6 loops=1)
                                 Sort Key: o1_1."time"
                                 ->  Index Only Scan using _hyper_2_4_chunk_metrics_space_time_idx on _hyper_2_4_chunk o1_1 (actual rows=2 loops=1)
                                       Heap Fetches: 2
                                 ->  Index Only Scan using _hyper_2_5_chunk_metrics_space_time_idx on _hyper_2_5_chunk o1_2 (actual rows=4 loops=1)
                                       Heap Fetches: 4
                                 ->  Index Only Scan using _hyper_2_6_chunk_metrics_space_time_idx on _hyper_2_6_chunk o1_3 (actual rows=2 loops=1)
                                       Heap Fetches: 2
                           ->  Merge Append (never executed)
                                 Sort Key: o1_4."time"
                                 ->  Index Only Scan using _hyper_2_7_chunk_metrics_space_time_idx on _hyper_2_7_chunk o1_4 (never executed)
                                       Heap Fetches: 0
                                 ->  Index Only Scan using _hyper_2_8_chunk_metrics_space_time_idx on _hyper_2_8_chunk o1_5 (never executed)
                                       Heap Fetches: 0
                                 ->  Index Only Scan using _hyper_2_9_chunk_metrics_space_time_idx on _hyper_2_9_chunk o1_6 (never executed)
                                       Heap Fetches: 0
                           ->  Merge Append (never executed)
                                 Sort Key: o1_7."time"
                                 ->  Index Only Scan using _hyper_2_10_chunk_metrics_space_time_idx on _hyper_2_10_chunk o1_7 (never executed)
                                       Heap Fetches: 0
                                 ->  Index Only Scan using _hyper_2_11_chunk_metrics_space_time_idx on _hyper_2_11_chunk o1_8 (never executed)
                                       Heap Fetches: 0
                                 ->  Index Only Scan using _hyper_2_12_chunk_metrics_space_time_idx on _hyper_2_12_chunk o1_9 (never executed)
                                       Heap Fetches: 0
                     ->  Materialize (actual rows=26 loops=1)
                           ->  Custom Scan (ChunkAppend) on metrics_space o2 (actual rows=6 loops=1)
                                 Order: o2."time"
                                 ->  Merge Append (actual rows=6 loops=1)
                                       Sort Key: o2_1."time"
                                       ->  Index Only Scan using _hyper_2_4_chunk_metrics_space_time_idx on _hyper_2_4_chunk o2_1 (actual rows=2 loops=1)
                                             Heap Fetches: 2
                                       ->  Index Only Scan using _hyper_2_5_chunk_metrics_space_time_idx on _hyper_2_5_chunk o2_2 (actual rows=4 loops=1)
                                             Heap Fetches: 4
                                       ->  Index Only Scan using _hyper_2_6_chunk_metrics_space_time_idx on _hyper_2_6_chunk o2_3 (actual rows=2 loops=1)
                                             Heap Fetches: 2
                                 ->  Merge Append (never executed)
                                       Sort Key: o2_4."time"
                                       ->  Index Only Scan using _hyper_2_7_chunk_metrics_space_time_idx on _hyper_2_7_chunk o2_4 (never executed)
                                             Heap Fetches: 0
                                       ->  Index Only Scan using _hyper_2_8_chunk_metrics_space_time_idx on _hyper_2_8_chunk o2_5 (never executed)
                                             Heap Fetches: 0
                                       ->  Index Only Scan using _hyper_2_9_chunk_metrics_space_time_idx on _hyper_2_9_chunk o2_6 (never executed)
                                             Heap Fetches: 0
                                 ->  Merge Append (never executed)
                                       Sort Key: o2_7."time"
                                       ->  Index Only Scan using _hyper_2_10_chunk_metrics_space_time_idx on _hyper_2_10_chunk o2_7 (never executed)
                                             Heap Fetches: 0
                                       ->  Index Only Scan using _hyper_2_11_chunk_metrics_space_time_idx on _hyper_2_11_chunk o2_8 (never executed)
                                             Heap Fetches: 0
                                       ->  Index Only Scan using _hyper_2_12_chunk_metrics_space_time_idx on _hyper_2_12_chunk o2_9 (never executed)
                                             Heap Fetches: 0
(85 rows)

\set TEST_TABLE 'metrics_compressed'
\ir :TEST_QUERY_NAME
-- test ASC for ordered chunks
:PREFIX SELECT
  time
FROM :TEST_TABLE
ORDER BY time ASC LIMIT 1;
                                            QUERY PLAN                                            
--------------------------------------------------------------------------------------------------
 Limit (actual rows=1 loops=1)
   ->  Sort (actual rows=1 loops=1)
         Sort Key: _hyper_3_13_chunk."time"
         Sort Method: top-N heapsort 
         ->  Append (actual rows=68370 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_3_13_chunk (actual rows=17990 loops=1)
                     ->  Seq Scan on compress_hyper_4_18_chunk (actual rows=20 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_3_14_chunk (actual rows=25190 loops=1)
                     ->  Seq Scan on compress_hyper_4_17_chunk (actual rows=30 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_3_15_chunk (actual rows=25190 loops=1)
                     ->  Seq Scan on compress_hyper_4_16_chunk (actual rows=30 loops=1)
(11 rows)

-- test DESC for ordered chunks
:PREFIX SELECT
  time
FROM :TEST_TABLE
ORDER BY time DESC LIMIT 1;
                                            QUERY PLAN                                            
--------------------------------------------------------------------------------------------------
 Limit (actual rows=1 loops=1)
   ->  Sort (actual rows=1 loops=1)
         Sort Key: _hyper_3_15_chunk."time" DESC
         Sort Method: top-N heapsort 
         ->  Append (actual rows=68370 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_3_15_chunk (actual rows=25190 loops=1)
                     ->  Seq Scan on compress_hyper_4_16_chunk (actual rows=30 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_3_14_chunk (actual rows=25190 loops=1)
                     ->  Seq Scan on compress_hyper_4_17_chunk (actual rows=30 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_3_13_chunk (actual rows=17990 loops=1)
                     ->  Seq Scan on compress_hyper_4_18_chunk (actual rows=20 loops=1)
(11 rows)

-- test query with ORDER BY column not in targetlist
:PREFIX SELECT
  pg_typeof(device_id), pg_typeof(v2)
FROM :TEST_TABLE
ORDER BY time ASC LIMIT 1;
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 Limit (actual rows=1 loops=1)
   ->  Sort (actual rows=1 loops=1)
         Sort Key: _hyper_3_13_chunk."time"
         Sort Method: top-N heapsort 
         ->  Result (actual rows=68370 loops=1)
               ->  Append (actual rows=68370 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_3_13_chunk (actual rows=17990 loops=1)
                           ->  Seq Scan on compress_hyper_4_18_chunk (actual rows=20 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_3_14_chunk (actual rows=25190 loops=1)
                           ->  Seq Scan on compress_hyper_4_17_chunk (actual rows=30 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_3_15_chunk (actual rows=25190 loops=1)
                           ->  Seq Scan on compress_hyper_4_16_chunk (actual rows=30 loops=1)
(12 rows)

-- ORDER BY may include other columns after time column
:PREFIX SELECT
  time, device_id, v0
FROM :TEST_TABLE
ORDER BY time DESC, device_id LIMIT 1;
                                            QUERY PLAN                                            
--------------------------------------------------------------------------------------------------
 Limit (actual rows=1 loops=1)
   ->  Sort (actual rows=1 loops=1)
         Sort Key: _hyper_3_15_chunk."time" DESC, _hyper_3_15_chunk.device_id
         Sort Method: top-N heapsort 
         ->  Append (actual rows=68370 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_3_15_chunk (actual rows=25190 loops=1)
                     ->  Seq Scan on compress_hyper_4_16_chunk (actual rows=30 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_3_14_chunk (actual rows=25190 loops=1)
                     ->  Seq Scan on compress_hyper_4_17_chunk (actual rows=30 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_3_13_chunk (actual rows=17990 loops=1)
                     ->  Seq Scan on compress_hyper_4_18_chunk (actual rows=20 loops=1)
(11 rows)

-- test RECORD in targetlist
:PREFIX SELECT
  (time, device_id, v0)
FROM :TEST_TABLE
ORDER BY time DESC, device_id LIMIT 1;
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 Limit (actual rows=1 loops=1)
   ->  Sort (actual rows=1 loops=1)
         Sort Key: _hyper_3_15_chunk."time" DESC, _hyper_3_15_chunk.device_id
         Sort Method: top-N heapsort 
         ->  Result (actual rows=68370 loops=1)
               ->  Append (actual rows=68370 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_3_15_chunk (actual rows=25190 loops=1)
                           ->  Seq Scan on compress_hyper_4_16_chunk (actual rows=30 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_3_14_chunk (actual rows=25190 loops=1)
                           ->  Seq Scan on compress_hyper_4_17_chunk (actual rows=30 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_3_13_chunk (actual rows=17990 loops=1)
                           ->  Seq Scan on compress_hyper_4_18_chunk (actual rows=20 loops=1)
(12 rows)

-- test sort column not in targetlist
:PREFIX SELECT
  time_bucket('1h',time)
FROM :TEST_TABLE
ORDER BY time DESC LIMIT 1;
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 Limit (actual rows=1 loops=1)
   ->  Sort (actual rows=1 loops=1)
         Sort Key: _hyper_3_15_chunk."time" DESC
         Sort Method: top-N heapsort 
         ->  Result (actual rows=68370 loops=1)
               ->  Append (actual rows=68370 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_3_15_chunk (actual rows=25190 loops=1)
                           ->  Seq Scan on compress_hyper_4_16_chunk (actual rows=30 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_3_14_chunk (actual rows=25190 loops=1)
                           ->  Seq Scan on compress_hyper_4_17_chunk (actual rows=30 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_3_13_chunk (actual rows=17990 loops=1)
                           ->  Seq Scan on compress_hyper_4_18_chunk (actual rows=20 loops=1)
(12 rows)

-- queries with ORDER BY non-time column shouldn't use ordered append
:PREFIX SELECT
  device_id
FROM :TEST_TABLE
ORDER BY device_id LIMIT 1;
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Limit (actual rows=1 loops=1)
   ->  Merge Append (actual rows=1 loops=1)
         Sort Key: _hyper_3_13_chunk.device_id
         ->  Custom Scan (DecompressChunk) on _hyper_3_13_chunk (actual rows=1 loops=1)
               ->  Sort (actual rows=1 loops=1)
                     Sort Key: compress_hyper_4_18_chunk.device_id
                     Sort Method: quicksort 
                     ->  Seq Scan on compress_hyper_4_18_chunk (actual rows=20 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_3_14_chunk (actual rows=1 loops=1)
               ->  Sort (actual rows=1 loops=1)
                     Sort Key: compress_hyper_4_17_chunk.device_id
                     Sort Method: quicksort 
                     ->  Seq Scan on compress_hyper_4_17_chunk (actual rows=30 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_3_15_chunk (actual rows=1 loops=1)
               ->  Sort (actual rows=1 loops=1)
                     Sort Key: compress_hyper_4_16_chunk.device_id
                     Sort Method: quicksort 
                     ->  Seq Scan on compress_hyper_4_16_chunk (actual rows=30 loops=1)
(18 rows)

-- time column must be primary sort order
:PREFIX SELECT
  time, device_id
FROM :TEST_TABLE
ORDER BY device_id, time LIMIT 1;
                                                       QUERY PLAN                                                        
-------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=1 loops=1)
   ->  Merge Append (actual rows=1 loops=1)
         Sort Key: _hyper_3_13_chunk.device_id, _hyper_3_13_chunk."time"
         ->  Custom Scan (DecompressChunk) on _hyper_3_13_chunk (actual rows=1 loops=1)
               ->  Sort (actual rows=1 loops=1)
                     Sort Key: compress_hyper_4_18_chunk.device_id, compress_hyper_4_18_chunk._ts_meta_sequence_num DESC
                     Sort Method: quicksort 
                     ->  Seq Scan on compress_hyper_4_18_chunk (actual rows=20 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_3_14_chunk (actual rows=1 loops=1)
               ->  Sort (actual rows=1 loops=1)
                     Sort Key: compress_hyper_4_17_chunk.device_id, compress_hyper_4_17_chunk._ts_meta_sequence_num DESC
                     Sort Method: quicksort 
                     ->  Seq Scan on compress_hyper_4_17_chunk (actual rows=30 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_3_15_chunk (actual rows=1 loops=1)
               ->  Sort (actual rows=1 loops=1)
                     Sort Key: compress_hyper_4_16_chunk.device_id, compress_hyper_4_16_chunk._ts_meta_sequence_num DESC
                     Sort Method: quicksort 
                     ->  Seq Scan on compress_hyper_4_16_chunk (actual rows=30 loops=1)
(18 rows)

-- test equality constraint on ORDER BY prefix
-- currently not optimized
:PREFIX SELECT
  time, device_id
FROM :TEST_TABLE
WHERE device_id = 1
ORDER BY device_id, time LIMIT 10;
                                                                            QUERY PLAN                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=10 loops=1)
   ->  Merge Append (actual rows=10 loops=1)
         Sort Key: _hyper_3_13_chunk."time"
         ->  Custom Scan (DecompressChunk) on _hyper_3_13_chunk (actual rows=10 loops=1)
               ->  Index Scan Backward using compress_hyper_4_18_chunk__compressed_hypertable_4_device_id__t on compress_hyper_4_18_chunk (actual rows=1 loops=1)
                     Index Cond: (device_id = 1)
         ->  Custom Scan (DecompressChunk) on _hyper_3_14_chunk (actual rows=1 loops=1)
               ->  Index Scan Backward using compress_hyper_4_17_chunk__compressed_hypertable_4_device_id__t on compress_hyper_4_17_chunk (actual rows=1 loops=1)
                     Index Cond: (device_id = 1)
         ->  Custom Scan (DecompressChunk) on _hyper_3_15_chunk (actual rows=1 loops=1)
               ->  Index Scan Backward using compress_hyper_4_16_chunk__compressed_hypertable_4_device_id__t on compress_hyper_4_16_chunk (actual rows=1 loops=1)
                     Index Cond: (device_id = 1)
(12 rows)

-- queries without LIMIT should use ordered append
:PREFIX SELECT
  time
FROM :TEST_TABLE
ORDER BY time ASC;
                                         QUERY PLAN                                         
--------------------------------------------------------------------------------------------
 Sort (actual rows=68370 loops=1)
   Sort Key: _hyper_3_13_chunk."time"
   Sort Method: quicksort 
   ->  Append (actual rows=68370 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_3_13_chunk (actual rows=17990 loops=1)
               ->  Seq Scan on compress_hyper_4_18_chunk (actual rows=20 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_3_14_chunk (actual rows=25190 loops=1)
               ->  Seq Scan on compress_hyper_4_17_chunk (actual rows=30 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_3_15_chunk (actual rows=25190 loops=1)
               ->  Seq Scan on compress_hyper_4_16_chunk (actual rows=30 loops=1)
(10 rows)

-- queries without ORDER BY shouldnt use ordered append
:PREFIX SELECT
  pg_typeof(time)
FROM :TEST_TABLE
LIMIT 1;
                                          QUERY PLAN                                          
----------------------------------------------------------------------------------------------
 Limit (actual rows=1 loops=1)
   ->  Result (actual rows=1 loops=1)
         ->  Append (actual rows=1 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_3_13_chunk (actual rows=1 loops=1)
                     ->  Seq Scan on compress_hyper_4_18_chunk (actual rows=1 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_3_14_chunk (never executed)
                     ->  Seq Scan on compress_hyper_4_17_chunk (never executed)
               ->  Custom Scan (DecompressChunk) on _hyper_3_15_chunk (never executed)
                     ->  Seq Scan on compress_hyper_4_16_chunk (never executed)
(9 rows)

-- test interaction with constraint exclusion
:PREFIX SELECT
  time
FROM :TEST_TABLE
WHERE time > '2000-01-07'
ORDER BY time ASC LIMIT 1;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Limit (actual rows=1 loops=1)
   ->  Sort (actual rows=1 loops=1)
         Sort Key: _hyper_3_14_chunk."time"
         Sort Method: top-N heapsort 
         ->  Append (actual rows=45575 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_3_14_chunk (actual rows=20385 loops=1)
                     Filter: ("time" > 'Fri Jan 07 00:00:00 2000 PST'::timestamp with time zone)
                     Rows Removed by Filter: 4615
                     ->  Seq Scan on compress_hyper_4_17_chunk (actual rows=25 loops=1)
                           Filter: (_ts_meta_max_1 > 'Fri Jan 07 00:00:00 2000 PST'::timestamp with time zone)
                           Rows Removed by Filter: 5
               ->  Custom Scan (DecompressChunk) on _hyper_3_15_chunk (actual rows=25190 loops=1)
                     Filter: ("time" > 'Fri Jan 07 00:00:00 2000 PST'::timestamp with time zone)
                     ->  Seq Scan on compress_hyper_4_16_chunk (actual rows=30 loops=1)
                           Filter: (_ts_meta_max_1 > 'Fri Jan 07 00:00:00 2000 PST'::timestamp with time zone)
(15 rows)

:PREFIX SELECT
  time
FROM :TEST_TABLE
WHERE time > '2000-01-07'
ORDER BY time DESC LIMIT 1;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Limit (actual rows=1 loops=1)
   ->  Sort (actual rows=1 loops=1)
         Sort Key: _hyper_3_15_chunk."time" DESC
         Sort Method: top-N heapsort 
         ->  Append (actual rows=45575 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_3_15_chunk (actual rows=25190 loops=1)
                     Filter: ("time" > 'Fri Jan 07 00:00:00 2000 PST'::timestamp with time zone)
                     ->  Seq Scan on compress_hyper_4_16_chunk (actual rows=30 loops=1)
                           Filter: (_ts_meta_max_1 > 'Fri Jan 07 00:00:00 2000 PST'::timestamp with time zone)
               ->  Custom Scan (DecompressChunk) on _hyper_3_14_chunk (actual rows=20385 loops=1)
                     Filter: ("time" > 'Fri Jan 07 00:00:00 2000 PST'::timestamp with time zone)
                     Rows Removed by Filter: 4615
                     ->  Seq Scan on compress_hyper_4_17_chunk (actual rows=25 loops=1)
                           Filter: (_ts_meta_max_1 > 'Fri Jan 07 00:00:00 2000 PST'::timestamp with time zone)
                           Rows Removed by Filter: 5
(15 rows)

-- test interaction with runtime exclusion
:PREFIX SELECT
  time
FROM :TEST_TABLE
WHERE time > '2000-01-08'::text::timestamptz
ORDER BY time ASC LIMIT 1;
                                            QUERY PLAN                                            
--------------------------------------------------------------------------------------------------
 Limit (actual rows=1 loops=1)
   ->  Sort (actual rows=1 loops=1)
         Sort Key: metrics_compressed."time"
         Sort Method: top-N heapsort 
         ->  Custom Scan (ChunkAppend) on metrics_compressed (actual rows=41975 loops=1)
               Chunks excluded during startup: 1
               ->  Custom Scan (DecompressChunk) on _hyper_3_14_chunk (actual rows=16785 loops=1)
                     Filter: ("time" > ('2000-01-08'::cstring)::timestamp with time zone)
                     Rows Removed by Filter: 8405
                     ->  Seq Scan on compress_hyper_4_17_chunk (actual rows=30 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_3_15_chunk (actual rows=25190 loops=1)
                     Filter: ("time" > ('2000-01-08'::cstring)::timestamp with time zone)
                     ->  Seq Scan on compress_hyper_4_16_chunk (actual rows=30 loops=1)
(13 rows)

:PREFIX SELECT
  time
FROM :TEST_TABLE
WHERE time < '2000-01-08'::text::timestamptz
ORDER BY time ASC LIMIT 1;
                                            QUERY PLAN                                            
--------------------------------------------------------------------------------------------------
 Limit (actual rows=1 loops=1)
   ->  Sort (actual rows=1 loops=1)
         Sort Key: metrics_compressed."time"
         Sort Method: top-N heapsort 
         ->  Custom Scan (ChunkAppend) on metrics_compressed (actual rows=26390 loops=1)
               Chunks excluded during startup: 1
               ->  Custom Scan (DecompressChunk) on _hyper_3_13_chunk (actual rows=17990 loops=1)
                     Filter: ("time" < ('2000-01-08'::cstring)::timestamp with time zone)
                     ->  Seq Scan on compress_hyper_4_18_chunk (actual rows=20 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_3_14_chunk (actual rows=8400 loops=1)
                     Filter: ("time" < ('2000-01-08'::cstring)::timestamp with time zone)
                     Rows Removed by Filter: 16790
                     ->  Seq Scan on compress_hyper_4_17_chunk (actual rows=30 loops=1)
(13 rows)

-- test constraint exclusion
:PREFIX SELECT
  time
FROM :TEST_TABLE
WHERE time > '2000-01-08'::text::timestamptz AND time < '2000-01-10'
ORDER BY time ASC LIMIT 1;
                                                                             QUERY PLAN                                                                             
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=1 loops=1)
   ->  Sort (actual rows=1 loops=1)
         Sort Key: metrics_compressed."time"
         Sort Method: top-N heapsort 
         ->  Custom Scan (ChunkAppend) on metrics_compressed (actual rows=7195 loops=1)
               Chunks excluded during startup: 1
               ->  Custom Scan (DecompressChunk) on _hyper_3_14_chunk (actual rows=7195 loops=1)
                     Filter: (("time" < 'Mon Jan 10 00:00:00 2000 PST'::timestamp with time zone) AND ("time" > ('2000-01-08'::cstring)::timestamp with time zone))
                     Rows Removed by Filter: 12995
                     ->  Seq Scan on compress_hyper_4_17_chunk (actual rows=25 loops=1)
                           Filter: (_ts_meta_min_1 < 'Mon Jan 10 00:00:00 2000 PST'::timestamp with time zone)
                           Rows Removed by Filter: 5
(12 rows)

:PREFIX SELECT
  time
FROM :TEST_TABLE
WHERE time < '2000-01-08'::text::timestamptz AND time > '2000-01-07'
ORDER BY time ASC LIMIT 1;
                                                                             QUERY PLAN                                                                             
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=1 loops=1)
   ->  Sort (actual rows=1 loops=1)
         Sort Key: metrics_compressed."time"
         Sort Method: top-N heapsort 
         ->  Custom Scan (ChunkAppend) on metrics_compressed (actual rows=3595 loops=1)
               Chunks excluded during startup: 1
               ->  Custom Scan (DecompressChunk) on _hyper_3_14_chunk (actual rows=3595 loops=1)
                     Filter: (("time" > 'Fri Jan 07 00:00:00 2000 PST'::timestamp with time zone) AND ("time" < ('2000-01-08'::cstring)::timestamp with time zone))
                     Rows Removed by Filter: 21405
                     ->  Seq Scan on compress_hyper_4_17_chunk (actual rows=25 loops=1)
                           Filter: (_ts_meta_max_1 > 'Fri Jan 07 00:00:00 2000 PST'::timestamp with time zone)
                           Rows Removed by Filter: 5
(12 rows)

-- min/max queries
:PREFIX SELECT max(time) FROM :TEST_TABLE;
                                         QUERY PLAN                                         
--------------------------------------------------------------------------------------------
 Aggregate (actual rows=1 loops=1)
   ->  Append (actual rows=68370 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_3_13_chunk (actual rows=17990 loops=1)
               ->  Seq Scan on compress_hyper_4_18_chunk (actual rows=20 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_3_14_chunk (actual rows=25190 loops=1)
               ->  Seq Scan on compress_hyper_4_17_chunk (actual rows=30 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_3_15_chunk (actual rows=25190 loops=1)
               ->  Seq Scan on compress_hyper_4_16_chunk (actual rows=30 loops=1)
(8 rows)

:PREFIX SELECT min(time) FROM :TEST_TABLE;
                                         QUERY PLAN                                         
--------------------------------------------------------------------------------------------
 Aggregate (actual rows=1 loops=1)
   ->  Append (actual rows=68370 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_3_13_chunk (actual rows=17990 loops=1)
               ->  Seq Scan on compress_hyper_4_18_chunk (actual rows=20 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_3_14_chunk (actual rows=25190 loops=1)
               ->  Seq Scan on compress_hyper_4_17_chunk (actual rows=30 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_3_15_chunk (actual rows=25190 loops=1)
               ->  Seq Scan on compress_hyper_4_16_chunk (actual rows=30 loops=1)
(8 rows)

-- test first/last (doesn't use ordered append yet)
:PREFIX SELECT first(time, time) FROM :TEST_TABLE;
                                         QUERY PLAN                                         
--------------------------------------------------------------------------------------------
 Aggregate (actual rows=1 loops=1)
   ->  Append (actual rows=68370 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_3_13_chunk (actual rows=17990 loops=1)
               ->  Seq Scan on compress_hyper_4_18_chunk (actual rows=20 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_3_14_chunk (actual rows=25190 loops=1)
               ->  Seq Scan on compress_hyper_4_17_chunk (actual rows=30 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_3_15_chunk (actual rows=25190 loops=1)
               ->  Seq Scan on compress_hyper_4_16_chunk (actual rows=30 loops=1)
(8 rows)

:PREFIX SELECT last(time, time) FROM :TEST_TABLE;
                                         QUERY PLAN                                         
--------------------------------------------------------------------------------------------
 Aggregate (actual rows=1 loops=1)
   ->  Append (actual rows=68370 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_3_13_chunk (actual rows=17990 loops=1)
               ->  Seq Scan on compress_hyper_4_18_chunk (actual rows=20 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_3_14_chunk (actual rows=25190 loops=1)
               ->  Seq Scan on compress_hyper_4_17_chunk (actual rows=30 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_3_15_chunk (actual rows=25190 loops=1)
               ->  Seq Scan on compress_hyper_4_16_chunk (actual rows=30 loops=1)
(8 rows)

-- test query with time_bucket
:PREFIX SELECT
  time_bucket('1d',time)
FROM :TEST_TABLE
ORDER BY time ASC LIMIT 1;
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 Limit (actual rows=1 loops=1)
   ->  Sort (actual rows=1 loops=1)
         Sort Key: _hyper_3_13_chunk."time"
         Sort Method: top-N heapsort 
         ->  Result (actual rows=68370 loops=1)
               ->  Append (actual rows=68370 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_3_13_chunk (actual rows=17990 loops=1)
                           ->  Seq Scan on compress_hyper_4_18_chunk (actual rows=20 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_3_14_chunk (actual rows=25190 loops=1)
                           ->  Seq Scan on compress_hyper_4_17_chunk (actual rows=30 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_3_15_chunk (actual rows=25190 loops=1)
                           ->  Seq Scan on compress_hyper_4_16_chunk (actual rows=30 loops=1)
(12 rows)

-- test query with ORDER BY time_bucket
:PREFIX SELECT
  time_bucket('1d',time)
FROM :TEST_TABLE
ORDER BY 1 LIMIT 1;
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 Limit (actual rows=1 loops=1)
   ->  Sort (actual rows=1 loops=1)
         Sort Key: (time_bucket('@ 1 day'::interval, _hyper_3_13_chunk."time"))
         Sort Method: top-N heapsort 
         ->  Result (actual rows=68370 loops=1)
               ->  Append (actual rows=68370 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_3_13_chunk (actual rows=17990 loops=1)
                           ->  Seq Scan on compress_hyper_4_18_chunk (actual rows=20 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_3_14_chunk (actual rows=25190 loops=1)
                           ->  Seq Scan on compress_hyper_4_17_chunk (actual rows=30 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_3_15_chunk (actual rows=25190 loops=1)
                           ->  Seq Scan on compress_hyper_4_16_chunk (actual rows=30 loops=1)
(12 rows)

-- test query with ORDER BY time_bucket, device_id
-- must not use ordered append
:PREFIX SELECT
  time_bucket('1d',time), device_id, v0
FROM :TEST_TABLE
ORDER BY time_bucket('1d',time), device_id LIMIT 1;
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Limit (actual rows=1 loops=1)
   ->  Sort (actual rows=1 loops=1)
         Sort Key: (time_bucket('@ 1 day'::interval, _hyper_3_13_chunk."time")), _hyper_3_13_chunk.device_id
         Sort Method: top-N heapsort 
         ->  Result (actual rows=68370 loops=1)
               ->  Append (actual rows=68370 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_3_13_chunk (actual rows=17990 loops=1)
                           ->  Seq Scan on compress_hyper_4_18_chunk (actual rows=20 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_3_14_chunk (actual rows=25190 loops=1)
                           ->  Seq Scan on compress_hyper_4_17_chunk (actual rows=30 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_3_15_chunk (actual rows=25190 loops=1)
                           ->  Seq Scan on compress_hyper_4_16_chunk (actual rows=30 loops=1)
(12 rows)

-- test query with ORDER BY date_trunc
:PREFIX SELECT
  time_bucket('1d',time)
FROM :TEST_TABLE
ORDER BY date_trunc('day', time) LIMIT 1;
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 Limit (actual rows=1 loops=1)
   ->  Sort (actual rows=1 loops=1)
         Sort Key: (date_trunc('day'::text, _hyper_3_13_chunk."time"))
         Sort Method: top-N heapsort 
         ->  Result (actual rows=68370 loops=1)
               ->  Append (actual rows=68370 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_3_13_chunk (actual rows=17990 loops=1)
                           ->  Seq Scan on compress_hyper_4_18_chunk (actual rows=20 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_3_14_chunk (actual rows=25190 loops=1)
                           ->  Seq Scan on compress_hyper_4_17_chunk (actual rows=30 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_3_15_chunk (actual rows=25190 loops=1)
                           ->  Seq Scan on compress_hyper_4_16_chunk (actual rows=30 loops=1)
(12 rows)

-- test query with ORDER BY date_trunc
:PREFIX SELECT
  date_trunc('day',time), device_id, v0
FROM :TEST_TABLE
ORDER BY 1 LIMIT 1;
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 Limit (actual rows=1 loops=1)
   ->  Sort (actual rows=1 loops=1)
         Sort Key: (date_trunc('day'::text, _hyper_3_13_chunk."time"))
         Sort Method: top-N heapsort 
         ->  Result (actual rows=68370 loops=1)
               ->  Append (actual rows=68370 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_3_13_chunk (actual rows=17990 loops=1)
                           ->  Seq Scan on compress_hyper_4_18_chunk (actual rows=20 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_3_14_chunk (actual rows=25190 loops=1)
                           ->  Seq Scan on compress_hyper_4_17_chunk (actual rows=30 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_3_15_chunk (actual rows=25190 loops=1)
                           ->  Seq Scan on compress_hyper_4_16_chunk (actual rows=30 loops=1)
(12 rows)

-- test query with ORDER BY date_trunc, device_id
-- must not use ordered append
:PREFIX SELECT
  date_trunc('day',time), device_id, v0
FROM :TEST_TABLE
ORDER BY 1,2 LIMIT 1;
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 Limit (actual rows=1 loops=1)
   ->  Sort (actual rows=1 loops=1)
         Sort Key: (date_trunc('day'::text, _hyper_3_13_chunk."time")), _hyper_3_13_chunk.device_id
         Sort Method: top-N heapsort 
         ->  Result (actual rows=68370 loops=1)
               ->  Append (actual rows=68370 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_3_13_chunk (actual rows=17990 loops=1)
                           ->  Seq Scan on compress_hyper_4_18_chunk (actual rows=20 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_3_14_chunk (actual rows=25190 loops=1)
                           ->  Seq Scan on compress_hyper_4_17_chunk (actual rows=30 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_3_15_chunk (actual rows=25190 loops=1)
                           ->  Seq Scan on compress_hyper_4_16_chunk (actual rows=30 loops=1)
(12 rows)

-- test query with now() should result in ordered ChunkAppend
:PREFIX SELECT time FROM :TEST_TABLE WHERE time < now() + '1 month'
ORDER BY time DESC limit 1;
                                            QUERY PLAN                                            
--------------------------------------------------------------------------------------------------
 Limit (actual rows=1 loops=1)
   ->  Sort (actual rows=1 loops=1)
         Sort Key: metrics_compressed."time" DESC
         Sort Method: top-N heapsort 
         ->  Custom Scan (ChunkAppend) on metrics_compressed (actual rows=68370 loops=1)
               Chunks excluded during startup: 0
               ->  Custom Scan (DecompressChunk) on _hyper_3_15_chunk (actual rows=25190 loops=1)
                     Filter: ("time" < (now() + '@ 1 mon'::interval))
                     ->  Seq Scan on compress_hyper_4_16_chunk (actual rows=30 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_3_14_chunk (actual rows=25190 loops=1)
                     Filter: ("time" < (now() + '@ 1 mon'::interval))
                     ->  Seq Scan on compress_hyper_4_17_chunk (actual rows=30 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_3_13_chunk (actual rows=17990 loops=1)
                     Filter: ("time" < (now() + '@ 1 mon'::interval))
                     ->  Seq Scan on compress_hyper_4_18_chunk (actual rows=20 loops=1)
(15 rows)

-- test CTE
:PREFIX WITH i AS (SELECT time FROM :TEST_TABLE WHERE time < now() ORDER BY time DESC limit 100)
SELECT * FROM i;
                                                QUERY PLAN                                                
----------------------------------------------------------------------------------------------------------
 CTE Scan on i (actual rows=100 loops=1)
   CTE i
     ->  Limit (actual rows=100 loops=1)
           ->  Sort (actual rows=100 loops=1)
                 Sort Key: metrics_compressed."time" DESC
                 Sort Method: top-N heapsort 
                 ->  Custom Scan (ChunkAppend) on metrics_compressed (actual rows=68370 loops=1)
                       Chunks excluded during startup: 0
                       ->  Custom Scan (DecompressChunk) on _hyper_3_15_chunk (actual rows=25190 loops=1)
                             Filter: ("time" < now())
                             ->  Seq Scan on compress_hyper_4_16_chunk (actual rows=30 loops=1)
                       ->  Custom Scan (DecompressChunk) on _hyper_3_14_chunk (actual rows=25190 loops=1)
                             Filter: ("time" < now())
                             ->  Seq Scan on compress_hyper_4_17_chunk (actual rows=30 loops=1)
                       ->  Custom Scan (DecompressChunk) on _hyper_3_13_chunk (actual rows=17990 loops=1)
                             Filter: ("time" < now())
                             ->  Seq Scan on compress_hyper_4_18_chunk (actual rows=20 loops=1)
(17 rows)

-- test LATERAL with ordered append in the outer query
:PREFIX SELECT time, pg_typeof(l) FROM :TEST_TABLE, LATERAL(SELECT * FROM (VALUES (1),(2)) v) l ORDER BY time DESC limit 2;
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 Limit (actual rows=2 loops=1)
   ->  Sort (actual rows=2 loops=1)
         Sort Key: _hyper_3_15_chunk."time" DESC
         Sort Method: top-N heapsort 
         ->  Nested Loop (actual rows=136740 loops=1)
               ->  Values Scan on "*VALUES*" (actual rows=2 loops=1)
               ->  Append (actual rows=68370 loops=2)
                     ->  Custom Scan (DecompressChunk) on _hyper_3_15_chunk (actual rows=25190 loops=2)
                           ->  Seq Scan on compress_hyper_4_16_chunk (actual rows=30 loops=2)
                     ->  Custom Scan (DecompressChunk) on _hyper_3_14_chunk (actual rows=25190 loops=2)
                           ->  Seq Scan on compress_hyper_4_17_chunk (actual rows=30 loops=2)
                     ->  Custom Scan (DecompressChunk) on _hyper_3_13_chunk (actual rows=17990 loops=2)
                           ->  Seq Scan on compress_hyper_4_18_chunk (actual rows=20 loops=2)
(13 rows)

-- test LATERAL with ordered append in the lateral query
:PREFIX SELECT time, pg_typeof(v) FROM (VALUES (1),(2)) v, LATERAL(SELECT * FROM :TEST_TABLE ORDER BY time DESC limit 2) l;
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Nested Loop (actual rows=4 loops=1)
   ->  Values Scan on "*VALUES*" (actual rows=2 loops=1)
   ->  Materialize (actual rows=2 loops=2)
         ->  Subquery Scan on l (actual rows=2 loops=1)
               ->  Limit (actual rows=2 loops=1)
                     ->  Sort (actual rows=2 loops=1)
                           Sort Key: _hyper_3_15_chunk."time" DESC
                           Sort Method: top-N heapsort 
                           ->  Result (actual rows=68370 loops=1)
                                 ->  Append (actual rows=68370 loops=1)
                                       ->  Custom Scan (DecompressChunk) on _hyper_3_15_chunk (actual rows=25190 loops=1)
                                             ->  Seq Scan on compress_hyper_4_16_chunk (actual rows=30 loops=1)
                                       ->  Custom Scan (DecompressChunk) on _hyper_3_14_chunk (actual rows=25190 loops=1)
                                             ->  Seq Scan on compress_hyper_4_17_chunk (actual rows=30 loops=1)
                                       ->  Custom Scan (DecompressChunk) on _hyper_3_13_chunk (actual rows=17990 loops=1)
                                             ->  Seq Scan on compress_hyper_4_18_chunk (actual rows=20 loops=1)
(16 rows)

-- test plan with best index is chosen
-- this should use device_id, time index
:PREFIX SELECT time, device_id FROM :TEST_TABLE WHERE device_id = 1 ORDER BY time DESC LIMIT 1;
                                                                       QUERY PLAN                                                                        
---------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=1 loops=1)
   ->  Custom Scan (ChunkAppend) on metrics_compressed (actual rows=1 loops=1)
         Order: metrics_compressed."time" DESC
         ->  Custom Scan (DecompressChunk) on _hyper_3_15_chunk (actual rows=1 loops=1)
               ->  Index Scan using compress_hyper_4_16_chunk__compressed_hypertable_4_device_id__t on compress_hyper_4_16_chunk (actual rows=1 loops=1)
                     Index Cond: (device_id = 1)
         ->  Custom Scan (DecompressChunk) on _hyper_3_14_chunk (never executed)
               ->  Index Scan using compress_hyper_4_17_chunk__compressed_hypertable_4_device_id__t on compress_hyper_4_17_chunk (never executed)
                     Index Cond: (device_id = 1)
         ->  Custom Scan (DecompressChunk) on _hyper_3_13_chunk (never executed)
               ->  Index Scan using compress_hyper_4_18_chunk__compressed_hypertable_4_device_id__t on compress_hyper_4_18_chunk (never executed)
                     Index Cond: (device_id = 1)
(12 rows)

-- test plan with best index is chosen
-- this should use time index
:PREFIX SELECT time FROM :TEST_TABLE ORDER BY time DESC LIMIT 1;
                                            QUERY PLAN                                            
--------------------------------------------------------------------------------------------------
 Limit (actual rows=1 loops=1)
   ->  Sort (actual rows=1 loops=1)
         Sort Key: _hyper_3_15_chunk."time" DESC
         Sort Method: top-N heapsort 
         ->  Append (actual rows=68370 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_3_15_chunk (actual rows=25190 loops=1)
                     ->  Seq Scan on compress_hyper_4_16_chunk (actual rows=30 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_3_14_chunk (actual rows=25190 loops=1)
                     ->  Seq Scan on compress_hyper_4_17_chunk (actual rows=30 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_3_13_chunk (actual rows=17990 loops=1)
                     ->  Seq Scan on compress_hyper_4_18_chunk (actual rows=20 loops=1)
(11 rows)

-- test LATERAL with correlated query
-- only last chunk should be executed
:PREFIX SELECT g.time, l.time
FROM generate_series('2000-01-01'::timestamptz,'2000-01-03','1d') AS g(time)
LEFT OUTER JOIN LATERAL(
  SELECT * FROM :TEST_TABLE o
    WHERE o.time >= g.time AND o.time < g.time + '1d'::interval ORDER BY time DESC LIMIT 1
) l ON true;
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Nested Loop Left Join (actual rows=3 loops=1)
   ->  Function Scan on generate_series g (actual rows=3 loops=1)
   ->  Limit (actual rows=1 loops=3)
         ->  Sort (actual rows=1 loops=3)
               Sort Key: o."time" DESC
               Sort Method: top-N heapsort 
               ->  Custom Scan (ChunkAppend) on metrics_compressed o (actual rows=3600 loops=3)
                     Chunks excluded during startup: 0
                     Chunks excluded during runtime: 2
                     ->  Custom Scan (DecompressChunk) on _hyper_3_15_chunk o_1 (never executed)
                           Filter: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)))
                           ->  Seq Scan on compress_hyper_4_16_chunk (never executed)
                                 Filter: ((_ts_meta_max_1 >= g."time") AND (_ts_meta_min_1 < (g."time" + '@ 1 day'::interval)))
                     ->  Custom Scan (DecompressChunk) on _hyper_3_14_chunk o_2 (never executed)
                           Filter: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)))
                           ->  Seq Scan on compress_hyper_4_17_chunk (never executed)
                                 Filter: ((_ts_meta_max_1 >= g."time") AND (_ts_meta_min_1 < (g."time" + '@ 1 day'::interval)))
                     ->  Custom Scan (DecompressChunk) on _hyper_3_13_chunk o_3 (actual rows=3600 loops=3)
                           Filter: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)))
                           Rows Removed by Filter: 4063
                           ->  Seq Scan on compress_hyper_4_18_chunk (actual rows=8 loops=3)
                                 Filter: ((_ts_meta_max_1 >= g."time") AND (_ts_meta_min_1 < (g."time" + '@ 1 day'::interval)))
                                 Rows Removed by Filter: 12
(23 rows)

-- test LATERAL with correlated query
-- only 2nd chunk should be executed
:PREFIX SELECT g.time, l.time
FROM generate_series('2000-01-10'::timestamptz,'2000-01-11','1d') AS g(time)
LEFT OUTER JOIN LATERAL(
  SELECT * FROM :TEST_TABLE o
    WHERE o.time >= g.time AND o.time < g.time + '1d'::interval ORDER BY time LIMIT 1
) l ON true;
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Nested Loop Left Join (actual rows=2 loops=1)
   ->  Function Scan on generate_series g (actual rows=2 loops=1)
   ->  Limit (actual rows=1 loops=2)
         ->  Sort (actual rows=1 loops=2)
               Sort Key: o."time"
               Sort Method: top-N heapsort 
               ->  Custom Scan (ChunkAppend) on metrics_compressed o (actual rows=3600 loops=2)
                     Chunks excluded during startup: 0
                     Chunks excluded during runtime: 2
                     ->  Custom Scan (DecompressChunk) on _hyper_3_13_chunk o_1 (never executed)
                           Filter: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)))
                           ->  Seq Scan on compress_hyper_4_18_chunk (never executed)
                                 Filter: ((_ts_meta_max_1 >= g."time") AND (_ts_meta_min_1 < (g."time" + '@ 1 day'::interval)))
                     ->  Custom Scan (DecompressChunk) on _hyper_3_14_chunk o_2 (actual rows=3600 loops=2)
                           Filter: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)))
                           Rows Removed by Filter: 3900
                           ->  Seq Scan on compress_hyper_4_17_chunk (actual rows=8 loops=2)
                                 Filter: ((_ts_meta_max_1 >= g."time") AND (_ts_meta_min_1 < (g."time" + '@ 1 day'::interval)))
                                 Rows Removed by Filter: 22
                     ->  Custom Scan (DecompressChunk) on _hyper_3_15_chunk o_3 (never executed)
                           Filter: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)))
                           ->  Seq Scan on compress_hyper_4_16_chunk (never executed)
                                 Filter: ((_ts_meta_max_1 >= g."time") AND (_ts_meta_min_1 < (g."time" + '@ 1 day'::interval)))
(23 rows)

-- test startup and runtime exclusion together
:PREFIX SELECT g.time, l.time
FROM generate_series('2000-01-01'::timestamptz,'2000-01-03','1d') AS g(time)
LEFT OUTER JOIN LATERAL(
  SELECT * FROM :TEST_TABLE o
    WHERE o.time >= g.time AND o.time < g.time + '1d'::interval AND o.time < now() ORDER BY time DESC LIMIT 1
) l ON true;
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Nested Loop Left Join (actual rows=3 loops=1)
   ->  Function Scan on generate_series g (actual rows=3 loops=1)
   ->  Limit (actual rows=1 loops=3)
         ->  Sort (actual rows=1 loops=3)
               Sort Key: o."time" DESC
               Sort Method: top-N heapsort 
               ->  Custom Scan (ChunkAppend) on metrics_compressed o (actual rows=3600 loops=3)
                     Chunks excluded during startup: 0
                     Chunks excluded during runtime: 2
                     ->  Custom Scan (DecompressChunk) on _hyper_3_15_chunk o_1 (never executed)
                           Filter: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)) AND ("time" < now()))
                           ->  Seq Scan on compress_hyper_4_16_chunk (never executed)
                                 Filter: ((_ts_meta_max_1 >= g."time") AND (_ts_meta_min_1 < (g."time" + '@ 1 day'::interval)))
                     ->  Custom Scan (DecompressChunk) on _hyper_3_14_chunk o_2 (never executed)
                           Filter: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)) AND ("time" < now()))
                           ->  Seq Scan on compress_hyper_4_17_chunk (never executed)
                                 Filter: ((_ts_meta_max_1 >= g."time") AND (_ts_meta_min_1 < (g."time" + '@ 1 day'::interval)))
                     ->  Custom Scan (DecompressChunk) on _hyper_3_13_chunk o_3 (actual rows=3600 loops=3)
                           Filter: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)) AND ("time" < now()))
                           Rows Removed by Filter: 4063
                           ->  Seq Scan on compress_hyper_4_18_chunk (actual rows=8 loops=3)
                                 Filter: ((_ts_meta_max_1 >= g."time") AND (_ts_meta_min_1 < (g."time" + '@ 1 day'::interval)))
                                 Rows Removed by Filter: 12
(23 rows)

-- test startup and runtime exclusion together
-- all chunks should be filtered
:PREFIX SELECT g.time, l.time
FROM generate_series('2000-01-01'::timestamptz,'2000-01-03','1d') AS g(time)
LEFT OUTER JOIN LATERAL(
  SELECT * FROM :TEST_TABLE o
    WHERE o.time >= g.time AND o.time < g.time + '1d'::interval AND o.time > now() ORDER BY time DESC LIMIT 1
) l ON true;
                                         QUERY PLAN                                          
---------------------------------------------------------------------------------------------
 Nested Loop Left Join (actual rows=3 loops=1)
   ->  Function Scan on generate_series g (actual rows=3 loops=1)
   ->  Limit (actual rows=0 loops=3)
         ->  Sort (actual rows=0 loops=3)
               Sort Key: o."time" DESC
               Sort Method: quicksort 
               ->  Custom Scan (ChunkAppend) on metrics_compressed o (actual rows=0 loops=3)
                     Chunks excluded during startup: 3
(8 rows)

-- test CTE
-- no chunk exclusion for CTE because cte query is not pulled up
:PREFIX WITH cte AS (SELECT time FROM :TEST_TABLE ORDER BY time)
SELECT * FROM cte WHERE time < '2000-02-01'::timestamptz;
                                             QUERY PLAN                                             
----------------------------------------------------------------------------------------------------
 CTE Scan on cte (actual rows=68370 loops=1)
   Filter: ("time" < 'Tue Feb 01 00:00:00 2000 PST'::timestamp with time zone)
   CTE cte
     ->  Sort (actual rows=68370 loops=1)
           Sort Key: _hyper_3_13_chunk."time"
           Sort Method: quicksort 
           ->  Append (actual rows=68370 loops=1)
                 ->  Custom Scan (DecompressChunk) on _hyper_3_13_chunk (actual rows=17990 loops=1)
                       ->  Seq Scan on compress_hyper_4_18_chunk (actual rows=20 loops=1)
                 ->  Custom Scan (DecompressChunk) on _hyper_3_14_chunk (actual rows=25190 loops=1)
                       ->  Seq Scan on compress_hyper_4_17_chunk (actual rows=30 loops=1)
                 ->  Custom Scan (DecompressChunk) on _hyper_3_15_chunk (actual rows=25190 loops=1)
                       ->  Seq Scan on compress_hyper_4_16_chunk (actual rows=30 loops=1)
(13 rows)

-- test JOIN
-- no exclusion on joined table because quals are not propagated yet
:PREFIX SELECT o1.time, o2.time
FROM :TEST_TABLE o1
INNER JOIN :TEST_TABLE o2 ON o1.time = o2.time
WHERE o1.time < '2000-02-01'
ORDER BY o1.time;
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Merge Join (actual rows=341850 loops=1)
   Merge Cond: (o1."time" = o2."time")
   ->  Sort (actual rows=68370 loops=1)
         Sort Key: o1."time"
         Sort Method: quicksort 
         ->  Append (actual rows=68370 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_3_13_chunk o1 (actual rows=17990 loops=1)
                     Filter: ("time" < 'Tue Feb 01 00:00:00 2000 PST'::timestamp with time zone)
                     ->  Seq Scan on compress_hyper_4_18_chunk (actual rows=20 loops=1)
                           Filter: (_ts_meta_min_1 < 'Tue Feb 01 00:00:00 2000 PST'::timestamp with time zone)
               ->  Custom Scan (DecompressChunk) on _hyper_3_14_chunk o1_1 (actual rows=25190 loops=1)
                     Filter: ("time" < 'Tue Feb 01 00:00:00 2000 PST'::timestamp with time zone)
                     ->  Seq Scan on compress_hyper_4_17_chunk (actual rows=30 loops=1)
                           Filter: (_ts_meta_min_1 < 'Tue Feb 01 00:00:00 2000 PST'::timestamp with time zone)
               ->  Custom Scan (DecompressChunk) on _hyper_3_15_chunk o1_2 (actual rows=25190 loops=1)
                     Filter: ("time" < 'Tue Feb 01 00:00:00 2000 PST'::timestamp with time zone)
                     ->  Seq Scan on compress_hyper_4_16_chunk (actual rows=30 loops=1)
                           Filter: (_ts_meta_min_1 < 'Tue Feb 01 00:00:00 2000 PST'::timestamp with time zone)
   ->  Sort (actual rows=341846 loops=1)
         Sort Key: o2."time"
         Sort Method: quicksort 
         ->  Append (actual rows=68370 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_3_13_chunk o2 (actual rows=17990 loops=1)
                     Filter: ("time" < 'Tue Feb 01 00:00:00 2000 PST'::timestamp with time zone)
                     ->  Seq Scan on compress_hyper_4_18_chunk compress_hyper_4_18_chunk_1 (actual rows=20 loops=1)
                           Filter: (_ts_meta_min_1 < 'Tue Feb 01 00:00:00 2000 PST'::timestamp with time zone)
               ->  Custom Scan (DecompressChunk) on _hyper_3_14_chunk o2_1 (actual rows=25190 loops=1)
                     Filter: ("time" < 'Tue Feb 01 00:00:00 2000 PST'::timestamp with time zone)
                     ->  Seq Scan on compress_hyper_4_17_chunk compress_hyper_4_17_chunk_1 (actual rows=30 loops=1)
                           Filter: (_ts_meta_min_1 < 'Tue Feb 01 00:00:00 2000 PST'::timestamp with time zone)
               ->  Custom Scan (DecompressChunk) on _hyper_3_15_chunk o2_2 (actual rows=25190 loops=1)
                     Filter: ("time" < 'Tue Feb 01 00:00:00 2000 PST'::timestamp with time zone)
                     ->  Seq Scan on compress_hyper_4_16_chunk compress_hyper_4_16_chunk_1 (actual rows=30 loops=1)
                           Filter: (_ts_meta_min_1 < 'Tue Feb 01 00:00:00 2000 PST'::timestamp with time zone)
(34 rows)

-- test JOIN
-- last chunk of o2 should not be executed
:PREFIX SELECT o1.time, o2.time
FROM :TEST_TABLE o1
INNER JOIN (SELECT * FROM :TEST_TABLE o2 ORDER BY time) o2 ON o1.time = o2.time
WHERE o1.time < '2000-01-08'
ORDER BY o1.time LIMIT 10;
                                                              QUERY PLAN                                                              
--------------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=10 loops=1)
   ->  Merge Join (actual rows=10 loops=1)
         Merge Cond: (o1."time" = o2."time")
         ->  Sort (actual rows=2 loops=1)
               Sort Key: o1."time"
               Sort Method: quicksort 
               ->  Append (actual rows=26390 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_3_13_chunk o1 (actual rows=17990 loops=1)
                           Filter: ("time" < 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
                           ->  Seq Scan on compress_hyper_4_18_chunk (actual rows=20 loops=1)
                                 Filter: (_ts_meta_min_1 < 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
                     ->  Custom Scan (DecompressChunk) on _hyper_3_14_chunk o1_1 (actual rows=8400 loops=1)
                           Filter: ("time" < 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
                           Rows Removed by Filter: 1790
                           ->  Seq Scan on compress_hyper_4_17_chunk (actual rows=15 loops=1)
                                 Filter: (_ts_meta_min_1 < 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
                                 Rows Removed by Filter: 15
         ->  Materialize (actual rows=10 loops=1)
               ->  Sort (actual rows=6 loops=1)
                     Sort Key: o2."time"
                     Sort Method: quicksort 
                     ->  Result (actual rows=68370 loops=1)
                           ->  Append (actual rows=68370 loops=1)
                                 ->  Custom Scan (DecompressChunk) on _hyper_3_13_chunk o2 (actual rows=17990 loops=1)
                                       ->  Seq Scan on compress_hyper_4_18_chunk compress_hyper_4_18_chunk_1 (actual rows=20 loops=1)
                                 ->  Custom Scan (DecompressChunk) on _hyper_3_14_chunk o2_1 (actual rows=25190 loops=1)
                                       ->  Seq Scan on compress_hyper_4_17_chunk compress_hyper_4_17_chunk_1 (actual rows=30 loops=1)
                                 ->  Custom Scan (DecompressChunk) on _hyper_3_15_chunk o2_2 (actual rows=25190 loops=1)
                                       ->  Seq Scan on compress_hyper_4_16_chunk (actual rows=30 loops=1)
(29 rows)

-- test subquery
-- not ChunkAppend so no chunk exclusion
:PREFIX SELECT time
FROM :TEST_TABLE WHERE time = (SELECT max(time) FROM :TEST_TABLE) ORDER BY time;
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on metrics_compressed (actual rows=5 loops=1)
   Chunks excluded during runtime: 1
   InitPlan 1 (returns $0)
     ->  Aggregate (actual rows=1 loops=1)
           ->  Append (actual rows=68370 loops=1)
                 ->  Custom Scan (DecompressChunk) on _hyper_3_13_chunk _hyper_3_13_chunk_1 (actual rows=17990 loops=1)
                       ->  Seq Scan on compress_hyper_4_18_chunk compress_hyper_4_18_chunk_1 (actual rows=20 loops=1)
                 ->  Custom Scan (DecompressChunk) on _hyper_3_14_chunk _hyper_3_14_chunk_1 (actual rows=25190 loops=1)
                       ->  Seq Scan on compress_hyper_4_17_chunk compress_hyper_4_17_chunk_1 (actual rows=30 loops=1)
                 ->  Custom Scan (DecompressChunk) on _hyper_3_15_chunk _hyper_3_15_chunk_1 (actual rows=25190 loops=1)
                       ->  Seq Scan on compress_hyper_4_16_chunk compress_hyper_4_16_chunk_1 (actual rows=30 loops=1)
   ->  Custom Scan (DecompressChunk) on _hyper_3_13_chunk (actual rows=0 loops=1)
         Filter: ("time" = $0)
         ->  Seq Scan on compress_hyper_4_18_chunk (actual rows=0 loops=1)
               Filter: ((_ts_meta_min_1 <= $0) AND (_ts_meta_max_1 >= $0))
               Rows Removed by Filter: 20
   ->  Custom Scan (DecompressChunk) on _hyper_3_14_chunk (never executed)
         Filter: ("time" = $0)
         ->  Seq Scan on compress_hyper_4_17_chunk (never executed)
               Filter: ((_ts_meta_min_1 <= $0) AND (_ts_meta_max_1 >= $0))
   ->  Custom Scan (DecompressChunk) on _hyper_3_15_chunk (actual rows=5 loops=1)
         Filter: ("time" = $0)
         Rows Removed by Filter: 4995
         ->  Seq Scan on compress_hyper_4_16_chunk (actual rows=5 loops=1)
               Filter: ((_ts_meta_min_1 <= $0) AND (_ts_meta_max_1 >= $0))
               Rows Removed by Filter: 25
(26 rows)

-- test join against max query
-- not ChunkAppend so no chunk exclusion
SET enable_hashjoin = false;
:PREFIX SELECT o1.time, o2.*
FROM :TEST_TABLE o1 INNER JOIN (SELECT max(time) AS max_time FROM :TEST_TABLE) o2 ON o1.time = o2.max_time ORDER BY time;
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Sort (actual rows=5 loops=1)
   Sort Key: o1."time"
   Sort Method: quicksort 
   ->  Nested Loop (actual rows=5 loops=1)
         Join Filter: (o1."time" = (max(_hyper_3_13_chunk."time")))
         Rows Removed by Join Filter: 68365
         ->  Aggregate (actual rows=1 loops=1)
               ->  Append (actual rows=68370 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_3_13_chunk (actual rows=17990 loops=1)
                           ->  Seq Scan on compress_hyper_4_18_chunk compress_hyper_4_18_chunk_1 (actual rows=20 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_3_14_chunk (actual rows=25190 loops=1)
                           ->  Seq Scan on compress_hyper_4_17_chunk compress_hyper_4_17_chunk_1 (actual rows=30 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_3_15_chunk (actual rows=25190 loops=1)
                           ->  Seq Scan on compress_hyper_4_16_chunk compress_hyper_4_16_chunk_1 (actual rows=30 loops=1)
         ->  Append (actual rows=68370 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_3_13_chunk o1 (actual rows=17990 loops=1)
                     ->  Seq Scan on compress_hyper_4_18_chunk (actual rows=20 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_3_14_chunk o1_1 (actual rows=25190 loops=1)
                     ->  Seq Scan on compress_hyper_4_17_chunk (actual rows=30 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_3_15_chunk o1_2 (actual rows=25190 loops=1)
                     ->  Seq Scan on compress_hyper_4_16_chunk (actual rows=30 loops=1)
(21 rows)

RESET enable_hashjoin;
-- test ordered append with limit expression
:PREFIX SELECT time
FROM :TEST_TABLE ORDER BY time LIMIT (SELECT length('four'));
                                            QUERY PLAN                                            
--------------------------------------------------------------------------------------------------
 Limit (actual rows=4 loops=1)
   InitPlan 1 (returns $0)
     ->  Result (actual rows=1 loops=1)
   ->  Sort (actual rows=4 loops=1)
         Sort Key: _hyper_3_13_chunk."time"
         Sort Method: top-N heapsort 
         ->  Append (actual rows=68370 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_3_13_chunk (actual rows=17990 loops=1)
                     ->  Seq Scan on compress_hyper_4_18_chunk (actual rows=20 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_3_14_chunk (actual rows=25190 loops=1)
                     ->  Seq Scan on compress_hyper_4_17_chunk (actual rows=30 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_3_15_chunk (actual rows=25190 loops=1)
                     ->  Seq Scan on compress_hyper_4_16_chunk (actual rows=30 loops=1)
(13 rows)

-- test with ordered guc disabled
SET timescaledb.enable_ordered_append TO off;
:PREFIX SELECT time
FROM :TEST_TABLE ORDER BY time LIMIT 3;
                                            QUERY PLAN                                            
--------------------------------------------------------------------------------------------------
 Limit (actual rows=3 loops=1)
   ->  Sort (actual rows=3 loops=1)
         Sort Key: _hyper_3_13_chunk."time"
         Sort Method: top-N heapsort 
         ->  Append (actual rows=68370 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_3_13_chunk (actual rows=17990 loops=1)
                     ->  Seq Scan on compress_hyper_4_18_chunk (actual rows=20 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_3_14_chunk (actual rows=25190 loops=1)
                     ->  Seq Scan on compress_hyper_4_17_chunk (actual rows=30 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_3_15_chunk (actual rows=25190 loops=1)
                     ->  Seq Scan on compress_hyper_4_16_chunk (actual rows=30 loops=1)
(11 rows)

RESET timescaledb.enable_ordered_append;
:PREFIX SELECT time
FROM :TEST_TABLE ORDER BY time LIMIT 3;
                                            QUERY PLAN                                            
--------------------------------------------------------------------------------------------------
 Limit (actual rows=3 loops=1)
   ->  Sort (actual rows=3 loops=1)
         Sort Key: _hyper_3_13_chunk."time"
         Sort Method: top-N heapsort 
         ->  Append (actual rows=68370 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_3_13_chunk (actual rows=17990 loops=1)
                     ->  Seq Scan on compress_hyper_4_18_chunk (actual rows=20 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_3_14_chunk (actual rows=25190 loops=1)
                     ->  Seq Scan on compress_hyper_4_17_chunk (actual rows=30 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_3_15_chunk (actual rows=25190 loops=1)
                     ->  Seq Scan on compress_hyper_4_16_chunk (actual rows=30 loops=1)
(11 rows)

-- test with chunk append disabled
SET timescaledb.enable_chunk_append TO off;
:PREFIX SELECT time
FROM :TEST_TABLE ORDER BY time LIMIT 3;
                                            QUERY PLAN                                            
--------------------------------------------------------------------------------------------------
 Limit (actual rows=3 loops=1)
   ->  Sort (actual rows=3 loops=1)
         Sort Key: _hyper_3_13_chunk."time"
         Sort Method: top-N heapsort 
         ->  Append (actual rows=68370 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_3_13_chunk (actual rows=17990 loops=1)
                     ->  Seq Scan on compress_hyper_4_18_chunk (actual rows=20 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_3_14_chunk (actual rows=25190 loops=1)
                     ->  Seq Scan on compress_hyper_4_17_chunk (actual rows=30 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_3_15_chunk (actual rows=25190 loops=1)
                     ->  Seq Scan on compress_hyper_4_16_chunk (actual rows=30 loops=1)
(11 rows)

RESET timescaledb.enable_chunk_append;
:PREFIX SELECT time
FROM :TEST_TABLE ORDER BY time LIMIT 3;
                                            QUERY PLAN                                            
--------------------------------------------------------------------------------------------------
 Limit (actual rows=3 loops=1)
   ->  Sort (actual rows=3 loops=1)
         Sort Key: _hyper_3_13_chunk."time"
         Sort Method: top-N heapsort 
         ->  Append (actual rows=68370 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_3_13_chunk (actual rows=17990 loops=1)
                     ->  Seq Scan on compress_hyper_4_18_chunk (actual rows=20 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_3_14_chunk (actual rows=25190 loops=1)
                     ->  Seq Scan on compress_hyper_4_17_chunk (actual rows=30 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_3_15_chunk (actual rows=25190 loops=1)
                     ->  Seq Scan on compress_hyper_4_16_chunk (actual rows=30 loops=1)
(11 rows)

-- test JOIN on time column
-- should use 2 ChunkAppend
:PREFIX SELECT o1.time FROM :TEST_TABLE o1 INNER JOIN :TEST_TABLE o2 ON o1.time = o2.time ORDER BY o1.time LIMIT 100;
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=100 loops=1)
   ->  Merge Join (actual rows=100 loops=1)
         Merge Cond: (o1."time" = o2."time")
         ->  Sort (actual rows=20 loops=1)
               Sort Key: o1."time"
               Sort Method: quicksort 
               ->  Append (actual rows=68370 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_3_13_chunk o1 (actual rows=17990 loops=1)
                           ->  Seq Scan on compress_hyper_4_18_chunk (actual rows=20 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_3_14_chunk o1_1 (actual rows=25190 loops=1)
                           ->  Seq Scan on compress_hyper_4_17_chunk (actual rows=30 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_3_15_chunk o1_2 (actual rows=25190 loops=1)
                           ->  Seq Scan on compress_hyper_4_16_chunk (actual rows=30 loops=1)
         ->  Sort (actual rows=100 loops=1)
               Sort Key: o2."time"
               Sort Method: quicksort 
               ->  Append (actual rows=68370 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_3_13_chunk o2 (actual rows=17990 loops=1)
                           ->  Seq Scan on compress_hyper_4_18_chunk compress_hyper_4_18_chunk_1 (actual rows=20 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_3_14_chunk o2_1 (actual rows=25190 loops=1)
                           ->  Seq Scan on compress_hyper_4_17_chunk compress_hyper_4_17_chunk_1 (actual rows=30 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_3_15_chunk o2_2 (actual rows=25190 loops=1)
                           ->  Seq Scan on compress_hyper_4_16_chunk compress_hyper_4_16_chunk_1 (actual rows=30 loops=1)
(23 rows)

-- test JOIN on time column with USING
-- should use 2 ChunkAppend
:PREFIX SELECT o1.time FROM :TEST_TABLE o1 INNER JOIN :TEST_TABLE o2 USING(time) ORDER BY o1.time LIMIT 100;
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=100 loops=1)
   ->  Merge Join (actual rows=100 loops=1)
         Merge Cond: (o1."time" = o2."time")
         ->  Sort (actual rows=20 loops=1)
               Sort Key: o1."time"
               Sort Method: quicksort 
               ->  Append (actual rows=68370 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_3_13_chunk o1 (actual rows=17990 loops=1)
                           ->  Seq Scan on compress_hyper_4_18_chunk (actual rows=20 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_3_14_chunk o1_1 (actual rows=25190 loops=1)
                           ->  Seq Scan on compress_hyper_4_17_chunk (actual rows=30 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_3_15_chunk o1_2 (actual rows=25190 loops=1)
                           ->  Seq Scan on compress_hyper_4_16_chunk (actual rows=30 loops=1)
         ->  Sort (actual rows=100 loops=1)
               Sort Key: o2."time"
               Sort Method: quicksort 
               ->  Append (actual rows=68370 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_3_13_chunk o2 (actual rows=17990 loops=1)
                           ->  Seq Scan on compress_hyper_4_18_chunk compress_hyper_4_18_chunk_1 (actual rows=20 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_3_14_chunk o2_1 (actual rows=25190 loops=1)
                           ->  Seq Scan on compress_hyper_4_17_chunk compress_hyper_4_17_chunk_1 (actual rows=30 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_3_15_chunk o2_2 (actual rows=25190 loops=1)
                           ->  Seq Scan on compress_hyper_4_16_chunk compress_hyper_4_16_chunk_1 (actual rows=30 loops=1)
(23 rows)

-- test NATURAL JOIN on time column
-- should use 2 ChunkAppend
:PREFIX SELECT o1.time FROM :TEST_TABLE o1 NATURAL INNER JOIN :TEST_TABLE o2 ORDER BY o1.time LIMIT 100;
                                                                              QUERY PLAN                                                                              
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=0 loops=1)
   ->  Sort (actual rows=0 loops=1)
         Sort Key: o1."time"
         Sort Method: quicksort 
         ->  Hash Join (actual rows=0 loops=1)
               Hash Cond: ((o1."time" = o2."time") AND (o1.device_id = o2.device_id) AND (o1.v0 = o2.v0) AND (o1.v1 = o2.v1) AND (o1.v2 = o2.v2) AND (o1.v3 = o2.v3))
               ->  Append (actual rows=1 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_3_13_chunk o1 (actual rows=1 loops=1)
                           ->  Seq Scan on compress_hyper_4_18_chunk (actual rows=1 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_3_14_chunk o1_1 (never executed)
                           ->  Seq Scan on compress_hyper_4_17_chunk (never executed)
                     ->  Custom Scan (DecompressChunk) on _hyper_3_15_chunk o1_2 (never executed)
                           ->  Seq Scan on compress_hyper_4_16_chunk (never executed)
               ->  Hash (actual rows=0 loops=1)
                     Buckets: 131072  Batches: 1 
                     ->  Append (actual rows=68370 loops=1)
                           ->  Custom Scan (DecompressChunk) on _hyper_3_13_chunk o2 (actual rows=17990 loops=1)
                                 ->  Seq Scan on compress_hyper_4_18_chunk compress_hyper_4_18_chunk_1 (actual rows=20 loops=1)
                           ->  Custom Scan (DecompressChunk) on _hyper_3_14_chunk o2_1 (actual rows=25190 loops=1)
                                 ->  Seq Scan on compress_hyper_4_17_chunk compress_hyper_4_17_chunk_1 (actual rows=30 loops=1)
                           ->  Custom Scan (DecompressChunk) on _hyper_3_15_chunk o2_2 (actual rows=25190 loops=1)
                                 ->  Seq Scan on compress_hyper_4_16_chunk compress_hyper_4_16_chunk_1 (actual rows=30 loops=1)
(22 rows)

-- test LEFT JOIN on time column
-- should use 2 ChunkAppend
:PREFIX SELECT o1.time FROM :TEST_TABLE o1 LEFT JOIN :TEST_TABLE o2 ON o1.time=o2.time ORDER BY o1.time LIMIT 100;
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=100 loops=1)
   ->  Merge Left Join (actual rows=100 loops=1)
         Merge Cond: (o1."time" = o2."time")
         ->  Sort (actual rows=20 loops=1)
               Sort Key: o1."time"
               Sort Method: quicksort 
               ->  Append (actual rows=68370 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_3_13_chunk o1 (actual rows=17990 loops=1)
                           ->  Seq Scan on compress_hyper_4_18_chunk (actual rows=20 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_3_14_chunk o1_1 (actual rows=25190 loops=1)
                           ->  Seq Scan on compress_hyper_4_17_chunk (actual rows=30 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_3_15_chunk o1_2 (actual rows=25190 loops=1)
                           ->  Seq Scan on compress_hyper_4_16_chunk (actual rows=30 loops=1)
         ->  Sort (actual rows=100 loops=1)
               Sort Key: o2."time"
               Sort Method: quicksort 
               ->  Append (actual rows=68370 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_3_13_chunk o2 (actual rows=17990 loops=1)
                           ->  Seq Scan on compress_hyper_4_18_chunk compress_hyper_4_18_chunk_1 (actual rows=20 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_3_14_chunk o2_1 (actual rows=25190 loops=1)
                           ->  Seq Scan on compress_hyper_4_17_chunk compress_hyper_4_17_chunk_1 (actual rows=30 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_3_15_chunk o2_2 (actual rows=25190 loops=1)
                           ->  Seq Scan on compress_hyper_4_16_chunk compress_hyper_4_16_chunk_1 (actual rows=30 loops=1)
(23 rows)

-- test RIGHT JOIN on time column
-- should use 2 ChunkAppend
:PREFIX SELECT o1.time FROM :TEST_TABLE o1 RIGHT JOIN :TEST_TABLE o2 ON o1.time=o2.time ORDER BY o2.time LIMIT 100;
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=100 loops=1)
   ->  Merge Left Join (actual rows=100 loops=1)
         Merge Cond: (o2."time" = o1."time")
         ->  Sort (actual rows=20 loops=1)
               Sort Key: o2."time"
               Sort Method: quicksort 
               ->  Append (actual rows=68370 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_3_13_chunk o2 (actual rows=17990 loops=1)
                           ->  Seq Scan on compress_hyper_4_18_chunk compress_hyper_4_18_chunk_1 (actual rows=20 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_3_14_chunk o2_1 (actual rows=25190 loops=1)
                           ->  Seq Scan on compress_hyper_4_17_chunk compress_hyper_4_17_chunk_1 (actual rows=30 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_3_15_chunk o2_2 (actual rows=25190 loops=1)
                           ->  Seq Scan on compress_hyper_4_16_chunk compress_hyper_4_16_chunk_1 (actual rows=30 loops=1)
         ->  Sort (actual rows=100 loops=1)
               Sort Key: o1."time"
               Sort Method: quicksort 
               ->  Append (actual rows=68370 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_3_13_chunk o1 (actual rows=17990 loops=1)
                           ->  Seq Scan on compress_hyper_4_18_chunk (actual rows=20 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_3_14_chunk o1_1 (actual rows=25190 loops=1)
                           ->  Seq Scan on compress_hyper_4_17_chunk (actual rows=30 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_3_15_chunk o1_2 (actual rows=25190 loops=1)
                           ->  Seq Scan on compress_hyper_4_16_chunk (actual rows=30 loops=1)
(23 rows)

-- test JOIN on time column with ON clause expression order switched
-- should use 2 ChunkAppend
:PREFIX SELECT o1.time FROM :TEST_TABLE o1 INNER JOIN :TEST_TABLE o2 ON o2.time = o1.time ORDER BY o1.time LIMIT 100;
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=100 loops=1)
   ->  Merge Join (actual rows=100 loops=1)
         Merge Cond: (o1."time" = o2."time")
         ->  Sort (actual rows=20 loops=1)
               Sort Key: o1."time"
               Sort Method: quicksort 
               ->  Append (actual rows=68370 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_3_13_chunk o1 (actual rows=17990 loops=1)
                           ->  Seq Scan on compress_hyper_4_18_chunk (actual rows=20 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_3_14_chunk o1_1 (actual rows=25190 loops=1)
                           ->  Seq Scan on compress_hyper_4_17_chunk (actual rows=30 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_3_15_chunk o1_2 (actual rows=25190 loops=1)
                           ->  Seq Scan on compress_hyper_4_16_chunk (actual rows=30 loops=1)
         ->  Sort (actual rows=100 loops=1)
               Sort Key: o2."time"
               Sort Method: quicksort 
               ->  Append (actual rows=68370 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_3_13_chunk o2 (actual rows=17990 loops=1)
                           ->  Seq Scan on compress_hyper_4_18_chunk compress_hyper_4_18_chunk_1 (actual rows=20 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_3_14_chunk o2_1 (actual rows=25190 loops=1)
                           ->  Seq Scan on compress_hyper_4_17_chunk compress_hyper_4_17_chunk_1 (actual rows=30 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_3_15_chunk o2_2 (actual rows=25190 loops=1)
                           ->  Seq Scan on compress_hyper_4_16_chunk compress_hyper_4_16_chunk_1 (actual rows=30 loops=1)
(23 rows)

-- test JOIN on time column with equality condition in WHERE clause
-- should use 2 ChunkAppend
:PREFIX SELECT o1.time FROM :TEST_TABLE o1 INNER JOIN :TEST_TABLE o2 ON true WHERE o1.time = o2.time ORDER BY o1.time LIMIT 100;
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=100 loops=1)
   ->  Merge Join (actual rows=100 loops=1)
         Merge Cond: (o1."time" = o2."time")
         ->  Sort (actual rows=20 loops=1)
               Sort Key: o1."time"
               Sort Method: quicksort 
               ->  Append (actual rows=68370 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_3_13_chunk o1 (actual rows=17990 loops=1)
                           ->  Seq Scan on compress_hyper_4_18_chunk (actual rows=20 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_3_14_chunk o1_1 (actual rows=25190 loops=1)
                           ->  Seq Scan on compress_hyper_4_17_chunk (actual rows=30 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_3_15_chunk o1_2 (actual rows=25190 loops=1)
                           ->  Seq Scan on compress_hyper_4_16_chunk (actual rows=30 loops=1)
         ->  Sort (actual rows=100 loops=1)
               Sort Key: o2."time"
               Sort Method: quicksort 
               ->  Append (actual rows=68370 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_3_13_chunk o2 (actual rows=17990 loops=1)
                           ->  Seq Scan on compress_hyper_4_18_chunk compress_hyper_4_18_chunk_1 (actual rows=20 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_3_14_chunk o2_1 (actual rows=25190 loops=1)
                           ->  Seq Scan on compress_hyper_4_17_chunk compress_hyper_4_17_chunk_1 (actual rows=30 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_3_15_chunk o2_2 (actual rows=25190 loops=1)
                           ->  Seq Scan on compress_hyper_4_16_chunk compress_hyper_4_16_chunk_1 (actual rows=30 loops=1)
(23 rows)

-- test JOIN on time column with ORDER BY 2nd hypertable
-- should use 2 ChunkAppend
:PREFIX SELECT o1.time FROM :TEST_TABLE o1 INNER JOIN :TEST_TABLE o2 ON o1.time = o2.time ORDER BY o2.time LIMIT 100;
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=100 loops=1)
   ->  Merge Join (actual rows=100 loops=1)
         Merge Cond: (o1."time" = o2."time")
         ->  Sort (actual rows=20 loops=1)
               Sort Key: o1."time"
               Sort Method: quicksort 
               ->  Append (actual rows=68370 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_3_13_chunk o1 (actual rows=17990 loops=1)
                           ->  Seq Scan on compress_hyper_4_18_chunk (actual rows=20 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_3_14_chunk o1_1 (actual rows=25190 loops=1)
                           ->  Seq Scan on compress_hyper_4_17_chunk (actual rows=30 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_3_15_chunk o1_2 (actual rows=25190 loops=1)
                           ->  Seq Scan on compress_hyper_4_16_chunk (actual rows=30 loops=1)
         ->  Sort (actual rows=100 loops=1)
               Sort Key: o2."time"
               Sort Method: quicksort 
               ->  Append (actual rows=68370 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_3_13_chunk o2 (actual rows=17990 loops=1)
                           ->  Seq Scan on compress_hyper_4_18_chunk compress_hyper_4_18_chunk_1 (actual rows=20 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_3_14_chunk o2_1 (actual rows=25190 loops=1)
                           ->  Seq Scan on compress_hyper_4_17_chunk compress_hyper_4_17_chunk_1 (actual rows=30 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_3_15_chunk o2_2 (actual rows=25190 loops=1)
                           ->  Seq Scan on compress_hyper_4_16_chunk compress_hyper_4_16_chunk_1 (actual rows=30 loops=1)
(23 rows)

-- test JOIN on time column and device_id
-- should use 2 ChunkAppend
:PREFIX SELECT o1.time FROM :TEST_TABLE o1 INNER JOIN :TEST_TABLE o2 ON o1.device_id = o2.device_id AND o1.time = o2.time ORDER BY o1.time LIMIT 100;
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=100 loops=1)
   ->  Merge Join (actual rows=100 loops=1)
         Merge Cond: ((o1."time" = o2."time") AND (o1.device_id = o2.device_id))
         ->  Sort (actual rows=100 loops=1)
               Sort Key: o1."time", o1.device_id
               Sort Method: quicksort 
               ->  Append (actual rows=68370 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_3_13_chunk o1 (actual rows=17990 loops=1)
                           ->  Seq Scan on compress_hyper_4_18_chunk (actual rows=20 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_3_14_chunk o1_1 (actual rows=25190 loops=1)
                           ->  Seq Scan on compress_hyper_4_17_chunk (actual rows=30 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_3_15_chunk o1_2 (actual rows=25190 loops=1)
                           ->  Seq Scan on compress_hyper_4_16_chunk (actual rows=30 loops=1)
         ->  Sort (actual rows=100 loops=1)
               Sort Key: o2."time", o2.device_id
               Sort Method: quicksort 
               ->  Append (actual rows=68370 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_3_13_chunk o2 (actual rows=17990 loops=1)
                           ->  Seq Scan on compress_hyper_4_18_chunk compress_hyper_4_18_chunk_1 (actual rows=20 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_3_14_chunk o2_1 (actual rows=25190 loops=1)
                           ->  Seq Scan on compress_hyper_4_17_chunk compress_hyper_4_17_chunk_1 (actual rows=30 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_3_15_chunk o2_2 (actual rows=25190 loops=1)
                           ->  Seq Scan on compress_hyper_4_16_chunk compress_hyper_4_16_chunk_1 (actual rows=30 loops=1)
(23 rows)

-- test JOIN on device_id
-- should not use ordered append for 2nd hypertable
:PREFIX SELECT o1.time FROM :TEST_TABLE o1 INNER JOIN :TEST_TABLE o2 ON o1.device_id = o2.device_id WHERE o1.device_id = 1 ORDER BY o1.time LIMIT 100;
                                                                                        QUERY PLAN                                                                                         
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=100 loops=1)
   ->  Nested Loop (actual rows=100 loops=1)
         ->  Custom Scan (ChunkAppend) on metrics_compressed o1 (actual rows=1 loops=1)
               Order: o1."time"
               ->  Custom Scan (DecompressChunk) on _hyper_3_13_chunk o1_1 (actual rows=1 loops=1)
                     ->  Index Scan Backward using compress_hyper_4_18_chunk__compressed_hypertable_4_device_id__t on compress_hyper_4_18_chunk (actual rows=1 loops=1)
                           Index Cond: (device_id = 1)
               ->  Custom Scan (DecompressChunk) on _hyper_3_14_chunk o1_2 (never executed)
                     ->  Index Scan Backward using compress_hyper_4_17_chunk__compressed_hypertable_4_device_id__t on compress_hyper_4_17_chunk (never executed)
                           Index Cond: (device_id = 1)
               ->  Custom Scan (DecompressChunk) on _hyper_3_15_chunk o1_3 (never executed)
                     ->  Index Scan Backward using compress_hyper_4_16_chunk__compressed_hypertable_4_device_id__t on compress_hyper_4_16_chunk (never executed)
                           Index Cond: (device_id = 1)
         ->  Append (actual rows=100 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_3_13_chunk o2 (actual rows=100 loops=1)
                     ->  Index Scan using compress_hyper_4_18_chunk__compressed_hypertable_4_device_id__t on compress_hyper_4_18_chunk compress_hyper_4_18_chunk_1 (actual rows=1 loops=1)
                           Index Cond: (device_id = 1)
               ->  Custom Scan (DecompressChunk) on _hyper_3_14_chunk o2_1 (never executed)
                     ->  Index Scan using compress_hyper_4_17_chunk__compressed_hypertable_4_device_id__t on compress_hyper_4_17_chunk compress_hyper_4_17_chunk_1 (never executed)
                           Index Cond: (device_id = 1)
               ->  Custom Scan (DecompressChunk) on _hyper_3_15_chunk o2_2 (never executed)
                     ->  Index Scan using compress_hyper_4_16_chunk__compressed_hypertable_4_device_id__t on compress_hyper_4_16_chunk compress_hyper_4_16_chunk_1 (never executed)
                           Index Cond: (device_id = 1)
(23 rows)

-- test JOIN on time column with implicit join
-- should use 2 ChunkAppend
:PREFIX SELECT o1.time FROM :TEST_TABLE o1, :TEST_TABLE o2 WHERE o1.time = o2.time ORDER BY o1.time LIMIT 100;
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=100 loops=1)
   ->  Merge Join (actual rows=100 loops=1)
         Merge Cond: (o1."time" = o2."time")
         ->  Sort (actual rows=20 loops=1)
               Sort Key: o1."time"
               Sort Method: quicksort 
               ->  Append (actual rows=68370 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_3_13_chunk o1 (actual rows=17990 loops=1)
                           ->  Seq Scan on compress_hyper_4_18_chunk (actual rows=20 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_3_14_chunk o1_1 (actual rows=25190 loops=1)
                           ->  Seq Scan on compress_hyper_4_17_chunk (actual rows=30 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_3_15_chunk o1_2 (actual rows=25190 loops=1)
                           ->  Seq Scan on compress_hyper_4_16_chunk (actual rows=30 loops=1)
         ->  Sort (actual rows=100 loops=1)
               Sort Key: o2."time"
               Sort Method: quicksort 
               ->  Append (actual rows=68370 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_3_13_chunk o2 (actual rows=17990 loops=1)
                           ->  Seq Scan on compress_hyper_4_18_chunk compress_hyper_4_18_chunk_1 (actual rows=20 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_3_14_chunk o2_1 (actual rows=25190 loops=1)
                           ->  Seq Scan on compress_hyper_4_17_chunk compress_hyper_4_17_chunk_1 (actual rows=30 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_3_15_chunk o2_2 (actual rows=25190 loops=1)
                           ->  Seq Scan on compress_hyper_4_16_chunk compress_hyper_4_16_chunk_1 (actual rows=30 loops=1)
(23 rows)

-- test JOIN on time column with 3 hypertables
-- should use 3 ChunkAppend
:PREFIX SELECT o1.time FROM :TEST_TABLE o1 INNER JOIN :TEST_TABLE o2 ON o1.time = o2.time INNER JOIN :TEST_TABLE o3 ON o1.time = o3.time ORDER BY o1.time LIMIT 100;
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=100 loops=1)
   ->  Nested Loop (actual rows=100 loops=1)
         Join Filter: (o1."time" = o3."time")
         Rows Removed by Join Filter: 1316920
         ->  Merge Join (actual rows=20 loops=1)
               Merge Cond: (o1."time" = o2."time")
               ->  Sort (actual rows=4 loops=1)
                     Sort Key: o1."time"
                     Sort Method: quicksort 
                     ->  Append (actual rows=68370 loops=1)
                           ->  Custom Scan (DecompressChunk) on _hyper_3_13_chunk o1 (actual rows=17990 loops=1)
                                 ->  Seq Scan on compress_hyper_4_18_chunk (actual rows=20 loops=1)
                           ->  Custom Scan (DecompressChunk) on _hyper_3_14_chunk o1_1 (actual rows=25190 loops=1)
                                 ->  Seq Scan on compress_hyper_4_17_chunk (actual rows=30 loops=1)
                           ->  Custom Scan (DecompressChunk) on _hyper_3_15_chunk o1_2 (actual rows=25190 loops=1)
                                 ->  Seq Scan on compress_hyper_4_16_chunk (actual rows=30 loops=1)
               ->  Sort (actual rows=20 loops=1)
                     Sort Key: o2."time"
                     Sort Method: quicksort 
                     ->  Append (actual rows=68370 loops=1)
                           ->  Custom Scan (DecompressChunk) on _hyper_3_13_chunk o2 (actual rows=17990 loops=1)
                                 ->  Seq Scan on compress_hyper_4_18_chunk compress_hyper_4_18_chunk_1 (actual rows=20 loops=1)
                           ->  Custom Scan (DecompressChunk) on _hyper_3_14_chunk o2_1 (actual rows=25190 loops=1)
                                 ->  Seq Scan on compress_hyper_4_17_chunk compress_hyper_4_17_chunk_1 (actual rows=30 loops=1)
                           ->  Custom Scan (DecompressChunk) on _hyper_3_15_chunk o2_2 (actual rows=25190 loops=1)
                                 ->  Seq Scan on compress_hyper_4_16_chunk compress_hyper_4_16_chunk_1 (actual rows=30 loops=1)
         ->  Append (actual rows=65851 loops=20)
               ->  Custom Scan (DecompressChunk) on _hyper_3_13_chunk o3 (actual rows=17990 loops=20)
                     ->  Seq Scan on compress_hyper_4_18_chunk compress_hyper_4_18_chunk_2 (actual rows=20 loops=20)
               ->  Custom Scan (DecompressChunk) on _hyper_3_14_chunk o3_1 (actual rows=25190 loops=19)
                     ->  Seq Scan on compress_hyper_4_17_chunk compress_hyper_4_17_chunk_2 (actual rows=30 loops=19)
               ->  Custom Scan (DecompressChunk) on _hyper_3_15_chunk o3_2 (actual rows=25190 loops=19)
                     ->  Seq Scan on compress_hyper_4_16_chunk compress_hyper_4_16_chunk_2 (actual rows=30 loops=19)
(33 rows)

\set TEST_TABLE 'metrics_space_compressed'
\ir :TEST_QUERY_NAME
-- test ASC for ordered chunks
:PREFIX SELECT
  time
FROM :TEST_TABLE
ORDER BY time ASC LIMIT 1;
                                            QUERY PLAN                                            
--------------------------------------------------------------------------------------------------
 Limit (actual rows=1 loops=1)
   ->  Sort (actual rows=1 loops=1)
         Sort Key: _hyper_5_19_chunk."time"
         Sort Method: top-N heapsort 
         ->  Append (actual rows=68370 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_5_19_chunk (actual rows=3598 loops=1)
                     ->  Seq Scan on compress_hyper_6_36_chunk (actual rows=4 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_5_20_chunk (actual rows=10794 loops=1)
                     ->  Seq Scan on compress_hyper_6_35_chunk (actual rows=12 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_5_21_chunk (actual rows=3598 loops=1)
                     ->  Seq Scan on compress_hyper_6_34_chunk (actual rows=4 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_5_22_chunk (actual rows=5038 loops=1)
                     ->  Seq Scan on compress_hyper_6_33_chunk (actual rows=6 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_5_23_chunk (actual rows=15114 loops=1)
                     ->  Seq Scan on compress_hyper_6_32_chunk (actual rows=18 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_5_24_chunk (actual rows=5038 loops=1)
                     ->  Seq Scan on compress_hyper_6_31_chunk (actual rows=6 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_5_25_chunk (actual rows=5038 loops=1)
                     ->  Seq Scan on compress_hyper_6_30_chunk (actual rows=6 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_5_26_chunk (actual rows=15114 loops=1)
                     ->  Seq Scan on compress_hyper_6_29_chunk (actual rows=18 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_5_27_chunk (actual rows=5038 loops=1)
                     ->  Seq Scan on compress_hyper_6_28_chunk (actual rows=6 loops=1)
(23 rows)

-- test DESC for ordered chunks
:PREFIX SELECT
  time
FROM :TEST_TABLE
ORDER BY time DESC LIMIT 1;
                                            QUERY PLAN                                            
--------------------------------------------------------------------------------------------------
 Limit (actual rows=1 loops=1)
   ->  Sort (actual rows=1 loops=1)
         Sort Key: _hyper_5_27_chunk."time" DESC
         Sort Method: top-N heapsort 
         ->  Append (actual rows=68370 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_5_27_chunk (actual rows=5038 loops=1)
                     ->  Seq Scan on compress_hyper_6_28_chunk (actual rows=6 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_5_26_chunk (actual rows=15114 loops=1)
                     ->  Seq Scan on compress_hyper_6_29_chunk (actual rows=18 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_5_25_chunk (actual rows=5038 loops=1)
                     ->  Seq Scan on compress_hyper_6_30_chunk (actual rows=6 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_5_24_chunk (actual rows=5038 loops=1)
                     ->  Seq Scan on compress_hyper_6_31_chunk (actual rows=6 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_5_23_chunk (actual rows=15114 loops=1)
                     ->  Seq Scan on compress_hyper_6_32_chunk (actual rows=18 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_5_22_chunk (actual rows=5038 loops=1)
                     ->  Seq Scan on compress_hyper_6_33_chunk (actual rows=6 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_5_21_chunk (actual rows=3598 loops=1)
                     ->  Seq Scan on compress_hyper_6_34_chunk (actual rows=4 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_5_20_chunk (actual rows=10794 loops=1)
                     ->  Seq Scan on compress_hyper_6_35_chunk (actual rows=12 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_5_19_chunk (actual rows=3598 loops=1)
                     ->  Seq Scan on compress_hyper_6_36_chunk (actual rows=4 loops=1)
(23 rows)

-- test query with ORDER BY column not in targetlist
:PREFIX SELECT
  pg_typeof(device_id), pg_typeof(v2)
FROM :TEST_TABLE
ORDER BY time ASC LIMIT 1;
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 Limit (actual rows=1 loops=1)
   ->  Sort (actual rows=1 loops=1)
         Sort Key: _hyper_5_19_chunk."time"
         Sort Method: top-N heapsort 
         ->  Result (actual rows=68370 loops=1)
               ->  Append (actual rows=68370 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_19_chunk (actual rows=3598 loops=1)
                           ->  Seq Scan on compress_hyper_6_36_chunk (actual rows=4 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_20_chunk (actual rows=10794 loops=1)
                           ->  Seq Scan on compress_hyper_6_35_chunk (actual rows=12 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_21_chunk (actual rows=3598 loops=1)
                           ->  Seq Scan on compress_hyper_6_34_chunk (actual rows=4 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_22_chunk (actual rows=5038 loops=1)
                           ->  Seq Scan on compress_hyper_6_33_chunk (actual rows=6 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_23_chunk (actual rows=15114 loops=1)
                           ->  Seq Scan on compress_hyper_6_32_chunk (actual rows=18 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_24_chunk (actual rows=5038 loops=1)
                           ->  Seq Scan on compress_hyper_6_31_chunk (actual rows=6 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_25_chunk (actual rows=5038 loops=1)
                           ->  Seq Scan on compress_hyper_6_30_chunk (actual rows=6 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_26_chunk (actual rows=15114 loops=1)
                           ->  Seq Scan on compress_hyper_6_29_chunk (actual rows=18 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_27_chunk (actual rows=5038 loops=1)
                           ->  Seq Scan on compress_hyper_6_28_chunk (actual rows=6 loops=1)
(24 rows)

-- ORDER BY may include other columns after time column
:PREFIX SELECT
  time, device_id, v0
FROM :TEST_TABLE
ORDER BY time DESC, device_id LIMIT 1;
                                            QUERY PLAN                                            
--------------------------------------------------------------------------------------------------
 Limit (actual rows=1 loops=1)
   ->  Sort (actual rows=1 loops=1)
         Sort Key: _hyper_5_27_chunk."time" DESC, _hyper_5_27_chunk.device_id
         Sort Method: top-N heapsort 
         ->  Append (actual rows=68370 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_5_27_chunk (actual rows=5038 loops=1)
                     ->  Seq Scan on compress_hyper_6_28_chunk (actual rows=6 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_5_26_chunk (actual rows=15114 loops=1)
                     ->  Seq Scan on compress_hyper_6_29_chunk (actual rows=18 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_5_25_chunk (actual rows=5038 loops=1)
                     ->  Seq Scan on compress_hyper_6_30_chunk (actual rows=6 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_5_24_chunk (actual rows=5038 loops=1)
                     ->  Seq Scan on compress_hyper_6_31_chunk (actual rows=6 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_5_23_chunk (actual rows=15114 loops=1)
                     ->  Seq Scan on compress_hyper_6_32_chunk (actual rows=18 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_5_22_chunk (actual rows=5038 loops=1)
                     ->  Seq Scan on compress_hyper_6_33_chunk (actual rows=6 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_5_21_chunk (actual rows=3598 loops=1)
                     ->  Seq Scan on compress_hyper_6_34_chunk (actual rows=4 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_5_20_chunk (actual rows=10794 loops=1)
                     ->  Seq Scan on compress_hyper_6_35_chunk (actual rows=12 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_5_19_chunk (actual rows=3598 loops=1)
                     ->  Seq Scan on compress_hyper_6_36_chunk (actual rows=4 loops=1)
(23 rows)

-- test RECORD in targetlist
:PREFIX SELECT
  (time, device_id, v0)
FROM :TEST_TABLE
ORDER BY time DESC, device_id LIMIT 1;
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 Limit (actual rows=1 loops=1)
   ->  Sort (actual rows=1 loops=1)
         Sort Key: _hyper_5_27_chunk."time" DESC, _hyper_5_27_chunk.device_id
         Sort Method: top-N heapsort 
         ->  Result (actual rows=68370 loops=1)
               ->  Append (actual rows=68370 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_27_chunk (actual rows=5038 loops=1)
                           ->  Seq Scan on compress_hyper_6_28_chunk (actual rows=6 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_26_chunk (actual rows=15114 loops=1)
                           ->  Seq Scan on compress_hyper_6_29_chunk (actual rows=18 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_25_chunk (actual rows=5038 loops=1)
                           ->  Seq Scan on compress_hyper_6_30_chunk (actual rows=6 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_24_chunk (actual rows=5038 loops=1)
                           ->  Seq Scan on compress_hyper_6_31_chunk (actual rows=6 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_23_chunk (actual rows=15114 loops=1)
                           ->  Seq Scan on compress_hyper_6_32_chunk (actual rows=18 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_22_chunk (actual rows=5038 loops=1)
                           ->  Seq Scan on compress_hyper_6_33_chunk (actual rows=6 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_21_chunk (actual rows=3598 loops=1)
                           ->  Seq Scan on compress_hyper_6_34_chunk (actual rows=4 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_20_chunk (actual rows=10794 loops=1)
                           ->  Seq Scan on compress_hyper_6_35_chunk (actual rows=12 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_19_chunk (actual rows=3598 loops=1)
                           ->  Seq Scan on compress_hyper_6_36_chunk (actual rows=4 loops=1)
(24 rows)

-- test sort column not in targetlist
:PREFIX SELECT
  time_bucket('1h',time)
FROM :TEST_TABLE
ORDER BY time DESC LIMIT 1;
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 Limit (actual rows=1 loops=1)
   ->  Sort (actual rows=1 loops=1)
         Sort Key: _hyper_5_27_chunk."time" DESC
         Sort Method: top-N heapsort 
         ->  Result (actual rows=68370 loops=1)
               ->  Append (actual rows=68370 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_27_chunk (actual rows=5038 loops=1)
                           ->  Seq Scan on compress_hyper_6_28_chunk (actual rows=6 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_26_chunk (actual rows=15114 loops=1)
                           ->  Seq Scan on compress_hyper_6_29_chunk (actual rows=18 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_25_chunk (actual rows=5038 loops=1)
                           ->  Seq Scan on compress_hyper_6_30_chunk (actual rows=6 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_24_chunk (actual rows=5038 loops=1)
                           ->  Seq Scan on compress_hyper_6_31_chunk (actual rows=6 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_23_chunk (actual rows=15114 loops=1)
                           ->  Seq Scan on compress_hyper_6_32_chunk (actual rows=18 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_22_chunk (actual rows=5038 loops=1)
                           ->  Seq Scan on compress_hyper_6_33_chunk (actual rows=6 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_21_chunk (actual rows=3598 loops=1)
                           ->  Seq Scan on compress_hyper_6_34_chunk (actual rows=4 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_20_chunk (actual rows=10794 loops=1)
                           ->  Seq Scan on compress_hyper_6_35_chunk (actual rows=12 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_19_chunk (actual rows=3598 loops=1)
                           ->  Seq Scan on compress_hyper_6_36_chunk (actual rows=4 loops=1)
(24 rows)

-- queries with ORDER BY non-time column shouldn't use ordered append
:PREFIX SELECT
  device_id
FROM :TEST_TABLE
ORDER BY device_id LIMIT 1;
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Limit (actual rows=1 loops=1)
   ->  Merge Append (actual rows=1 loops=1)
         Sort Key: _hyper_5_19_chunk.device_id
         ->  Custom Scan (DecompressChunk) on _hyper_5_19_chunk (actual rows=1 loops=1)
               ->  Sort (actual rows=1 loops=1)
                     Sort Key: compress_hyper_6_36_chunk.device_id
                     Sort Method: quicksort 
                     ->  Seq Scan on compress_hyper_6_36_chunk (actual rows=4 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_5_20_chunk (actual rows=1 loops=1)
               ->  Sort (actual rows=1 loops=1)
                     Sort Key: compress_hyper_6_35_chunk.device_id
                     Sort Method: quicksort 
                     ->  Seq Scan on compress_hyper_6_35_chunk (actual rows=12 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_5_21_chunk (actual rows=1 loops=1)
               ->  Sort (actual rows=1 loops=1)
                     Sort Key: compress_hyper_6_34_chunk.device_id
                     Sort Method: quicksort 
                     ->  Seq Scan on compress_hyper_6_34_chunk (actual rows=4 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_5_22_chunk (actual rows=1 loops=1)
               ->  Sort (actual rows=1 loops=1)
                     Sort Key: compress_hyper_6_33_chunk.device_id
                     Sort Method: quicksort 
                     ->  Seq Scan on compress_hyper_6_33_chunk (actual rows=6 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_5_23_chunk (actual rows=1 loops=1)
               ->  Sort (actual rows=1 loops=1)
                     Sort Key: compress_hyper_6_32_chunk.device_id
                     Sort Method: quicksort 
                     ->  Seq Scan on compress_hyper_6_32_chunk (actual rows=18 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_5_24_chunk (actual rows=1 loops=1)
               ->  Sort (actual rows=1 loops=1)
                     Sort Key: compress_hyper_6_31_chunk.device_id
                     Sort Method: quicksort 
                     ->  Seq Scan on compress_hyper_6_31_chunk (actual rows=6 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_5_25_chunk (actual rows=1 loops=1)
               ->  Sort (actual rows=1 loops=1)
                     Sort Key: compress_hyper_6_30_chunk.device_id
                     Sort Method: quicksort 
                     ->  Seq Scan on compress_hyper_6_30_chunk (actual rows=6 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_5_26_chunk (actual rows=1 loops=1)
               ->  Sort (actual rows=1 loops=1)
                     Sort Key: compress_hyper_6_29_chunk.device_id
                     Sort Method: quicksort 
                     ->  Seq Scan on compress_hyper_6_29_chunk (actual rows=18 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_5_27_chunk (actual rows=1 loops=1)
               ->  Sort (actual rows=1 loops=1)
                     Sort Key: compress_hyper_6_28_chunk.device_id
                     Sort Method: quicksort 
                     ->  Seq Scan on compress_hyper_6_28_chunk (actual rows=6 loops=1)
(48 rows)

-- time column must be primary sort order
:PREFIX SELECT
  time, device_id
FROM :TEST_TABLE
ORDER BY device_id, time LIMIT 1;
                                                       QUERY PLAN                                                        
-------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=1 loops=1)
   ->  Merge Append (actual rows=1 loops=1)
         Sort Key: _hyper_5_19_chunk.device_id, _hyper_5_19_chunk."time"
         ->  Custom Scan (DecompressChunk) on _hyper_5_19_chunk (actual rows=1 loops=1)
               ->  Sort (actual rows=1 loops=1)
                     Sort Key: compress_hyper_6_36_chunk.device_id, compress_hyper_6_36_chunk._ts_meta_sequence_num DESC
                     Sort Method: quicksort 
                     ->  Seq Scan on compress_hyper_6_36_chunk (actual rows=4 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_5_20_chunk (actual rows=1 loops=1)
               ->  Sort (actual rows=1 loops=1)
                     Sort Key: compress_hyper_6_35_chunk.device_id, compress_hyper_6_35_chunk._ts_meta_sequence_num DESC
                     Sort Method: quicksort 
                     ->  Seq Scan on compress_hyper_6_35_chunk (actual rows=12 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_5_21_chunk (actual rows=1 loops=1)
               ->  Sort (actual rows=1 loops=1)
                     Sort Key: compress_hyper_6_34_chunk.device_id, compress_hyper_6_34_chunk._ts_meta_sequence_num DESC
                     Sort Method: quicksort 
                     ->  Seq Scan on compress_hyper_6_34_chunk (actual rows=4 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_5_22_chunk (actual rows=1 loops=1)
               ->  Sort (actual rows=1 loops=1)
                     Sort Key: compress_hyper_6_33_chunk.device_id, compress_hyper_6_33_chunk._ts_meta_sequence_num DESC
                     Sort Method: quicksort 
                     ->  Seq Scan on compress_hyper_6_33_chunk (actual rows=6 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_5_23_chunk (actual rows=1 loops=1)
               ->  Sort (actual rows=1 loops=1)
                     Sort Key: compress_hyper_6_32_chunk.device_id, compress_hyper_6_32_chunk._ts_meta_sequence_num DESC
                     Sort Method: quicksort 
                     ->  Seq Scan on compress_hyper_6_32_chunk (actual rows=18 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_5_24_chunk (actual rows=1 loops=1)
               ->  Sort (actual rows=1 loops=1)
                     Sort Key: compress_hyper_6_31_chunk.device_id, compress_hyper_6_31_chunk._ts_meta_sequence_num DESC
                     Sort Method: quicksort 
                     ->  Seq Scan on compress_hyper_6_31_chunk (actual rows=6 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_5_25_chunk (actual rows=1 loops=1)
               ->  Sort (actual rows=1 loops=1)
                     Sort Key: compress_hyper_6_30_chunk.device_id, compress_hyper_6_30_chunk._ts_meta_sequence_num DESC
                     Sort Method: quicksort 
                     ->  Seq Scan on compress_hyper_6_30_chunk (actual rows=6 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_5_26_chunk (actual rows=1 loops=1)
               ->  Sort (actual rows=1 loops=1)
                     Sort Key: compress_hyper_6_29_chunk.device_id, compress_hyper_6_29_chunk._ts_meta_sequence_num DESC
                     Sort Method: quicksort 
                     ->  Seq Scan on compress_hyper_6_29_chunk (actual rows=18 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_5_27_chunk (actual rows=1 loops=1)
               ->  Sort (actual rows=1 loops=1)
                     Sort Key: compress_hyper_6_28_chunk.device_id, compress_hyper_6_28_chunk._ts_meta_sequence_num DESC
                     Sort Method: quicksort 
                     ->  Seq Scan on compress_hyper_6_28_chunk (actual rows=6 loops=1)
(48 rows)

-- test equality constraint on ORDER BY prefix
-- currently not optimized
:PREFIX SELECT
  time, device_id
FROM :TEST_TABLE
WHERE device_id = 1
ORDER BY device_id, time LIMIT 10;
                                       QUERY PLAN                                        
-----------------------------------------------------------------------------------------
 Limit (actual rows=10 loops=1)
   ->  Merge Append (actual rows=10 loops=1)
         Sort Key: _hyper_5_25_chunk."time"
         ->  Custom Scan (DecompressChunk) on _hyper_5_25_chunk (actual rows=1 loops=1)
               ->  Sort (actual rows=1 loops=1)
                     Sort Key: compress_hyper_6_30_chunk._ts_meta_sequence_num DESC
                     Sort Method: quicksort 
                     ->  Seq Scan on compress_hyper_6_30_chunk (actual rows=6 loops=1)
                           Filter: (device_id = 1)
         ->  Custom Scan (DecompressChunk) on _hyper_5_19_chunk (actual rows=10 loops=1)
               ->  Sort (actual rows=1 loops=1)
                     Sort Key: compress_hyper_6_36_chunk._ts_meta_sequence_num DESC
                     Sort Method: quicksort 
                     ->  Seq Scan on compress_hyper_6_36_chunk (actual rows=4 loops=1)
                           Filter: (device_id = 1)
         ->  Custom Scan (DecompressChunk) on _hyper_5_22_chunk (actual rows=1 loops=1)
               ->  Sort (actual rows=1 loops=1)
                     Sort Key: compress_hyper_6_33_chunk._ts_meta_sequence_num DESC
                     Sort Method: quicksort 
                     ->  Seq Scan on compress_hyper_6_33_chunk (actual rows=6 loops=1)
                           Filter: (device_id = 1)
(21 rows)

-- queries without LIMIT should use ordered append
:PREFIX SELECT
  time
FROM :TEST_TABLE
ORDER BY time ASC;
                                         QUERY PLAN                                         
--------------------------------------------------------------------------------------------
 Sort (actual rows=68370 loops=1)
   Sort Key: _hyper_5_19_chunk."time"
   Sort Method: quicksort 
   ->  Append (actual rows=68370 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_5_19_chunk (actual rows=3598 loops=1)
               ->  Seq Scan on compress_hyper_6_36_chunk (actual rows=4 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_5_20_chunk (actual rows=10794 loops=1)
               ->  Seq Scan on compress_hyper_6_35_chunk (actual rows=12 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_5_21_chunk (actual rows=3598 loops=1)
               ->  Seq Scan on compress_hyper_6_34_chunk (actual rows=4 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_5_22_chunk (actual rows=5038 loops=1)
               ->  Seq Scan on compress_hyper_6_33_chunk (actual rows=6 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_5_23_chunk (actual rows=15114 loops=1)
               ->  Seq Scan on compress_hyper_6_32_chunk (actual rows=18 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_5_24_chunk (actual rows=5038 loops=1)
               ->  Seq Scan on compress_hyper_6_31_chunk (actual rows=6 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_5_25_chunk (actual rows=5038 loops=1)
               ->  Seq Scan on compress_hyper_6_30_chunk (actual rows=6 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_5_26_chunk (actual rows=15114 loops=1)
               ->  Seq Scan on compress_hyper_6_29_chunk (actual rows=18 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_5_27_chunk (actual rows=5038 loops=1)
               ->  Seq Scan on compress_hyper_6_28_chunk (actual rows=6 loops=1)
(22 rows)

-- queries without ORDER BY shouldnt use ordered append
:PREFIX SELECT
  pg_typeof(time)
FROM :TEST_TABLE
LIMIT 1;
                                          QUERY PLAN                                          
----------------------------------------------------------------------------------------------
 Limit (actual rows=1 loops=1)
   ->  Result (actual rows=1 loops=1)
         ->  Append (actual rows=1 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_5_19_chunk (actual rows=1 loops=1)
                     ->  Seq Scan on compress_hyper_6_36_chunk (actual rows=1 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_5_20_chunk (never executed)
                     ->  Seq Scan on compress_hyper_6_35_chunk (never executed)
               ->  Custom Scan (DecompressChunk) on _hyper_5_21_chunk (never executed)
                     ->  Seq Scan on compress_hyper_6_34_chunk (never executed)
               ->  Custom Scan (DecompressChunk) on _hyper_5_22_chunk (never executed)
                     ->  Seq Scan on compress_hyper_6_33_chunk (never executed)
               ->  Custom Scan (DecompressChunk) on _hyper_5_23_chunk (never executed)
                     ->  Seq Scan on compress_hyper_6_32_chunk (never executed)
               ->  Custom Scan (DecompressChunk) on _hyper_5_24_chunk (never executed)
                     ->  Seq Scan on compress_hyper_6_31_chunk (never executed)
               ->  Custom Scan (DecompressChunk) on _hyper_5_25_chunk (never executed)
                     ->  Seq Scan on compress_hyper_6_30_chunk (never executed)
               ->  Custom Scan (DecompressChunk) on _hyper_5_26_chunk (never executed)
                     ->  Seq Scan on compress_hyper_6_29_chunk (never executed)
               ->  Custom Scan (DecompressChunk) on _hyper_5_27_chunk (never executed)
                     ->  Seq Scan on compress_hyper_6_28_chunk (never executed)
(21 rows)

-- test interaction with constraint exclusion
:PREFIX SELECT
  time
FROM :TEST_TABLE
WHERE time > '2000-01-07'
ORDER BY time ASC LIMIT 1;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Limit (actual rows=1 loops=1)
   ->  Sort (actual rows=1 loops=1)
         Sort Key: _hyper_5_22_chunk."time"
         Sort Method: top-N heapsort 
         ->  Append (actual rows=45575 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_5_22_chunk (actual rows=4077 loops=1)
                     Filter: ("time" > 'Fri Jan 07 00:00:00 2000 PST'::timestamp with time zone)
                     Rows Removed by Filter: 923
                     ->  Seq Scan on compress_hyper_6_33_chunk (actual rows=5 loops=1)
                           Filter: (_ts_meta_max_1 > 'Fri Jan 07 00:00:00 2000 PST'::timestamp with time zone)
                           Rows Removed by Filter: 1
               ->  Custom Scan (DecompressChunk) on _hyper_5_23_chunk (actual rows=12231 loops=1)
                     Filter: ("time" > 'Fri Jan 07 00:00:00 2000 PST'::timestamp with time zone)
                     Rows Removed by Filter: 2769
                     ->  Seq Scan on compress_hyper_6_32_chunk (actual rows=15 loops=1)
                           Filter: (_ts_meta_max_1 > 'Fri Jan 07 00:00:00 2000 PST'::timestamp with time zone)
                           Rows Removed by Filter: 3
               ->  Custom Scan (DecompressChunk) on _hyper_5_24_chunk (actual rows=4077 loops=1)
                     Filter: ("time" > 'Fri Jan 07 00:00:00 2000 PST'::timestamp with time zone)
                     Rows Removed by Filter: 923
                     ->  Seq Scan on compress_hyper_6_31_chunk (actual rows=5 loops=1)
                           Filter: (_ts_meta_max_1 > 'Fri Jan 07 00:00:00 2000 PST'::timestamp with time zone)
                           Rows Removed by Filter: 1
               ->  Custom Scan (DecompressChunk) on _hyper_5_25_chunk (actual rows=5038 loops=1)
                     Filter: ("time" > 'Fri Jan 07 00:00:00 2000 PST'::timestamp with time zone)
                     ->  Seq Scan on compress_hyper_6_30_chunk (actual rows=6 loops=1)
                           Filter: (_ts_meta_max_1 > 'Fri Jan 07 00:00:00 2000 PST'::timestamp with time zone)
               ->  Custom Scan (DecompressChunk) on _hyper_5_26_chunk (actual rows=15114 loops=1)
                     Filter: ("time" > 'Fri Jan 07 00:00:00 2000 PST'::timestamp with time zone)
                     ->  Seq Scan on compress_hyper_6_29_chunk (actual rows=18 loops=1)
                           Filter: (_ts_meta_max_1 > 'Fri Jan 07 00:00:00 2000 PST'::timestamp with time zone)
               ->  Custom Scan (DecompressChunk) on _hyper_5_27_chunk (actual rows=5038 loops=1)
                     Filter: ("time" > 'Fri Jan 07 00:00:00 2000 PST'::timestamp with time zone)
                     ->  Seq Scan on compress_hyper_6_28_chunk (actual rows=6 loops=1)
                           Filter: (_ts_meta_max_1 > 'Fri Jan 07 00:00:00 2000 PST'::timestamp with time zone)
(35 rows)

:PREFIX SELECT
  time
FROM :TEST_TABLE
WHERE time > '2000-01-07'
ORDER BY time DESC LIMIT 1;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Limit (actual rows=1 loops=1)
   ->  Sort (actual rows=1 loops=1)
         Sort Key: _hyper_5_27_chunk."time" DESC
         Sort Method: top-N heapsort 
         ->  Append (actual rows=45575 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_5_27_chunk (actual rows=5038 loops=1)
                     Filter: ("time" > 'Fri Jan 07 00:00:00 2000 PST'::timestamp with time zone)
                     ->  Seq Scan on compress_hyper_6_28_chunk (actual rows=6 loops=1)
                           Filter: (_ts_meta_max_1 > 'Fri Jan 07 00:00:00 2000 PST'::timestamp with time zone)
               ->  Custom Scan (DecompressChunk) on _hyper_5_26_chunk (actual rows=15114 loops=1)
                     Filter: ("time" > 'Fri Jan 07 00:00:00 2000 PST'::timestamp with time zone)
                     ->  Seq Scan on compress_hyper_6_29_chunk (actual rows=18 loops=1)
                           Filter: (_ts_meta_max_1 > 'Fri Jan 07 00:00:00 2000 PST'::timestamp with time zone)
               ->  Custom Scan (DecompressChunk) on _hyper_5_25_chunk (actual rows=5038 loops=1)
                     Filter: ("time" > 'Fri Jan 07 00:00:00 2000 PST'::timestamp with time zone)
                     ->  Seq Scan on compress_hyper_6_30_chunk (actual rows=6 loops=1)
                           Filter: (_ts_meta_max_1 > 'Fri Jan 07 00:00:00 2000 PST'::timestamp with time zone)
               ->  Custom Scan (DecompressChunk) on _hyper_5_24_chunk (actual rows=4077 loops=1)
                     Filter: ("time" > 'Fri Jan 07 00:00:00 2000 PST'::timestamp with time zone)
                     Rows Removed by Filter: 923
                     ->  Seq Scan on compress_hyper_6_31_chunk (actual rows=5 loops=1)
                           Filter: (_ts_meta_max_1 > 'Fri Jan 07 00:00:00 2000 PST'::timestamp with time zone)
                           Rows Removed by Filter: 1
               ->  Custom Scan (DecompressChunk) on _hyper_5_23_chunk (actual rows=12231 loops=1)
                     Filter: ("time" > 'Fri Jan 07 00:00:00 2000 PST'::timestamp with time zone)
                     Rows Removed by Filter: 2769
                     ->  Seq Scan on compress_hyper_6_32_chunk (actual rows=15 loops=1)
                           Filter: (_ts_meta_max_1 > 'Fri Jan 07 00:00:00 2000 PST'::timestamp with time zone)
                           Rows Removed by Filter: 3
               ->  Custom Scan (DecompressChunk) on _hyper_5_22_chunk (actual rows=4077 loops=1)
                     Filter: ("time" > 'Fri Jan 07 00:00:00 2000 PST'::timestamp with time zone)
                     Rows Removed by Filter: 923
                     ->  Seq Scan on compress_hyper_6_33_chunk (actual rows=5 loops=1)
                           Filter: (_ts_meta_max_1 > 'Fri Jan 07 00:00:00 2000 PST'::timestamp with time zone)
                           Rows Removed by Filter: 1
(35 rows)

-- test interaction with runtime exclusion
:PREFIX SELECT
  time
FROM :TEST_TABLE
WHERE time > '2000-01-08'::text::timestamptz
ORDER BY time ASC LIMIT 1;
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 Limit (actual rows=1 loops=1)
   ->  Sort (actual rows=1 loops=1)
         Sort Key: metrics_space_compressed."time"
         Sort Method: top-N heapsort 
         ->  Custom Scan (ChunkAppend) on metrics_space_compressed (actual rows=41975 loops=1)
               ->  Merge Append (actual rows=0 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_19_chunk (actual rows=0 loops=1)
                           Filter: ("time" > ('2000-01-08'::cstring)::timestamp with time zone)
                           Rows Removed by Filter: 3598
                           ->  Seq Scan on compress_hyper_6_36_chunk (actual rows=4 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_20_chunk (actual rows=0 loops=1)
                           Filter: ("time" > ('2000-01-08'::cstring)::timestamp with time zone)
                           Rows Removed by Filter: 10794
                           ->  Seq Scan on compress_hyper_6_35_chunk (actual rows=12 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_21_chunk (actual rows=0 loops=1)
                           Filter: ("time" > ('2000-01-08'::cstring)::timestamp with time zone)
                           Rows Removed by Filter: 3598
                           ->  Seq Scan on compress_hyper_6_34_chunk (actual rows=4 loops=1)
               ->  Merge Append (actual rows=16785 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_22_chunk (actual rows=3357 loops=1)
                           Filter: ("time" > ('2000-01-08'::cstring)::timestamp with time zone)
                           Rows Removed by Filter: 1681
                           ->  Seq Scan on compress_hyper_6_33_chunk (actual rows=6 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_23_chunk (actual rows=10071 loops=1)
                           Filter: ("time" > ('2000-01-08'::cstring)::timestamp with time zone)
                           Rows Removed by Filter: 5043
                           ->  Seq Scan on compress_hyper_6_32_chunk (actual rows=18 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_24_chunk (actual rows=3357 loops=1)
                           Filter: ("time" > ('2000-01-08'::cstring)::timestamp with time zone)
                           Rows Removed by Filter: 1681
                           ->  Seq Scan on compress_hyper_6_31_chunk (actual rows=6 loops=1)
               ->  Merge Append (actual rows=25190 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_25_chunk (actual rows=5038 loops=1)
                           Filter: ("time" > ('2000-01-08'::cstring)::timestamp with time zone)
                           ->  Seq Scan on compress_hyper_6_30_chunk (actual rows=6 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_26_chunk (actual rows=15114 loops=1)
                           Filter: ("time" > ('2000-01-08'::cstring)::timestamp with time zone)
                           ->  Seq Scan on compress_hyper_6_29_chunk (actual rows=18 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_27_chunk (actual rows=5038 loops=1)
                           Filter: ("time" > ('2000-01-08'::cstring)::timestamp with time zone)
                           ->  Seq Scan on compress_hyper_6_28_chunk (actual rows=6 loops=1)
(41 rows)

:PREFIX SELECT
  time
FROM :TEST_TABLE
WHERE time < '2000-01-08'::text::timestamptz
ORDER BY time ASC LIMIT 1;
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 Limit (actual rows=1 loops=1)
   ->  Sort (actual rows=1 loops=1)
         Sort Key: metrics_space_compressed."time"
         Sort Method: top-N heapsort 
         ->  Custom Scan (ChunkAppend) on metrics_space_compressed (actual rows=26390 loops=1)
               ->  Merge Append (actual rows=17990 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_19_chunk (actual rows=3598 loops=1)
                           Filter: ("time" < ('2000-01-08'::cstring)::timestamp with time zone)
                           ->  Seq Scan on compress_hyper_6_36_chunk (actual rows=4 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_20_chunk (actual rows=10794 loops=1)
                           Filter: ("time" < ('2000-01-08'::cstring)::timestamp with time zone)
                           ->  Seq Scan on compress_hyper_6_35_chunk (actual rows=12 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_21_chunk (actual rows=3598 loops=1)
                           Filter: ("time" < ('2000-01-08'::cstring)::timestamp with time zone)
                           ->  Seq Scan on compress_hyper_6_34_chunk (actual rows=4 loops=1)
               ->  Merge Append (actual rows=8400 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_22_chunk (actual rows=1680 loops=1)
                           Filter: ("time" < ('2000-01-08'::cstring)::timestamp with time zone)
                           Rows Removed by Filter: 3358
                           ->  Seq Scan on compress_hyper_6_33_chunk (actual rows=6 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_23_chunk (actual rows=5040 loops=1)
                           Filter: ("time" < ('2000-01-08'::cstring)::timestamp with time zone)
                           Rows Removed by Filter: 10074
                           ->  Seq Scan on compress_hyper_6_32_chunk (actual rows=18 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_24_chunk (actual rows=1680 loops=1)
                           Filter: ("time" < ('2000-01-08'::cstring)::timestamp with time zone)
                           Rows Removed by Filter: 3358
                           ->  Seq Scan on compress_hyper_6_31_chunk (actual rows=6 loops=1)
               ->  Merge Append (actual rows=0 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_25_chunk (actual rows=0 loops=1)
                           Filter: ("time" < ('2000-01-08'::cstring)::timestamp with time zone)
                           Rows Removed by Filter: 5038
                           ->  Seq Scan on compress_hyper_6_30_chunk (actual rows=6 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_26_chunk (actual rows=0 loops=1)
                           Filter: ("time" < ('2000-01-08'::cstring)::timestamp with time zone)
                           Rows Removed by Filter: 15114
                           ->  Seq Scan on compress_hyper_6_29_chunk (actual rows=18 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_27_chunk (actual rows=0 loops=1)
                           Filter: ("time" < ('2000-01-08'::cstring)::timestamp with time zone)
                           Rows Removed by Filter: 5038
                           ->  Seq Scan on compress_hyper_6_28_chunk (actual rows=6 loops=1)
(41 rows)

-- test constraint exclusion
:PREFIX SELECT
  time
FROM :TEST_TABLE
WHERE time > '2000-01-08'::text::timestamptz AND time < '2000-01-10'
ORDER BY time ASC LIMIT 1;
                                                                                QUERY PLAN                                                                                
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=1 loops=1)
   ->  Sort (actual rows=1 loops=1)
         Sort Key: metrics_space_compressed."time"
         Sort Method: top-N heapsort 
         ->  Custom Scan (ChunkAppend) on metrics_space_compressed (actual rows=7195 loops=1)
               ->  Merge Append (actual rows=0 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_19_chunk (actual rows=0 loops=1)
                           Filter: (("time" < 'Mon Jan 10 00:00:00 2000 PST'::timestamp with time zone) AND ("time" > ('2000-01-08'::cstring)::timestamp with time zone))
                           Rows Removed by Filter: 3598
                           ->  Seq Scan on compress_hyper_6_36_chunk (actual rows=4 loops=1)
                                 Filter: (_ts_meta_min_1 < 'Mon Jan 10 00:00:00 2000 PST'::timestamp with time zone)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_20_chunk (actual rows=0 loops=1)
                           Filter: (("time" < 'Mon Jan 10 00:00:00 2000 PST'::timestamp with time zone) AND ("time" > ('2000-01-08'::cstring)::timestamp with time zone))
                           Rows Removed by Filter: 10794
                           ->  Seq Scan on compress_hyper_6_35_chunk (actual rows=12 loops=1)
                                 Filter: (_ts_meta_min_1 < 'Mon Jan 10 00:00:00 2000 PST'::timestamp with time zone)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_21_chunk (actual rows=0 loops=1)
                           Filter: (("time" < 'Mon Jan 10 00:00:00 2000 PST'::timestamp with time zone) AND ("time" > ('2000-01-08'::cstring)::timestamp with time zone))
                           Rows Removed by Filter: 3598
                           ->  Seq Scan on compress_hyper_6_34_chunk (actual rows=4 loops=1)
                                 Filter: (_ts_meta_min_1 < 'Mon Jan 10 00:00:00 2000 PST'::timestamp with time zone)
               ->  Merge Append (actual rows=7195 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_22_chunk (actual rows=1439 loops=1)
                           Filter: (("time" < 'Mon Jan 10 00:00:00 2000 PST'::timestamp with time zone) AND ("time" > ('2000-01-08'::cstring)::timestamp with time zone))
                           Rows Removed by Filter: 2599
                           ->  Seq Scan on compress_hyper_6_33_chunk (actual rows=5 loops=1)
                                 Filter: (_ts_meta_min_1 < 'Mon Jan 10 00:00:00 2000 PST'::timestamp with time zone)
                                 Rows Removed by Filter: 1
                     ->  Custom Scan (DecompressChunk) on _hyper_5_23_chunk (actual rows=4317 loops=1)
                           Filter: (("time" < 'Mon Jan 10 00:00:00 2000 PST'::timestamp with time zone) AND ("time" > ('2000-01-08'::cstring)::timestamp with time zone))
                           Rows Removed by Filter: 7797
                           ->  Seq Scan on compress_hyper_6_32_chunk (actual rows=15 loops=1)
                                 Filter: (_ts_meta_min_1 < 'Mon Jan 10 00:00:00 2000 PST'::timestamp with time zone)
                                 Rows Removed by Filter: 3
                     ->  Custom Scan (DecompressChunk) on _hyper_5_24_chunk (actual rows=1439 loops=1)
                           Filter: (("time" < 'Mon Jan 10 00:00:00 2000 PST'::timestamp with time zone) AND ("time" > ('2000-01-08'::cstring)::timestamp with time zone))
                           Rows Removed by Filter: 2599
                           ->  Seq Scan on compress_hyper_6_31_chunk (actual rows=5 loops=1)
                                 Filter: (_ts_meta_min_1 < 'Mon Jan 10 00:00:00 2000 PST'::timestamp with time zone)
                                 Rows Removed by Filter: 1
(40 rows)

:PREFIX SELECT
  time
FROM :TEST_TABLE
WHERE time < '2000-01-08'::text::timestamptz AND time > '2000-01-07'
ORDER BY time ASC LIMIT 1;
                                                                                QUERY PLAN                                                                                
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=1 loops=1)
   ->  Sort (actual rows=1 loops=1)
         Sort Key: metrics_space_compressed."time"
         Sort Method: top-N heapsort 
         ->  Custom Scan (ChunkAppend) on metrics_space_compressed (actual rows=3595 loops=1)
               ->  Merge Append (actual rows=3595 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_22_chunk (actual rows=719 loops=1)
                           Filter: (("time" > 'Fri Jan 07 00:00:00 2000 PST'::timestamp with time zone) AND ("time" < ('2000-01-08'::cstring)::timestamp with time zone))
                           Rows Removed by Filter: 4281
                           ->  Seq Scan on compress_hyper_6_33_chunk (actual rows=5 loops=1)
                                 Filter: (_ts_meta_max_1 > 'Fri Jan 07 00:00:00 2000 PST'::timestamp with time zone)
                                 Rows Removed by Filter: 1
                     ->  Custom Scan (DecompressChunk) on _hyper_5_23_chunk (actual rows=2157 loops=1)
                           Filter: (("time" > 'Fri Jan 07 00:00:00 2000 PST'::timestamp with time zone) AND ("time" < ('2000-01-08'::cstring)::timestamp with time zone))
                           Rows Removed by Filter: 12843
                           ->  Seq Scan on compress_hyper_6_32_chunk (actual rows=15 loops=1)
                                 Filter: (_ts_meta_max_1 > 'Fri Jan 07 00:00:00 2000 PST'::timestamp with time zone)
                                 Rows Removed by Filter: 3
                     ->  Custom Scan (DecompressChunk) on _hyper_5_24_chunk (actual rows=719 loops=1)
                           Filter: (("time" > 'Fri Jan 07 00:00:00 2000 PST'::timestamp with time zone) AND ("time" < ('2000-01-08'::cstring)::timestamp with time zone))
                           Rows Removed by Filter: 4281
                           ->  Seq Scan on compress_hyper_6_31_chunk (actual rows=5 loops=1)
                                 Filter: (_ts_meta_max_1 > 'Fri Jan 07 00:00:00 2000 PST'::timestamp with time zone)
                                 Rows Removed by Filter: 1
               ->  Merge Append (actual rows=0 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_25_chunk (actual rows=0 loops=1)
                           Filter: (("time" > 'Fri Jan 07 00:00:00 2000 PST'::timestamp with time zone) AND ("time" < ('2000-01-08'::cstring)::timestamp with time zone))
                           Rows Removed by Filter: 5038
                           ->  Seq Scan on compress_hyper_6_30_chunk (actual rows=6 loops=1)
                                 Filter: (_ts_meta_max_1 > 'Fri Jan 07 00:00:00 2000 PST'::timestamp with time zone)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_26_chunk (actual rows=0 loops=1)
                           Filter: (("time" > 'Fri Jan 07 00:00:00 2000 PST'::timestamp with time zone) AND ("time" < ('2000-01-08'::cstring)::timestamp with time zone))
                           Rows Removed by Filter: 15114
                           ->  Seq Scan on compress_hyper_6_29_chunk (actual rows=18 loops=1)
                                 Filter: (_ts_meta_max_1 > 'Fri Jan 07 00:00:00 2000 PST'::timestamp with time zone)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_27_chunk (actual rows=0 loops=1)
                           Filter: (("time" > 'Fri Jan 07 00:00:00 2000 PST'::timestamp with time zone) AND ("time" < ('2000-01-08'::cstring)::timestamp with time zone))
                           Rows Removed by Filter: 5038
                           ->  Seq Scan on compress_hyper_6_28_chunk (actual rows=6 loops=1)
                                 Filter: (_ts_meta_max_1 > 'Fri Jan 07 00:00:00 2000 PST'::timestamp with time zone)
(40 rows)

-- min/max queries
:PREFIX SELECT max(time) FROM :TEST_TABLE;
                                         QUERY PLAN                                         
--------------------------------------------------------------------------------------------
 Aggregate (actual rows=1 loops=1)
   ->  Append (actual rows=68370 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_5_19_chunk (actual rows=3598 loops=1)
               ->  Seq Scan on compress_hyper_6_36_chunk (actual rows=4 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_5_20_chunk (actual rows=10794 loops=1)
               ->  Seq Scan on compress_hyper_6_35_chunk (actual rows=12 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_5_21_chunk (actual rows=3598 loops=1)
               ->  Seq Scan on compress_hyper_6_34_chunk (actual rows=4 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_5_22_chunk (actual rows=5038 loops=1)
               ->  Seq Scan on compress_hyper_6_33_chunk (actual rows=6 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_5_23_chunk (actual rows=15114 loops=1)
               ->  Seq Scan on compress_hyper_6_32_chunk (actual rows=18 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_5_24_chunk (actual rows=5038 loops=1)
               ->  Seq Scan on compress_hyper_6_31_chunk (actual rows=6 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_5_25_chunk (actual rows=5038 loops=1)
               ->  Seq Scan on compress_hyper_6_30_chunk (actual rows=6 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_5_26_chunk (actual rows=15114 loops=1)
               ->  Seq Scan on compress_hyper_6_29_chunk (actual rows=18 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_5_27_chunk (actual rows=5038 loops=1)
               ->  Seq Scan on compress_hyper_6_28_chunk (actual rows=6 loops=1)
(20 rows)

:PREFIX SELECT min(time) FROM :TEST_TABLE;
                                         QUERY PLAN                                         
--------------------------------------------------------------------------------------------
 Aggregate (actual rows=1 loops=1)
   ->  Append (actual rows=68370 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_5_19_chunk (actual rows=3598 loops=1)
               ->  Seq Scan on compress_hyper_6_36_chunk (actual rows=4 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_5_20_chunk (actual rows=10794 loops=1)
               ->  Seq Scan on compress_hyper_6_35_chunk (actual rows=12 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_5_21_chunk (actual rows=3598 loops=1)
               ->  Seq Scan on compress_hyper_6_34_chunk (actual rows=4 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_5_22_chunk (actual rows=5038 loops=1)
               ->  Seq Scan on compress_hyper_6_33_chunk (actual rows=6 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_5_23_chunk (actual rows=15114 loops=1)
               ->  Seq Scan on compress_hyper_6_32_chunk (actual rows=18 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_5_24_chunk (actual rows=5038 loops=1)
               ->  Seq Scan on compress_hyper_6_31_chunk (actual rows=6 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_5_25_chunk (actual rows=5038 loops=1)
               ->  Seq Scan on compress_hyper_6_30_chunk (actual rows=6 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_5_26_chunk (actual rows=15114 loops=1)
               ->  Seq Scan on compress_hyper_6_29_chunk (actual rows=18 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_5_27_chunk (actual rows=5038 loops=1)
               ->  Seq Scan on compress_hyper_6_28_chunk (actual rows=6 loops=1)
(20 rows)

-- test first/last (doesn't use ordered append yet)
:PREFIX SELECT first(time, time) FROM :TEST_TABLE;
                                         QUERY PLAN                                         
--------------------------------------------------------------------------------------------
 Aggregate (actual rows=1 loops=1)
   ->  Append (actual rows=68370 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_5_19_chunk (actual rows=3598 loops=1)
               ->  Seq Scan on compress_hyper_6_36_chunk (actual rows=4 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_5_20_chunk (actual rows=10794 loops=1)
               ->  Seq Scan on compress_hyper_6_35_chunk (actual rows=12 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_5_21_chunk (actual rows=3598 loops=1)
               ->  Seq Scan on compress_hyper_6_34_chunk (actual rows=4 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_5_22_chunk (actual rows=5038 loops=1)
               ->  Seq Scan on compress_hyper_6_33_chunk (actual rows=6 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_5_23_chunk (actual rows=15114 loops=1)
               ->  Seq Scan on compress_hyper_6_32_chunk (actual rows=18 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_5_24_chunk (actual rows=5038 loops=1)
               ->  Seq Scan on compress_hyper_6_31_chunk (actual rows=6 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_5_25_chunk (actual rows=5038 loops=1)
               ->  Seq Scan on compress_hyper_6_30_chunk (actual rows=6 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_5_26_chunk (actual rows=15114 loops=1)
               ->  Seq Scan on compress_hyper_6_29_chunk (actual rows=18 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_5_27_chunk (actual rows=5038 loops=1)
               ->  Seq Scan on compress_hyper_6_28_chunk (actual rows=6 loops=1)
(20 rows)

:PREFIX SELECT last(time, time) FROM :TEST_TABLE;
                                         QUERY PLAN                                         
--------------------------------------------------------------------------------------------
 Aggregate (actual rows=1 loops=1)
   ->  Append (actual rows=68370 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_5_19_chunk (actual rows=3598 loops=1)
               ->  Seq Scan on compress_hyper_6_36_chunk (actual rows=4 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_5_20_chunk (actual rows=10794 loops=1)
               ->  Seq Scan on compress_hyper_6_35_chunk (actual rows=12 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_5_21_chunk (actual rows=3598 loops=1)
               ->  Seq Scan on compress_hyper_6_34_chunk (actual rows=4 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_5_22_chunk (actual rows=5038 loops=1)
               ->  Seq Scan on compress_hyper_6_33_chunk (actual rows=6 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_5_23_chunk (actual rows=15114 loops=1)
               ->  Seq Scan on compress_hyper_6_32_chunk (actual rows=18 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_5_24_chunk (actual rows=5038 loops=1)
               ->  Seq Scan on compress_hyper_6_31_chunk (actual rows=6 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_5_25_chunk (actual rows=5038 loops=1)
               ->  Seq Scan on compress_hyper_6_30_chunk (actual rows=6 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_5_26_chunk (actual rows=15114 loops=1)
               ->  Seq Scan on compress_hyper_6_29_chunk (actual rows=18 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_5_27_chunk (actual rows=5038 loops=1)
               ->  Seq Scan on compress_hyper_6_28_chunk (actual rows=6 loops=1)
(20 rows)

-- test query with time_bucket
:PREFIX SELECT
  time_bucket('1d',time)
FROM :TEST_TABLE
ORDER BY time ASC LIMIT 1;
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 Limit (actual rows=1 loops=1)
   ->  Sort (actual rows=1 loops=1)
         Sort Key: _hyper_5_19_chunk."time"
         Sort Method: top-N heapsort 
         ->  Result (actual rows=68370 loops=1)
               ->  Append (actual rows=68370 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_19_chunk (actual rows=3598 loops=1)
                           ->  Seq Scan on compress_hyper_6_36_chunk (actual rows=4 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_20_chunk (actual rows=10794 loops=1)
                           ->  Seq Scan on compress_hyper_6_35_chunk (actual rows=12 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_21_chunk (actual rows=3598 loops=1)
                           ->  Seq Scan on compress_hyper_6_34_chunk (actual rows=4 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_22_chunk (actual rows=5038 loops=1)
                           ->  Seq Scan on compress_hyper_6_33_chunk (actual rows=6 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_23_chunk (actual rows=15114 loops=1)
                           ->  Seq Scan on compress_hyper_6_32_chunk (actual rows=18 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_24_chunk (actual rows=5038 loops=1)
                           ->  Seq Scan on compress_hyper_6_31_chunk (actual rows=6 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_25_chunk (actual rows=5038 loops=1)
                           ->  Seq Scan on compress_hyper_6_30_chunk (actual rows=6 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_26_chunk (actual rows=15114 loops=1)
                           ->  Seq Scan on compress_hyper_6_29_chunk (actual rows=18 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_27_chunk (actual rows=5038 loops=1)
                           ->  Seq Scan on compress_hyper_6_28_chunk (actual rows=6 loops=1)
(24 rows)

-- test query with ORDER BY time_bucket
:PREFIX SELECT
  time_bucket('1d',time)
FROM :TEST_TABLE
ORDER BY 1 LIMIT 1;
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 Limit (actual rows=1 loops=1)
   ->  Sort (actual rows=1 loops=1)
         Sort Key: (time_bucket('@ 1 day'::interval, _hyper_5_19_chunk."time"))
         Sort Method: top-N heapsort 
         ->  Result (actual rows=68370 loops=1)
               ->  Append (actual rows=68370 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_19_chunk (actual rows=3598 loops=1)
                           ->  Seq Scan on compress_hyper_6_36_chunk (actual rows=4 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_20_chunk (actual rows=10794 loops=1)
                           ->  Seq Scan on compress_hyper_6_35_chunk (actual rows=12 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_21_chunk (actual rows=3598 loops=1)
                           ->  Seq Scan on compress_hyper_6_34_chunk (actual rows=4 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_22_chunk (actual rows=5038 loops=1)
                           ->  Seq Scan on compress_hyper_6_33_chunk (actual rows=6 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_23_chunk (actual rows=15114 loops=1)
                           ->  Seq Scan on compress_hyper_6_32_chunk (actual rows=18 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_24_chunk (actual rows=5038 loops=1)
                           ->  Seq Scan on compress_hyper_6_31_chunk (actual rows=6 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_25_chunk (actual rows=5038 loops=1)
                           ->  Seq Scan on compress_hyper_6_30_chunk (actual rows=6 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_26_chunk (actual rows=15114 loops=1)
                           ->  Seq Scan on compress_hyper_6_29_chunk (actual rows=18 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_27_chunk (actual rows=5038 loops=1)
                           ->  Seq Scan on compress_hyper_6_28_chunk (actual rows=6 loops=1)
(24 rows)

-- test query with ORDER BY time_bucket, device_id
-- must not use ordered append
:PREFIX SELECT
  time_bucket('1d',time), device_id, v0
FROM :TEST_TABLE
ORDER BY time_bucket('1d',time), device_id LIMIT 1;
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Limit (actual rows=1 loops=1)
   ->  Sort (actual rows=1 loops=1)
         Sort Key: (time_bucket('@ 1 day'::interval, _hyper_5_19_chunk."time")), _hyper_5_19_chunk.device_id
         Sort Method: top-N heapsort 
         ->  Result (actual rows=68370 loops=1)
               ->  Append (actual rows=68370 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_19_chunk (actual rows=3598 loops=1)
                           ->  Seq Scan on compress_hyper_6_36_chunk (actual rows=4 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_20_chunk (actual rows=10794 loops=1)
                           ->  Seq Scan on compress_hyper_6_35_chunk (actual rows=12 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_21_chunk (actual rows=3598 loops=1)
                           ->  Seq Scan on compress_hyper_6_34_chunk (actual rows=4 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_22_chunk (actual rows=5038 loops=1)
                           ->  Seq Scan on compress_hyper_6_33_chunk (actual rows=6 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_23_chunk (actual rows=15114 loops=1)
                           ->  Seq Scan on compress_hyper_6_32_chunk (actual rows=18 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_24_chunk (actual rows=5038 loops=1)
                           ->  Seq Scan on compress_hyper_6_31_chunk (actual rows=6 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_25_chunk (actual rows=5038 loops=1)
                           ->  Seq Scan on compress_hyper_6_30_chunk (actual rows=6 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_26_chunk (actual rows=15114 loops=1)
                           ->  Seq Scan on compress_hyper_6_29_chunk (actual rows=18 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_27_chunk (actual rows=5038 loops=1)
                           ->  Seq Scan on compress_hyper_6_28_chunk (actual rows=6 loops=1)
(24 rows)

-- test query with ORDER BY date_trunc
:PREFIX SELECT
  time_bucket('1d',time)
FROM :TEST_TABLE
ORDER BY date_trunc('day', time) LIMIT 1;
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 Limit (actual rows=1 loops=1)
   ->  Sort (actual rows=1 loops=1)
         Sort Key: (date_trunc('day'::text, _hyper_5_19_chunk."time"))
         Sort Method: top-N heapsort 
         ->  Result (actual rows=68370 loops=1)
               ->  Append (actual rows=68370 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_19_chunk (actual rows=3598 loops=1)
                           ->  Seq Scan on compress_hyper_6_36_chunk (actual rows=4 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_20_chunk (actual rows=10794 loops=1)
                           ->  Seq Scan on compress_hyper_6_35_chunk (actual rows=12 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_21_chunk (actual rows=3598 loops=1)
                           ->  Seq Scan on compress_hyper_6_34_chunk (actual rows=4 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_22_chunk (actual rows=5038 loops=1)
                           ->  Seq Scan on compress_hyper_6_33_chunk (actual rows=6 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_23_chunk (actual rows=15114 loops=1)
                           ->  Seq Scan on compress_hyper_6_32_chunk (actual rows=18 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_24_chunk (actual rows=5038 loops=1)
                           ->  Seq Scan on compress_hyper_6_31_chunk (actual rows=6 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_25_chunk (actual rows=5038 loops=1)
                           ->  Seq Scan on compress_hyper_6_30_chunk (actual rows=6 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_26_chunk (actual rows=15114 loops=1)
                           ->  Seq Scan on compress_hyper_6_29_chunk (actual rows=18 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_27_chunk (actual rows=5038 loops=1)
                           ->  Seq Scan on compress_hyper_6_28_chunk (actual rows=6 loops=1)
(24 rows)

-- test query with ORDER BY date_trunc
:PREFIX SELECT
  date_trunc('day',time), device_id, v0
FROM :TEST_TABLE
ORDER BY 1 LIMIT 1;
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 Limit (actual rows=1 loops=1)
   ->  Sort (actual rows=1 loops=1)
         Sort Key: (date_trunc('day'::text, _hyper_5_19_chunk."time"))
         Sort Method: top-N heapsort 
         ->  Result (actual rows=68370 loops=1)
               ->  Append (actual rows=68370 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_19_chunk (actual rows=3598 loops=1)
                           ->  Seq Scan on compress_hyper_6_36_chunk (actual rows=4 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_20_chunk (actual rows=10794 loops=1)
                           ->  Seq Scan on compress_hyper_6_35_chunk (actual rows=12 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_21_chunk (actual rows=3598 loops=1)
                           ->  Seq Scan on compress_hyper_6_34_chunk (actual rows=4 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_22_chunk (actual rows=5038 loops=1)
                           ->  Seq Scan on compress_hyper_6_33_chunk (actual rows=6 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_23_chunk (actual rows=15114 loops=1)
                           ->  Seq Scan on compress_hyper_6_32_chunk (actual rows=18 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_24_chunk (actual rows=5038 loops=1)
                           ->  Seq Scan on compress_hyper_6_31_chunk (actual rows=6 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_25_chunk (actual rows=5038 loops=1)
                           ->  Seq Scan on compress_hyper_6_30_chunk (actual rows=6 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_26_chunk (actual rows=15114 loops=1)
                           ->  Seq Scan on compress_hyper_6_29_chunk (actual rows=18 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_27_chunk (actual rows=5038 loops=1)
                           ->  Seq Scan on compress_hyper_6_28_chunk (actual rows=6 loops=1)
(24 rows)

-- test query with ORDER BY date_trunc, device_id
-- must not use ordered append
:PREFIX SELECT
  date_trunc('day',time), device_id, v0
FROM :TEST_TABLE
ORDER BY 1,2 LIMIT 1;
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 Limit (actual rows=1 loops=1)
   ->  Sort (actual rows=1 loops=1)
         Sort Key: (date_trunc('day'::text, _hyper_5_19_chunk."time")), _hyper_5_19_chunk.device_id
         Sort Method: top-N heapsort 
         ->  Result (actual rows=68370 loops=1)
               ->  Append (actual rows=68370 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_19_chunk (actual rows=3598 loops=1)
                           ->  Seq Scan on compress_hyper_6_36_chunk (actual rows=4 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_20_chunk (actual rows=10794 loops=1)
                           ->  Seq Scan on compress_hyper_6_35_chunk (actual rows=12 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_21_chunk (actual rows=3598 loops=1)
                           ->  Seq Scan on compress_hyper_6_34_chunk (actual rows=4 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_22_chunk (actual rows=5038 loops=1)
                           ->  Seq Scan on compress_hyper_6_33_chunk (actual rows=6 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_23_chunk (actual rows=15114 loops=1)
                           ->  Seq Scan on compress_hyper_6_32_chunk (actual rows=18 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_24_chunk (actual rows=5038 loops=1)
                           ->  Seq Scan on compress_hyper_6_31_chunk (actual rows=6 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_25_chunk (actual rows=5038 loops=1)
                           ->  Seq Scan on compress_hyper_6_30_chunk (actual rows=6 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_26_chunk (actual rows=15114 loops=1)
                           ->  Seq Scan on compress_hyper_6_29_chunk (actual rows=18 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_27_chunk (actual rows=5038 loops=1)
                           ->  Seq Scan on compress_hyper_6_28_chunk (actual rows=6 loops=1)
(24 rows)

-- test query with now() should result in ordered ChunkAppend
:PREFIX SELECT time FROM :TEST_TABLE WHERE time < now() + '1 month'
ORDER BY time DESC limit 1;
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 Limit (actual rows=1 loops=1)
   ->  Sort (actual rows=1 loops=1)
         Sort Key: metrics_space_compressed."time" DESC
         Sort Method: top-N heapsort 
         ->  Custom Scan (ChunkAppend) on metrics_space_compressed (actual rows=68370 loops=1)
               ->  Merge Append (actual rows=25190 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_27_chunk (actual rows=5038 loops=1)
                           Filter: ("time" < (now() + '@ 1 mon'::interval))
                           ->  Seq Scan on compress_hyper_6_28_chunk (actual rows=6 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_26_chunk (actual rows=15114 loops=1)
                           Filter: ("time" < (now() + '@ 1 mon'::interval))
                           ->  Seq Scan on compress_hyper_6_29_chunk (actual rows=18 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_25_chunk (actual rows=5038 loops=1)
                           Filter: ("time" < (now() + '@ 1 mon'::interval))
                           ->  Seq Scan on compress_hyper_6_30_chunk (actual rows=6 loops=1)
               ->  Merge Append (actual rows=25190 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_24_chunk (actual rows=5038 loops=1)
                           Filter: ("time" < (now() + '@ 1 mon'::interval))
                           ->  Seq Scan on compress_hyper_6_31_chunk (actual rows=6 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_23_chunk (actual rows=15114 loops=1)
                           Filter: ("time" < (now() + '@ 1 mon'::interval))
                           ->  Seq Scan on compress_hyper_6_32_chunk (actual rows=18 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_22_chunk (actual rows=5038 loops=1)
                           Filter: ("time" < (now() + '@ 1 mon'::interval))
                           ->  Seq Scan on compress_hyper_6_33_chunk (actual rows=6 loops=1)
               ->  Merge Append (actual rows=17990 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_21_chunk (actual rows=3598 loops=1)
                           Filter: ("time" < (now() + '@ 1 mon'::interval))
                           ->  Seq Scan on compress_hyper_6_34_chunk (actual rows=4 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_20_chunk (actual rows=10794 loops=1)
                           Filter: ("time" < (now() + '@ 1 mon'::interval))
                           ->  Seq Scan on compress_hyper_6_35_chunk (actual rows=12 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_19_chunk (actual rows=3598 loops=1)
                           Filter: ("time" < (now() + '@ 1 mon'::interval))
                           ->  Seq Scan on compress_hyper_6_36_chunk (actual rows=4 loops=1)
(35 rows)

-- test CTE
:PREFIX WITH i AS (SELECT time FROM :TEST_TABLE WHERE time < now() ORDER BY time DESC limit 100)
SELECT * FROM i;
                                                   QUERY PLAN                                                   
----------------------------------------------------------------------------------------------------------------
 CTE Scan on i (actual rows=100 loops=1)
   CTE i
     ->  Limit (actual rows=100 loops=1)
           ->  Sort (actual rows=100 loops=1)
                 Sort Key: metrics_space_compressed."time" DESC
                 Sort Method: top-N heapsort 
                 ->  Custom Scan (ChunkAppend) on metrics_space_compressed (actual rows=68370 loops=1)
                       ->  Merge Append (actual rows=25190 loops=1)
                             ->  Custom Scan (DecompressChunk) on _hyper_5_27_chunk (actual rows=5038 loops=1)
                                   Filter: ("time" < now())
                                   ->  Seq Scan on compress_hyper_6_28_chunk (actual rows=6 loops=1)
                             ->  Custom Scan (DecompressChunk) on _hyper_5_26_chunk (actual rows=15114 loops=1)
                                   Filter: ("time" < now())
                                   ->  Seq Scan on compress_hyper_6_29_chunk (actual rows=18 loops=1)
                             ->  Custom Scan (DecompressChunk) on _hyper_5_25_chunk (actual rows=5038 loops=1)
                                   Filter: ("time" < now())
                                   ->  Seq Scan on compress_hyper_6_30_chunk (actual rows=6 loops=1)
                       ->  Merge Append (actual rows=25190 loops=1)
                             ->  Custom Scan (DecompressChunk) on _hyper_5_24_chunk (actual rows=5038 loops=1)
                                   Filter: ("time" < now())
                                   ->  Seq Scan on compress_hyper_6_31_chunk (actual rows=6 loops=1)
                             ->  Custom Scan (DecompressChunk) on _hyper_5_23_chunk (actual rows=15114 loops=1)
                                   Filter: ("time" < now())
                                   ->  Seq Scan on compress_hyper_6_32_chunk (actual rows=18 loops=1)
                             ->  Custom Scan (DecompressChunk) on _hyper_5_22_chunk (actual rows=5038 loops=1)
                                   Filter: ("time" < now())
                                   ->  Seq Scan on compress_hyper_6_33_chunk (actual rows=6 loops=1)
                       ->  Merge Append (actual rows=17990 loops=1)
                             ->  Custom Scan (DecompressChunk) on _hyper_5_21_chunk (actual rows=3598 loops=1)
                                   Filter: ("time" < now())
                                   ->  Seq Scan on compress_hyper_6_34_chunk (actual rows=4 loops=1)
                             ->  Custom Scan (DecompressChunk) on _hyper_5_20_chunk (actual rows=10794 loops=1)
                                   Filter: ("time" < now())
                                   ->  Seq Scan on compress_hyper_6_35_chunk (actual rows=12 loops=1)
                             ->  Custom Scan (DecompressChunk) on _hyper_5_19_chunk (actual rows=3598 loops=1)
                                   Filter: ("time" < now())
                                   ->  Seq Scan on compress_hyper_6_36_chunk (actual rows=4 loops=1)
(37 rows)

-- test LATERAL with ordered append in the outer query
:PREFIX SELECT time, pg_typeof(l) FROM :TEST_TABLE, LATERAL(SELECT * FROM (VALUES (1),(2)) v) l ORDER BY time DESC limit 2;
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 Limit (actual rows=2 loops=1)
   ->  Sort (actual rows=2 loops=1)
         Sort Key: _hyper_5_27_chunk."time" DESC
         Sort Method: top-N heapsort 
         ->  Nested Loop (actual rows=136740 loops=1)
               ->  Values Scan on "*VALUES*" (actual rows=2 loops=1)
               ->  Append (actual rows=68370 loops=2)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_27_chunk (actual rows=5038 loops=2)
                           ->  Seq Scan on compress_hyper_6_28_chunk (actual rows=6 loops=2)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_26_chunk (actual rows=15114 loops=2)
                           ->  Seq Scan on compress_hyper_6_29_chunk (actual rows=18 loops=2)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_25_chunk (actual rows=5038 loops=2)
                           ->  Seq Scan on compress_hyper_6_30_chunk (actual rows=6 loops=2)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_24_chunk (actual rows=5038 loops=2)
                           ->  Seq Scan on compress_hyper_6_31_chunk (actual rows=6 loops=2)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_23_chunk (actual rows=15114 loops=2)
                           ->  Seq Scan on compress_hyper_6_32_chunk (actual rows=18 loops=2)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_22_chunk (actual rows=5038 loops=2)
                           ->  Seq Scan on compress_hyper_6_33_chunk (actual rows=6 loops=2)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_21_chunk (actual rows=3598 loops=2)
                           ->  Seq Scan on compress_hyper_6_34_chunk (actual rows=4 loops=2)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_20_chunk (actual rows=10794 loops=2)
                           ->  Seq Scan on compress_hyper_6_35_chunk (actual rows=12 loops=2)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_19_chunk (actual rows=3598 loops=2)
                           ->  Seq Scan on compress_hyper_6_36_chunk (actual rows=4 loops=2)
(25 rows)

-- test LATERAL with ordered append in the lateral query
:PREFIX SELECT time, pg_typeof(v) FROM (VALUES (1),(2)) v, LATERAL(SELECT * FROM :TEST_TABLE ORDER BY time DESC limit 2) l;
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Nested Loop (actual rows=4 loops=1)
   ->  Values Scan on "*VALUES*" (actual rows=2 loops=1)
   ->  Materialize (actual rows=2 loops=2)
         ->  Subquery Scan on l (actual rows=2 loops=1)
               ->  Limit (actual rows=2 loops=1)
                     ->  Sort (actual rows=2 loops=1)
                           Sort Key: _hyper_5_27_chunk."time" DESC
                           Sort Method: top-N heapsort 
                           ->  Result (actual rows=68370 loops=1)
                                 ->  Append (actual rows=68370 loops=1)
                                       ->  Custom Scan (DecompressChunk) on _hyper_5_27_chunk (actual rows=5038 loops=1)
                                             ->  Seq Scan on compress_hyper_6_28_chunk (actual rows=6 loops=1)
                                       ->  Custom Scan (DecompressChunk) on _hyper_5_26_chunk (actual rows=15114 loops=1)
                                             ->  Seq Scan on compress_hyper_6_29_chunk (actual rows=18 loops=1)
                                       ->  Custom Scan (DecompressChunk) on _hyper_5_25_chunk (actual rows=5038 loops=1)
                                             ->  Seq Scan on compress_hyper_6_30_chunk (actual rows=6 loops=1)
                                       ->  Custom Scan (DecompressChunk) on _hyper_5_24_chunk (actual rows=5038 loops=1)
                                             ->  Seq Scan on compress_hyper_6_31_chunk (actual rows=6 loops=1)
                                       ->  Custom Scan (DecompressChunk) on _hyper_5_23_chunk (actual rows=15114 loops=1)
                                             ->  Seq Scan on compress_hyper_6_32_chunk (actual rows=18 loops=1)
                                       ->  Custom Scan (DecompressChunk) on _hyper_5_22_chunk (actual rows=5038 loops=1)
                                             ->  Seq Scan on compress_hyper_6_33_chunk (actual rows=6 loops=1)
                                       ->  Custom Scan (DecompressChunk) on _hyper_5_21_chunk (actual rows=3598 loops=1)
                                             ->  Seq Scan on compress_hyper_6_34_chunk (actual rows=4 loops=1)
                                       ->  Custom Scan (DecompressChunk) on _hyper_5_20_chunk (actual rows=10794 loops=1)
                                             ->  Seq Scan on compress_hyper_6_35_chunk (actual rows=12 loops=1)
                                       ->  Custom Scan (DecompressChunk) on _hyper_5_19_chunk (actual rows=3598 loops=1)
                                             ->  Seq Scan on compress_hyper_6_36_chunk (actual rows=4 loops=1)
(28 rows)

-- test plan with best index is chosen
-- this should use device_id, time index
:PREFIX SELECT time, device_id FROM :TEST_TABLE WHERE device_id = 1 ORDER BY time DESC LIMIT 1;
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Limit (actual rows=1 loops=1)
   ->  Custom Scan (ChunkAppend) on metrics_space_compressed (actual rows=1 loops=1)
         Order: metrics_space_compressed."time" DESC
         ->  Custom Scan (DecompressChunk) on _hyper_5_25_chunk (actual rows=1 loops=1)
               ->  Sort (actual rows=1 loops=1)
                     Sort Key: compress_hyper_6_30_chunk._ts_meta_sequence_num
                     Sort Method: quicksort 
                     ->  Seq Scan on compress_hyper_6_30_chunk (actual rows=6 loops=1)
                           Filter: (device_id = 1)
         ->  Custom Scan (DecompressChunk) on _hyper_5_22_chunk (never executed)
               ->  Sort (never executed)
                     Sort Key: compress_hyper_6_33_chunk._ts_meta_sequence_num
                     ->  Seq Scan on compress_hyper_6_33_chunk (never executed)
                           Filter: (device_id = 1)
         ->  Custom Scan (DecompressChunk) on _hyper_5_19_chunk (never executed)
               ->  Sort (never executed)
                     Sort Key: compress_hyper_6_36_chunk._ts_meta_sequence_num
                     ->  Seq Scan on compress_hyper_6_36_chunk (never executed)
                           Filter: (device_id = 1)
(19 rows)

-- test plan with best index is chosen
-- this should use time index
:PREFIX SELECT time FROM :TEST_TABLE ORDER BY time DESC LIMIT 1;
                                            QUERY PLAN                                            
--------------------------------------------------------------------------------------------------
 Limit (actual rows=1 loops=1)
   ->  Sort (actual rows=1 loops=1)
         Sort Key: _hyper_5_27_chunk."time" DESC
         Sort Method: top-N heapsort 
         ->  Append (actual rows=68370 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_5_27_chunk (actual rows=5038 loops=1)
                     ->  Seq Scan on compress_hyper_6_28_chunk (actual rows=6 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_5_26_chunk (actual rows=15114 loops=1)
                     ->  Seq Scan on compress_hyper_6_29_chunk (actual rows=18 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_5_25_chunk (actual rows=5038 loops=1)
                     ->  Seq Scan on compress_hyper_6_30_chunk (actual rows=6 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_5_24_chunk (actual rows=5038 loops=1)
                     ->  Seq Scan on compress_hyper_6_31_chunk (actual rows=6 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_5_23_chunk (actual rows=15114 loops=1)
                     ->  Seq Scan on compress_hyper_6_32_chunk (actual rows=18 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_5_22_chunk (actual rows=5038 loops=1)
                     ->  Seq Scan on compress_hyper_6_33_chunk (actual rows=6 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_5_21_chunk (actual rows=3598 loops=1)
                     ->  Seq Scan on compress_hyper_6_34_chunk (actual rows=4 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_5_20_chunk (actual rows=10794 loops=1)
                     ->  Seq Scan on compress_hyper_6_35_chunk (actual rows=12 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_5_19_chunk (actual rows=3598 loops=1)
                     ->  Seq Scan on compress_hyper_6_36_chunk (actual rows=4 loops=1)
(23 rows)

-- test LATERAL with correlated query
-- only last chunk should be executed
:PREFIX SELECT g.time, l.time
FROM generate_series('2000-01-01'::timestamptz,'2000-01-03','1d') AS g(time)
LEFT OUTER JOIN LATERAL(
  SELECT * FROM :TEST_TABLE o
    WHERE o.time >= g.time AND o.time < g.time + '1d'::interval ORDER BY time DESC LIMIT 1
) l ON true;
                                                              QUERY PLAN                                                              
--------------------------------------------------------------------------------------------------------------------------------------
 Nested Loop Left Join (actual rows=3 loops=1)
   ->  Function Scan on generate_series g (actual rows=3 loops=1)
   ->  Limit (actual rows=1 loops=3)
         ->  Sort (actual rows=1 loops=3)
               Sort Key: o."time" DESC
               Sort Method: top-N heapsort 
               ->  Custom Scan (ChunkAppend) on metrics_space_compressed o (actual rows=3600 loops=3)
                     ->  Merge Append (actual rows=0 loops=3)
                           ->  Custom Scan (DecompressChunk) on _hyper_5_27_chunk o_1 (actual rows=0 loops=3)
                                 Filter: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)))
                                 ->  Seq Scan on compress_hyper_6_28_chunk (actual rows=0 loops=3)
                                       Filter: ((_ts_meta_max_1 >= g."time") AND (_ts_meta_min_1 < (g."time" + '@ 1 day'::interval)))
                                       Rows Removed by Filter: 6
                           ->  Custom Scan (DecompressChunk) on _hyper_5_26_chunk o_2 (actual rows=0 loops=3)
                                 Filter: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)))
                                 ->  Seq Scan on compress_hyper_6_29_chunk (actual rows=0 loops=3)
                                       Filter: ((_ts_meta_max_1 >= g."time") AND (_ts_meta_min_1 < (g."time" + '@ 1 day'::interval)))
                                       Rows Removed by Filter: 18
                           ->  Custom Scan (DecompressChunk) on _hyper_5_25_chunk o_3 (actual rows=0 loops=3)
                                 Filter: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)))
                                 ->  Seq Scan on compress_hyper_6_30_chunk (actual rows=0 loops=3)
                                       Filter: ((_ts_meta_max_1 >= g."time") AND (_ts_meta_min_1 < (g."time" + '@ 1 day'::interval)))
                                       Rows Removed by Filter: 6
                     ->  Merge Append (actual rows=0 loops=3)
                           ->  Custom Scan (DecompressChunk) on _hyper_5_24_chunk o_4 (actual rows=0 loops=3)
                                 Filter: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)))
                                 ->  Seq Scan on compress_hyper_6_31_chunk (actual rows=0 loops=3)
                                       Filter: ((_ts_meta_max_1 >= g."time") AND (_ts_meta_min_1 < (g."time" + '@ 1 day'::interval)))
                                       Rows Removed by Filter: 6
                           ->  Custom Scan (DecompressChunk) on _hyper_5_23_chunk o_5 (actual rows=0 loops=3)
                                 Filter: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)))
                                 ->  Seq Scan on compress_hyper_6_32_chunk (actual rows=0 loops=3)
                                       Filter: ((_ts_meta_max_1 >= g."time") AND (_ts_meta_min_1 < (g."time" + '@ 1 day'::interval)))
                                       Rows Removed by Filter: 18
                           ->  Custom Scan (DecompressChunk) on _hyper_5_22_chunk o_6 (actual rows=0 loops=3)
                                 Filter: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)))
                                 ->  Seq Scan on compress_hyper_6_33_chunk (actual rows=0 loops=3)
                                       Filter: ((_ts_meta_max_1 >= g."time") AND (_ts_meta_min_1 < (g."time" + '@ 1 day'::interval)))
                                       Rows Removed by Filter: 6
                     ->  Merge Append (actual rows=3600 loops=3)
                           ->  Custom Scan (DecompressChunk) on _hyper_5_21_chunk o_7 (actual rows=720 loops=3)
                                 Filter: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)))
                                 Rows Removed by Filter: 813
                                 ->  Seq Scan on compress_hyper_6_34_chunk (actual rows=2 loops=3)
                                       Filter: ((_ts_meta_max_1 >= g."time") AND (_ts_meta_min_1 < (g."time" + '@ 1 day'::interval)))
                                       Rows Removed by Filter: 2
                           ->  Custom Scan (DecompressChunk) on _hyper_5_20_chunk o_8 (actual rows=2160 loops=3)
                                 Filter: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)))
                                 Rows Removed by Filter: 2438
                                 ->  Seq Scan on compress_hyper_6_35_chunk (actual rows=5 loops=3)
                                       Filter: ((_ts_meta_max_1 >= g."time") AND (_ts_meta_min_1 < (g."time" + '@ 1 day'::interval)))
                                       Rows Removed by Filter: 7
                           ->  Custom Scan (DecompressChunk) on _hyper_5_19_chunk o_9 (actual rows=720 loops=3)
                                 Filter: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)))
                                 Rows Removed by Filter: 813
                                 ->  Seq Scan on compress_hyper_6_36_chunk (actual rows=2 loops=3)
                                       Filter: ((_ts_meta_max_1 >= g."time") AND (_ts_meta_min_1 < (g."time" + '@ 1 day'::interval)))
                                       Rows Removed by Filter: 2
(58 rows)

-- test LATERAL with correlated query
-- only 2nd chunk should be executed
:PREFIX SELECT g.time, l.time
FROM generate_series('2000-01-10'::timestamptz,'2000-01-11','1d') AS g(time)
LEFT OUTER JOIN LATERAL(
  SELECT * FROM :TEST_TABLE o
    WHERE o.time >= g.time AND o.time < g.time + '1d'::interval ORDER BY time LIMIT 1
) l ON true;
                                                              QUERY PLAN                                                              
--------------------------------------------------------------------------------------------------------------------------------------
 Nested Loop Left Join (actual rows=2 loops=1)
   ->  Function Scan on generate_series g (actual rows=2 loops=1)
   ->  Limit (actual rows=1 loops=2)
         ->  Sort (actual rows=1 loops=2)
               Sort Key: o."time"
               Sort Method: top-N heapsort 
               ->  Custom Scan (ChunkAppend) on metrics_space_compressed o (actual rows=3600 loops=2)
                     ->  Merge Append (actual rows=0 loops=2)
                           ->  Custom Scan (DecompressChunk) on _hyper_5_19_chunk o_1 (actual rows=0 loops=2)
                                 Filter: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)))
                                 ->  Seq Scan on compress_hyper_6_36_chunk (actual rows=0 loops=2)
                                       Filter: ((_ts_meta_max_1 >= g."time") AND (_ts_meta_min_1 < (g."time" + '@ 1 day'::interval)))
                                       Rows Removed by Filter: 4
                           ->  Custom Scan (DecompressChunk) on _hyper_5_20_chunk o_2 (actual rows=0 loops=2)
                                 Filter: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)))
                                 ->  Seq Scan on compress_hyper_6_35_chunk (actual rows=0 loops=2)
                                       Filter: ((_ts_meta_max_1 >= g."time") AND (_ts_meta_min_1 < (g."time" + '@ 1 day'::interval)))
                                       Rows Removed by Filter: 12
                           ->  Custom Scan (DecompressChunk) on _hyper_5_21_chunk o_3 (actual rows=0 loops=2)
                                 Filter: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)))
                                 ->  Seq Scan on compress_hyper_6_34_chunk (actual rows=0 loops=2)
                                       Filter: ((_ts_meta_max_1 >= g."time") AND (_ts_meta_min_1 < (g."time" + '@ 1 day'::interval)))
                                       Rows Removed by Filter: 4
                     ->  Merge Append (actual rows=3600 loops=2)
                           ->  Custom Scan (DecompressChunk) on _hyper_5_22_chunk o_4 (actual rows=720 loops=2)
                                 Filter: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)))
                                 Rows Removed by Filter: 780
                                 ->  Seq Scan on compress_hyper_6_33_chunk (actual rows=2 loops=2)
                                       Filter: ((_ts_meta_max_1 >= g."time") AND (_ts_meta_min_1 < (g."time" + '@ 1 day'::interval)))
                                       Rows Removed by Filter: 4
                           ->  Custom Scan (DecompressChunk) on _hyper_5_23_chunk o_5 (actual rows=2160 loops=2)
                                 Filter: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)))
                                 Rows Removed by Filter: 2340
                                 ->  Seq Scan on compress_hyper_6_32_chunk (actual rows=4 loops=2)
                                       Filter: ((_ts_meta_max_1 >= g."time") AND (_ts_meta_min_1 < (g."time" + '@ 1 day'::interval)))
                                       Rows Removed by Filter: 14
                           ->  Custom Scan (DecompressChunk) on _hyper_5_24_chunk o_6 (actual rows=720 loops=2)
                                 Filter: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)))
                                 Rows Removed by Filter: 780
                                 ->  Seq Scan on compress_hyper_6_31_chunk (actual rows=2 loops=2)
                                       Filter: ((_ts_meta_max_1 >= g."time") AND (_ts_meta_min_1 < (g."time" + '@ 1 day'::interval)))
                                       Rows Removed by Filter: 4
                     ->  Merge Append (actual rows=0 loops=2)
                           ->  Custom Scan (DecompressChunk) on _hyper_5_25_chunk o_7 (actual rows=0 loops=2)
                                 Filter: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)))
                                 ->  Seq Scan on compress_hyper_6_30_chunk (actual rows=0 loops=2)
                                       Filter: ((_ts_meta_max_1 >= g."time") AND (_ts_meta_min_1 < (g."time" + '@ 1 day'::interval)))
                                       Rows Removed by Filter: 6
                           ->  Custom Scan (DecompressChunk) on _hyper_5_26_chunk o_8 (actual rows=0 loops=2)
                                 Filter: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)))
                                 ->  Seq Scan on compress_hyper_6_29_chunk (actual rows=0 loops=2)
                                       Filter: ((_ts_meta_max_1 >= g."time") AND (_ts_meta_min_1 < (g."time" + '@ 1 day'::interval)))
                                       Rows Removed by Filter: 18
                           ->  Custom Scan (DecompressChunk) on _hyper_5_27_chunk o_9 (actual rows=0 loops=2)
                                 Filter: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)))
                                 ->  Seq Scan on compress_hyper_6_28_chunk (actual rows=0 loops=2)
                                       Filter: ((_ts_meta_max_1 >= g."time") AND (_ts_meta_min_1 < (g."time" + '@ 1 day'::interval)))
                                       Rows Removed by Filter: 6
(58 rows)

-- test startup and runtime exclusion together
:PREFIX SELECT g.time, l.time
FROM generate_series('2000-01-01'::timestamptz,'2000-01-03','1d') AS g(time)
LEFT OUTER JOIN LATERAL(
  SELECT * FROM :TEST_TABLE o
    WHERE o.time >= g.time AND o.time < g.time + '1d'::interval AND o.time < now() ORDER BY time DESC LIMIT 1
) l ON true;
                                                              QUERY PLAN                                                              
--------------------------------------------------------------------------------------------------------------------------------------
 Nested Loop Left Join (actual rows=3 loops=1)
   ->  Function Scan on generate_series g (actual rows=3 loops=1)
   ->  Limit (actual rows=1 loops=3)
         ->  Sort (actual rows=1 loops=3)
               Sort Key: o."time" DESC
               Sort Method: top-N heapsort 
               ->  Custom Scan (ChunkAppend) on metrics_space_compressed o (actual rows=3600 loops=3)
                     ->  Merge Append (actual rows=0 loops=3)
                           ->  Custom Scan (DecompressChunk) on _hyper_5_27_chunk o_1 (actual rows=0 loops=3)
                                 Filter: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)) AND ("time" < now()))
                                 ->  Seq Scan on compress_hyper_6_28_chunk (actual rows=0 loops=3)
                                       Filter: ((_ts_meta_max_1 >= g."time") AND (_ts_meta_min_1 < (g."time" + '@ 1 day'::interval)))
                                       Rows Removed by Filter: 6
                           ->  Custom Scan (DecompressChunk) on _hyper_5_26_chunk o_2 (actual rows=0 loops=3)
                                 Filter: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)) AND ("time" < now()))
                                 ->  Seq Scan on compress_hyper_6_29_chunk (actual rows=0 loops=3)
                                       Filter: ((_ts_meta_max_1 >= g."time") AND (_ts_meta_min_1 < (g."time" + '@ 1 day'::interval)))
                                       Rows Removed by Filter: 18
                           ->  Custom Scan (DecompressChunk) on _hyper_5_25_chunk o_3 (actual rows=0 loops=3)
                                 Filter: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)) AND ("time" < now()))
                                 ->  Seq Scan on compress_hyper_6_30_chunk (actual rows=0 loops=3)
                                       Filter: ((_ts_meta_max_1 >= g."time") AND (_ts_meta_min_1 < (g."time" + '@ 1 day'::interval)))
                                       Rows Removed by Filter: 6
                     ->  Merge Append (actual rows=0 loops=3)
                           ->  Custom Scan (DecompressChunk) on _hyper_5_24_chunk o_4 (actual rows=0 loops=3)
                                 Filter: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)) AND ("time" < now()))
                                 ->  Seq Scan on compress_hyper_6_31_chunk (actual rows=0 loops=3)
                                       Filter: ((_ts_meta_max_1 >= g."time") AND (_ts_meta_min_1 < (g."time" + '@ 1 day'::interval)))
                                       Rows Removed by Filter: 6
                           ->  Custom Scan (DecompressChunk) on _hyper_5_23_chunk o_5 (actual rows=0 loops=3)
                                 Filter: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)) AND ("time" < now()))
                                 ->  Seq Scan on compress_hyper_6_32_chunk (actual rows=0 loops=3)
                                       Filter: ((_ts_meta_max_1 >= g."time") AND (_ts_meta_min_1 < (g."time" + '@ 1 day'::interval)))
                                       Rows Removed by Filter: 18
                           ->  Custom Scan (DecompressChunk) on _hyper_5_22_chunk o_6 (actual rows=0 loops=3)
                                 Filter: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)) AND ("time" < now()))
                                 ->  Seq Scan on compress_hyper_6_33_chunk (actual rows=0 loops=3)
                                       Filter: ((_ts_meta_max_1 >= g."time") AND (_ts_meta_min_1 < (g."time" + '@ 1 day'::interval)))
                                       Rows Removed by Filter: 6
                     ->  Merge Append (actual rows=3600 loops=3)
                           ->  Custom Scan (DecompressChunk) on _hyper_5_21_chunk o_7 (actual rows=720 loops=3)
                                 Filter: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)) AND ("time" < now()))
                                 Rows Removed by Filter: 813
                                 ->  Seq Scan on compress_hyper_6_34_chunk (actual rows=2 loops=3)
                                       Filter: ((_ts_meta_max_1 >= g."time") AND (_ts_meta_min_1 < (g."time" + '@ 1 day'::interval)))
                                       Rows Removed by Filter: 2
                           ->  Custom Scan (DecompressChunk) on _hyper_5_20_chunk o_8 (actual rows=2160 loops=3)
                                 Filter: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)) AND ("time" < now()))
                                 Rows Removed by Filter: 2438
                                 ->  Seq Scan on compress_hyper_6_35_chunk (actual rows=5 loops=3)
                                       Filter: ((_ts_meta_max_1 >= g."time") AND (_ts_meta_min_1 < (g."time" + '@ 1 day'::interval)))
                                       Rows Removed by Filter: 7
                           ->  Custom Scan (DecompressChunk) on _hyper_5_19_chunk o_9 (actual rows=720 loops=3)
                                 Filter: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)) AND ("time" < now()))
                                 Rows Removed by Filter: 813
                                 ->  Seq Scan on compress_hyper_6_36_chunk (actual rows=2 loops=3)
                                       Filter: ((_ts_meta_max_1 >= g."time") AND (_ts_meta_min_1 < (g."time" + '@ 1 day'::interval)))
                                       Rows Removed by Filter: 2
(58 rows)

-- test startup and runtime exclusion together
-- all chunks should be filtered
:PREFIX SELECT g.time, l.time
FROM generate_series('2000-01-01'::timestamptz,'2000-01-03','1d') AS g(time)
LEFT OUTER JOIN LATERAL(
  SELECT * FROM :TEST_TABLE o
    WHERE o.time >= g.time AND o.time < g.time + '1d'::interval AND o.time > now() ORDER BY time DESC LIMIT 1
) l ON true;
                                                              QUERY PLAN                                                              
--------------------------------------------------------------------------------------------------------------------------------------
 Nested Loop Left Join (actual rows=3 loops=1)
   ->  Function Scan on generate_series g (actual rows=3 loops=1)
   ->  Limit (actual rows=0 loops=3)
         ->  Sort (actual rows=0 loops=3)
               Sort Key: o."time" DESC
               Sort Method: quicksort 
               ->  Custom Scan (ChunkAppend) on metrics_space_compressed o (actual rows=0 loops=3)
                     ->  Merge Append (actual rows=0 loops=3)
                           ->  Custom Scan (DecompressChunk) on _hyper_5_27_chunk o_1 (actual rows=0 loops=3)
                                 Filter: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)) AND ("time" > now()))
                                 ->  Seq Scan on compress_hyper_6_28_chunk (actual rows=0 loops=3)
                                       Filter: ((_ts_meta_max_1 >= g."time") AND (_ts_meta_min_1 < (g."time" + '@ 1 day'::interval)))
                                       Rows Removed by Filter: 6
                           ->  Custom Scan (DecompressChunk) on _hyper_5_26_chunk o_2 (actual rows=0 loops=3)
                                 Filter: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)) AND ("time" > now()))
                                 ->  Seq Scan on compress_hyper_6_29_chunk (actual rows=0 loops=3)
                                       Filter: ((_ts_meta_max_1 >= g."time") AND (_ts_meta_min_1 < (g."time" + '@ 1 day'::interval)))
                                       Rows Removed by Filter: 18
                           ->  Custom Scan (DecompressChunk) on _hyper_5_25_chunk o_3 (actual rows=0 loops=3)
                                 Filter: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)) AND ("time" > now()))
                                 ->  Seq Scan on compress_hyper_6_30_chunk (actual rows=0 loops=3)
                                       Filter: ((_ts_meta_max_1 >= g."time") AND (_ts_meta_min_1 < (g."time" + '@ 1 day'::interval)))
                                       Rows Removed by Filter: 6
                     ->  Merge Append (actual rows=0 loops=3)
                           ->  Custom Scan (DecompressChunk) on _hyper_5_24_chunk o_4 (actual rows=0 loops=3)
                                 Filter: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)) AND ("time" > now()))
                                 ->  Seq Scan on compress_hyper_6_31_chunk (actual rows=0 loops=3)
                                       Filter: ((_ts_meta_max_1 >= g."time") AND (_ts_meta_min_1 < (g."time" + '@ 1 day'::interval)))
                                       Rows Removed by Filter: 6
                           ->  Custom Scan (DecompressChunk) on _hyper_5_23_chunk o_5 (actual rows=0 loops=3)
                                 Filter: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)) AND ("time" > now()))
                                 ->  Seq Scan on compress_hyper_6_32_chunk (actual rows=0 loops=3)
                                       Filter: ((_ts_meta_max_1 >= g."time") AND (_ts_meta_min_1 < (g."time" + '@ 1 day'::interval)))
                                       Rows Removed by Filter: 18
                           ->  Custom Scan (DecompressChunk) on _hyper_5_22_chunk o_6 (actual rows=0 loops=3)
                                 Filter: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)) AND ("time" > now()))
                                 ->  Seq Scan on compress_hyper_6_33_chunk (actual rows=0 loops=3)
                                       Filter: ((_ts_meta_max_1 >= g."time") AND (_ts_meta_min_1 < (g."time" + '@ 1 day'::interval)))
                                       Rows Removed by Filter: 6
                     ->  Merge Append (actual rows=0 loops=3)
                           ->  Custom Scan (DecompressChunk) on _hyper_5_21_chunk o_7 (actual rows=0 loops=3)
                                 Filter: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)) AND ("time" > now()))
                                 Rows Removed by Filter: 1533
                                 ->  Seq Scan on compress_hyper_6_34_chunk (actual rows=2 loops=3)
                                       Filter: ((_ts_meta_max_1 >= g."time") AND (_ts_meta_min_1 < (g."time" + '@ 1 day'::interval)))
                                       Rows Removed by Filter: 2
                           ->  Custom Scan (DecompressChunk) on _hyper_5_20_chunk o_8 (actual rows=0 loops=3)
                                 Filter: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)) AND ("time" > now()))
                                 Rows Removed by Filter: 4598
                                 ->  Seq Scan on compress_hyper_6_35_chunk (actual rows=5 loops=3)
                                       Filter: ((_ts_meta_max_1 >= g."time") AND (_ts_meta_min_1 < (g."time" + '@ 1 day'::interval)))
                                       Rows Removed by Filter: 7
                           ->  Custom Scan (DecompressChunk) on _hyper_5_19_chunk o_9 (actual rows=0 loops=3)
                                 Filter: (("time" >= g."time") AND ("time" < (g."time" + '@ 1 day'::interval)) AND ("time" > now()))
                                 Rows Removed by Filter: 1533
                                 ->  Seq Scan on compress_hyper_6_36_chunk (actual rows=2 loops=3)
                                       Filter: ((_ts_meta_max_1 >= g."time") AND (_ts_meta_min_1 < (g."time" + '@ 1 day'::interval)))
                                       Rows Removed by Filter: 2
(58 rows)

-- test CTE
-- no chunk exclusion for CTE because cte query is not pulled up
:PREFIX WITH cte AS (SELECT time FROM :TEST_TABLE ORDER BY time)
SELECT * FROM cte WHERE time < '2000-02-01'::timestamptz;
                                             QUERY PLAN                                             
----------------------------------------------------------------------------------------------------
 CTE Scan on cte (actual rows=68370 loops=1)
   Filter: ("time" < 'Tue Feb 01 00:00:00 2000 PST'::timestamp with time zone)
   CTE cte
     ->  Sort (actual rows=68370 loops=1)
           Sort Key: _hyper_5_19_chunk."time"
           Sort Method: quicksort 
           ->  Append (actual rows=68370 loops=1)
                 ->  Custom Scan (DecompressChunk) on _hyper_5_19_chunk (actual rows=3598 loops=1)
                       ->  Seq Scan on compress_hyper_6_36_chunk (actual rows=4 loops=1)
                 ->  Custom Scan (DecompressChunk) on _hyper_5_20_chunk (actual rows=10794 loops=1)
                       ->  Seq Scan on compress_hyper_6_35_chunk (actual rows=12 loops=1)
                 ->  Custom Scan (DecompressChunk) on _hyper_5_21_chunk (actual rows=3598 loops=1)
                       ->  Seq Scan on compress_hyper_6_34_chunk (actual rows=4 loops=1)
                 ->  Custom Scan (DecompressChunk) on _hyper_5_22_chunk (actual rows=5038 loops=1)
                       ->  Seq Scan on compress_hyper_6_33_chunk (actual rows=6 loops=1)
                 ->  Custom Scan (DecompressChunk) on _hyper_5_23_chunk (actual rows=15114 loops=1)
                       ->  Seq Scan on compress_hyper_6_32_chunk (actual rows=18 loops=1)
                 ->  Custom Scan (DecompressChunk) on _hyper_5_24_chunk (actual rows=5038 loops=1)
                       ->  Seq Scan on compress_hyper_6_31_chunk (actual rows=6 loops=1)
                 ->  Custom Scan (DecompressChunk) on _hyper_5_25_chunk (actual rows=5038 loops=1)
                       ->  Seq Scan on compress_hyper_6_30_chunk (actual rows=6 loops=1)
                 ->  Custom Scan (DecompressChunk) on _hyper_5_26_chunk (actual rows=15114 loops=1)
                       ->  Seq Scan on compress_hyper_6_29_chunk (actual rows=18 loops=1)
                 ->  Custom Scan (DecompressChunk) on _hyper_5_27_chunk (actual rows=5038 loops=1)
                       ->  Seq Scan on compress_hyper_6_28_chunk (actual rows=6 loops=1)
(25 rows)

-- test JOIN
-- no exclusion on joined table because quals are not propagated yet
:PREFIX SELECT o1.time, o2.time
FROM :TEST_TABLE o1
INNER JOIN :TEST_TABLE o2 ON o1.time = o2.time
WHERE o1.time < '2000-02-01'
ORDER BY o1.time;
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Merge Join (actual rows=341850 loops=1)
   Merge Cond: (o1."time" = o2."time")
   ->  Sort (actual rows=68370 loops=1)
         Sort Key: o1."time"
         Sort Method: quicksort 
         ->  Append (actual rows=68370 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_5_19_chunk o1 (actual rows=3598 loops=1)
                     Filter: ("time" < 'Tue Feb 01 00:00:00 2000 PST'::timestamp with time zone)
                     ->  Seq Scan on compress_hyper_6_36_chunk (actual rows=4 loops=1)
                           Filter: (_ts_meta_min_1 < 'Tue Feb 01 00:00:00 2000 PST'::timestamp with time zone)
               ->  Custom Scan (DecompressChunk) on _hyper_5_20_chunk o1_1 (actual rows=10794 loops=1)
                     Filter: ("time" < 'Tue Feb 01 00:00:00 2000 PST'::timestamp with time zone)
                     ->  Seq Scan on compress_hyper_6_35_chunk (actual rows=12 loops=1)
                           Filter: (_ts_meta_min_1 < 'Tue Feb 01 00:00:00 2000 PST'::timestamp with time zone)
               ->  Custom Scan (DecompressChunk) on _hyper_5_21_chunk o1_2 (actual rows=3598 loops=1)
                     Filter: ("time" < 'Tue Feb 01 00:00:00 2000 PST'::timestamp with time zone)
                     ->  Seq Scan on compress_hyper_6_34_chunk (actual rows=4 loops=1)
                           Filter: (_ts_meta_min_1 < 'Tue Feb 01 00:00:00 2000 PST'::timestamp with time zone)
               ->  Custom Scan (DecompressChunk) on _hyper_5_22_chunk o1_3 (actual rows=5038 loops=1)
                     Filter: ("time" < 'Tue Feb 01 00:00:00 2000 PST'::timestamp with time zone)
                     ->  Seq Scan on compress_hyper_6_33_chunk (actual rows=6 loops=1)
                           Filter: (_ts_meta_min_1 < 'Tue Feb 01 00:00:00 2000 PST'::timestamp with time zone)
               ->  Custom Scan (DecompressChunk) on _hyper_5_23_chunk o1_4 (actual rows=15114 loops=1)
                     Filter: ("time" < 'Tue Feb 01 00:00:00 2000 PST'::timestamp with time zone)
                     ->  Seq Scan on compress_hyper_6_32_chunk (actual rows=18 loops=1)
                           Filter: (_ts_meta_min_1 < 'Tue Feb 01 00:00:00 2000 PST'::timestamp with time zone)
               ->  Custom Scan (DecompressChunk) on _hyper_5_24_chunk o1_5 (actual rows=5038 loops=1)
                     Filter: ("time" < 'Tue Feb 01 00:00:00 2000 PST'::timestamp with time zone)
                     ->  Seq Scan on compress_hyper_6_31_chunk (actual rows=6 loops=1)
                           Filter: (_ts_meta_min_1 < 'Tue Feb 01 00:00:00 2000 PST'::timestamp with time zone)
               ->  Custom Scan (DecompressChunk) on _hyper_5_25_chunk o1_6 (actual rows=5038 loops=1)
                     Filter: ("time" < 'Tue Feb 01 00:00:00 2000 PST'::timestamp with time zone)
                     ->  Seq Scan on compress_hyper_6_30_chunk (actual rows=6 loops=1)
                           Filter: (_ts_meta_min_1 < 'Tue Feb 01 00:00:00 2000 PST'::timestamp with time zone)
               ->  Custom Scan (DecompressChunk) on _hyper_5_26_chunk o1_7 (actual rows=15114 loops=1)
                     Filter: ("time" < 'Tue Feb 01 00:00:00 2000 PST'::timestamp with time zone)
                     ->  Seq Scan on compress_hyper_6_29_chunk (actual rows=18 loops=1)
                           Filter: (_ts_meta_min_1 < 'Tue Feb 01 00:00:00 2000 PST'::timestamp with time zone)
               ->  Custom Scan (DecompressChunk) on _hyper_5_27_chunk o1_8 (actual rows=5038 loops=1)
                     Filter: ("time" < 'Tue Feb 01 00:00:00 2000 PST'::timestamp with time zone)
                     ->  Seq Scan on compress_hyper_6_28_chunk (actual rows=6 loops=1)
                           Filter: (_ts_meta_min_1 < 'Tue Feb 01 00:00:00 2000 PST'::timestamp with time zone)
   ->  Sort (actual rows=341846 loops=1)
         Sort Key: o2."time"
         Sort Method: quicksort 
         ->  Append (actual rows=68370 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_5_19_chunk o2 (actual rows=3598 loops=1)
                     Filter: ("time" < 'Tue Feb 01 00:00:00 2000 PST'::timestamp with time zone)
                     ->  Seq Scan on compress_hyper_6_36_chunk compress_hyper_6_36_chunk_1 (actual rows=4 loops=1)
                           Filter: (_ts_meta_min_1 < 'Tue Feb 01 00:00:00 2000 PST'::timestamp with time zone)
               ->  Custom Scan (DecompressChunk) on _hyper_5_20_chunk o2_1 (actual rows=10794 loops=1)
                     Filter: ("time" < 'Tue Feb 01 00:00:00 2000 PST'::timestamp with time zone)
                     ->  Seq Scan on compress_hyper_6_35_chunk compress_hyper_6_35_chunk_1 (actual rows=12 loops=1)
                           Filter: (_ts_meta_min_1 < 'Tue Feb 01 00:00:00 2000 PST'::timestamp with time zone)
               ->  Custom Scan (DecompressChunk) on _hyper_5_21_chunk o2_2 (actual rows=3598 loops=1)
                     Filter: ("time" < 'Tue Feb 01 00:00:00 2000 PST'::timestamp with time zone)
                     ->  Seq Scan on compress_hyper_6_34_chunk compress_hyper_6_34_chunk_1 (actual rows=4 loops=1)
                           Filter: (_ts_meta_min_1 < 'Tue Feb 01 00:00:00 2000 PST'::timestamp with time zone)
               ->  Custom Scan (DecompressChunk) on _hyper_5_22_chunk o2_3 (actual rows=5038 loops=1)
                     Filter: ("time" < 'Tue Feb 01 00:00:00 2000 PST'::timestamp with time zone)
                     ->  Seq Scan on compress_hyper_6_33_chunk compress_hyper_6_33_chunk_1 (actual rows=6 loops=1)
                           Filter: (_ts_meta_min_1 < 'Tue Feb 01 00:00:00 2000 PST'::timestamp with time zone)
               ->  Custom Scan (DecompressChunk) on _hyper_5_23_chunk o2_4 (actual rows=15114 loops=1)
                     Filter: ("time" < 'Tue Feb 01 00:00:00 2000 PST'::timestamp with time zone)
                     ->  Seq Scan on compress_hyper_6_32_chunk compress_hyper_6_32_chunk_1 (actual rows=18 loops=1)
                           Filter: (_ts_meta_min_1 < 'Tue Feb 01 00:00:00 2000 PST'::timestamp with time zone)
               ->  Custom Scan (DecompressChunk) on _hyper_5_24_chunk o2_5 (actual rows=5038 loops=1)
                     Filter: ("time" < 'Tue Feb 01 00:00:00 2000 PST'::timestamp with time zone)
                     ->  Seq Scan on compress_hyper_6_31_chunk compress_hyper_6_31_chunk_1 (actual rows=6 loops=1)
                           Filter: (_ts_meta_min_1 < 'Tue Feb 01 00:00:00 2000 PST'::timestamp with time zone)
               ->  Custom Scan (DecompressChunk) on _hyper_5_25_chunk o2_6 (actual rows=5038 loops=1)
                     Filter: ("time" < 'Tue Feb 01 00:00:00 2000 PST'::timestamp with time zone)
                     ->  Seq Scan on compress_hyper_6_30_chunk compress_hyper_6_30_chunk_1 (actual rows=6 loops=1)
                           Filter: (_ts_meta_min_1 < 'Tue Feb 01 00:00:00 2000 PST'::timestamp with time zone)
               ->  Custom Scan (DecompressChunk) on _hyper_5_26_chunk o2_7 (actual rows=15114 loops=1)
                     Filter: ("time" < 'Tue Feb 01 00:00:00 2000 PST'::timestamp with time zone)
                     ->  Seq Scan on compress_hyper_6_29_chunk compress_hyper_6_29_chunk_1 (actual rows=18 loops=1)
                           Filter: (_ts_meta_min_1 < 'Tue Feb 01 00:00:00 2000 PST'::timestamp with time zone)
               ->  Custom Scan (DecompressChunk) on _hyper_5_27_chunk o2_8 (actual rows=5038 loops=1)
                     Filter: ("time" < 'Tue Feb 01 00:00:00 2000 PST'::timestamp with time zone)
                     ->  Seq Scan on compress_hyper_6_28_chunk compress_hyper_6_28_chunk_1 (actual rows=6 loops=1)
                           Filter: (_ts_meta_min_1 < 'Tue Feb 01 00:00:00 2000 PST'::timestamp with time zone)
(82 rows)

-- test JOIN
-- last chunk of o2 should not be executed
:PREFIX SELECT o1.time, o2.time
FROM :TEST_TABLE o1
INNER JOIN (SELECT * FROM :TEST_TABLE o2 ORDER BY time) o2 ON o1.time = o2.time
WHERE o1.time < '2000-01-08'
ORDER BY o1.time LIMIT 10;
                                                              QUERY PLAN                                                              
--------------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=10 loops=1)
   ->  Merge Join (actual rows=10 loops=1)
         Merge Cond: (o1."time" = o2."time")
         ->  Sort (actual rows=2 loops=1)
               Sort Key: o1."time"
               Sort Method: quicksort 
               ->  Append (actual rows=26390 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_19_chunk o1 (actual rows=3598 loops=1)
                           Filter: ("time" < 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
                           ->  Seq Scan on compress_hyper_6_36_chunk (actual rows=4 loops=1)
                                 Filter: (_ts_meta_min_1 < 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_20_chunk o1_1 (actual rows=10794 loops=1)
                           Filter: ("time" < 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
                           ->  Seq Scan on compress_hyper_6_35_chunk (actual rows=12 loops=1)
                                 Filter: (_ts_meta_min_1 < 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_21_chunk o1_2 (actual rows=3598 loops=1)
                           Filter: ("time" < 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
                           ->  Seq Scan on compress_hyper_6_34_chunk (actual rows=4 loops=1)
                                 Filter: (_ts_meta_min_1 < 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_22_chunk o1_3 (actual rows=1680 loops=1)
                           Filter: ("time" < 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
                           Rows Removed by Filter: 358
                           ->  Seq Scan on compress_hyper_6_33_chunk (actual rows=3 loops=1)
                                 Filter: (_ts_meta_min_1 < 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
                                 Rows Removed by Filter: 3
                     ->  Custom Scan (DecompressChunk) on _hyper_5_23_chunk o1_4 (actual rows=5040 loops=1)
                           Filter: ("time" < 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
                           Rows Removed by Filter: 1074
                           ->  Seq Scan on compress_hyper_6_32_chunk (actual rows=9 loops=1)
                                 Filter: (_ts_meta_min_1 < 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
                                 Rows Removed by Filter: 9
                     ->  Custom Scan (DecompressChunk) on _hyper_5_24_chunk o1_5 (actual rows=1680 loops=1)
                           Filter: ("time" < 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
                           Rows Removed by Filter: 358
                           ->  Seq Scan on compress_hyper_6_31_chunk (actual rows=3 loops=1)
                                 Filter: (_ts_meta_min_1 < 'Sat Jan 08 00:00:00 2000 PST'::timestamp with time zone)
                                 Rows Removed by Filter: 3
         ->  Materialize (actual rows=10 loops=1)
               ->  Sort (actual rows=6 loops=1)
                     Sort Key: o2."time"
                     Sort Method: quicksort 
                     ->  Result (actual rows=68370 loops=1)
                           ->  Append (actual rows=68370 loops=1)
                                 ->  Custom Scan (DecompressChunk) on _hyper_5_19_chunk o2 (actual rows=3598 loops=1)
                                       ->  Seq Scan on compress_hyper_6_36_chunk compress_hyper_6_36_chunk_1 (actual rows=4 loops=1)
                                 ->  Custom Scan (DecompressChunk) on _hyper_5_20_chunk o2_1 (actual rows=10794 loops=1)
                                       ->  Seq Scan on compress_hyper_6_35_chunk compress_hyper_6_35_chunk_1 (actual rows=12 loops=1)
                                 ->  Custom Scan (DecompressChunk) on _hyper_5_21_chunk o2_2 (actual rows=3598 loops=1)
                                       ->  Seq Scan on compress_hyper_6_34_chunk compress_hyper_6_34_chunk_1 (actual rows=4 loops=1)
                                 ->  Custom Scan (DecompressChunk) on _hyper_5_22_chunk o2_3 (actual rows=5038 loops=1)
                                       ->  Seq Scan on compress_hyper_6_33_chunk compress_hyper_6_33_chunk_1 (actual rows=6 loops=1)
                                 ->  Custom Scan (DecompressChunk) on _hyper_5_23_chunk o2_4 (actual rows=15114 loops=1)
                                       ->  Seq Scan on compress_hyper_6_32_chunk compress_hyper_6_32_chunk_1 (actual rows=18 loops=1)
                                 ->  Custom Scan (DecompressChunk) on _hyper_5_24_chunk o2_5 (actual rows=5038 loops=1)
                                       ->  Seq Scan on compress_hyper_6_31_chunk compress_hyper_6_31_chunk_1 (actual rows=6 loops=1)
                                 ->  Custom Scan (DecompressChunk) on _hyper_5_25_chunk o2_6 (actual rows=5038 loops=1)
                                       ->  Seq Scan on compress_hyper_6_30_chunk (actual rows=6 loops=1)
                                 ->  Custom Scan (DecompressChunk) on _hyper_5_26_chunk o2_7 (actual rows=15114 loops=1)
                                       ->  Seq Scan on compress_hyper_6_29_chunk (actual rows=18 loops=1)
                                 ->  Custom Scan (DecompressChunk) on _hyper_5_27_chunk o2_8 (actual rows=5038 loops=1)
                                       ->  Seq Scan on compress_hyper_6_28_chunk (actual rows=6 loops=1)
(61 rows)

-- test subquery
-- not ChunkAppend so no chunk exclusion
:PREFIX SELECT time
FROM :TEST_TABLE WHERE time = (SELECT max(time) FROM :TEST_TABLE) ORDER BY time;
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Custom Scan (ChunkAppend) on metrics_space_compressed (actual rows=5 loops=1)
   InitPlan 1 (returns $0)
     ->  Aggregate (actual rows=1 loops=1)
           ->  Append (actual rows=68370 loops=1)
                 ->  Custom Scan (DecompressChunk) on _hyper_5_19_chunk _hyper_5_19_chunk_1 (actual rows=3598 loops=1)
                       ->  Seq Scan on compress_hyper_6_36_chunk compress_hyper_6_36_chunk_1 (actual rows=4 loops=1)
                 ->  Custom Scan (DecompressChunk) on _hyper_5_20_chunk _hyper_5_20_chunk_1 (actual rows=10794 loops=1)
                       ->  Seq Scan on compress_hyper_6_35_chunk compress_hyper_6_35_chunk_1 (actual rows=12 loops=1)
                 ->  Custom Scan (DecompressChunk) on _hyper_5_21_chunk _hyper_5_21_chunk_1 (actual rows=3598 loops=1)
                       ->  Seq Scan on compress_hyper_6_34_chunk compress_hyper_6_34_chunk_1 (actual rows=4 loops=1)
                 ->  Custom Scan (DecompressChunk) on _hyper_5_22_chunk _hyper_5_22_chunk_1 (actual rows=5038 loops=1)
                       ->  Seq Scan on compress_hyper_6_33_chunk compress_hyper_6_33_chunk_1 (actual rows=6 loops=1)
                 ->  Custom Scan (DecompressChunk) on _hyper_5_23_chunk _hyper_5_23_chunk_1 (actual rows=15114 loops=1)
                       ->  Seq Scan on compress_hyper_6_32_chunk compress_hyper_6_32_chunk_1 (actual rows=18 loops=1)
                 ->  Custom Scan (DecompressChunk) on _hyper_5_24_chunk _hyper_5_24_chunk_1 (actual rows=5038 loops=1)
                       ->  Seq Scan on compress_hyper_6_31_chunk compress_hyper_6_31_chunk_1 (actual rows=6 loops=1)
                 ->  Custom Scan (DecompressChunk) on _hyper_5_25_chunk _hyper_5_25_chunk_1 (actual rows=5038 loops=1)
                       ->  Seq Scan on compress_hyper_6_30_chunk compress_hyper_6_30_chunk_1 (actual rows=6 loops=1)
                 ->  Custom Scan (DecompressChunk) on _hyper_5_26_chunk _hyper_5_26_chunk_1 (actual rows=15114 loops=1)
                       ->  Seq Scan on compress_hyper_6_29_chunk compress_hyper_6_29_chunk_1 (actual rows=18 loops=1)
                 ->  Custom Scan (DecompressChunk) on _hyper_5_27_chunk _hyper_5_27_chunk_1 (actual rows=5038 loops=1)
                       ->  Seq Scan on compress_hyper_6_28_chunk compress_hyper_6_28_chunk_1 (actual rows=6 loops=1)
   ->  Merge Append (actual rows=0 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_5_19_chunk (actual rows=0 loops=1)
               Filter: ("time" = $0)
               ->  Seq Scan on compress_hyper_6_36_chunk (actual rows=0 loops=1)
                     Filter: ((_ts_meta_min_1 <= $0) AND (_ts_meta_max_1 >= $0))
                     Rows Removed by Filter: 4
         ->  Custom Scan (DecompressChunk) on _hyper_5_20_chunk (actual rows=0 loops=1)
               Filter: ("time" = $0)
               ->  Seq Scan on compress_hyper_6_35_chunk (actual rows=0 loops=1)
                     Filter: ((_ts_meta_min_1 <= $0) AND (_ts_meta_max_1 >= $0))
                     Rows Removed by Filter: 12
         ->  Custom Scan (DecompressChunk) on _hyper_5_21_chunk (actual rows=0 loops=1)
               Filter: ("time" = $0)
               ->  Seq Scan on compress_hyper_6_34_chunk (actual rows=0 loops=1)
                     Filter: ((_ts_meta_min_1 <= $0) AND (_ts_meta_max_1 >= $0))
                     Rows Removed by Filter: 4
   ->  Merge Append (actual rows=0 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_5_22_chunk (actual rows=0 loops=1)
               Filter: ("time" = $0)
               ->  Seq Scan on compress_hyper_6_33_chunk (actual rows=0 loops=1)
                     Filter: ((_ts_meta_min_1 <= $0) AND (_ts_meta_max_1 >= $0))
                     Rows Removed by Filter: 6
         ->  Custom Scan (DecompressChunk) on _hyper_5_23_chunk (actual rows=0 loops=1)
               Filter: ("time" = $0)
               ->  Seq Scan on compress_hyper_6_32_chunk (actual rows=0 loops=1)
                     Filter: ((_ts_meta_min_1 <= $0) AND (_ts_meta_max_1 >= $0))
                     Rows Removed by Filter: 18
         ->  Custom Scan (DecompressChunk) on _hyper_5_24_chunk (actual rows=0 loops=1)
               Filter: ("time" = $0)
               ->  Seq Scan on compress_hyper_6_31_chunk (actual rows=0 loops=1)
                     Filter: ((_ts_meta_min_1 <= $0) AND (_ts_meta_max_1 >= $0))
                     Rows Removed by Filter: 6
   ->  Merge Append (actual rows=5 loops=1)
         ->  Custom Scan (DecompressChunk) on _hyper_5_25_chunk (actual rows=1 loops=1)
               Filter: ("time" = $0)
               Rows Removed by Filter: 999
               ->  Seq Scan on compress_hyper_6_30_chunk (actual rows=1 loops=1)
                     Filter: ((_ts_meta_min_1 <= $0) AND (_ts_meta_max_1 >= $0))
                     Rows Removed by Filter: 5
         ->  Custom Scan (DecompressChunk) on _hyper_5_26_chunk (actual rows=3 loops=1)
               Filter: ("time" = $0)
               Rows Removed by Filter: 2997
               ->  Seq Scan on compress_hyper_6_29_chunk (actual rows=3 loops=1)
                     Filter: ((_ts_meta_min_1 <= $0) AND (_ts_meta_max_1 >= $0))
                     Rows Removed by Filter: 15
         ->  Custom Scan (DecompressChunk) on _hyper_5_27_chunk (actual rows=1 loops=1)
               Filter: ("time" = $0)
               Rows Removed by Filter: 999
               ->  Seq Scan on compress_hyper_6_28_chunk (actual rows=1 loops=1)
                     Filter: ((_ts_meta_min_1 <= $0) AND (_ts_meta_max_1 >= $0))
                     Rows Removed by Filter: 5
(73 rows)

-- test join against max query
-- not ChunkAppend so no chunk exclusion
SET enable_hashjoin = false;
:PREFIX SELECT o1.time, o2.*
FROM :TEST_TABLE o1 INNER JOIN (SELECT max(time) AS max_time FROM :TEST_TABLE) o2 ON o1.time = o2.max_time ORDER BY time;
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Sort (actual rows=5 loops=1)
   Sort Key: o1."time"
   Sort Method: quicksort 
   ->  Nested Loop (actual rows=5 loops=1)
         Join Filter: (o1."time" = (max(_hyper_5_19_chunk."time")))
         Rows Removed by Join Filter: 68365
         ->  Aggregate (actual rows=1 loops=1)
               ->  Append (actual rows=68370 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_19_chunk (actual rows=3598 loops=1)
                           ->  Seq Scan on compress_hyper_6_36_chunk compress_hyper_6_36_chunk_1 (actual rows=4 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_20_chunk (actual rows=10794 loops=1)
                           ->  Seq Scan on compress_hyper_6_35_chunk compress_hyper_6_35_chunk_1 (actual rows=12 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_21_chunk (actual rows=3598 loops=1)
                           ->  Seq Scan on compress_hyper_6_34_chunk compress_hyper_6_34_chunk_1 (actual rows=4 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_22_chunk (actual rows=5038 loops=1)
                           ->  Seq Scan on compress_hyper_6_33_chunk compress_hyper_6_33_chunk_1 (actual rows=6 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_23_chunk (actual rows=15114 loops=1)
                           ->  Seq Scan on compress_hyper_6_32_chunk compress_hyper_6_32_chunk_1 (actual rows=18 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_24_chunk (actual rows=5038 loops=1)
                           ->  Seq Scan on compress_hyper_6_31_chunk compress_hyper_6_31_chunk_1 (actual rows=6 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_25_chunk (actual rows=5038 loops=1)
                           ->  Seq Scan on compress_hyper_6_30_chunk compress_hyper_6_30_chunk_1 (actual rows=6 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_26_chunk (actual rows=15114 loops=1)
                           ->  Seq Scan on compress_hyper_6_29_chunk compress_hyper_6_29_chunk_1 (actual rows=18 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_27_chunk (actual rows=5038 loops=1)
                           ->  Seq Scan on compress_hyper_6_28_chunk compress_hyper_6_28_chunk_1 (actual rows=6 loops=1)
         ->  Append (actual rows=68370 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_5_19_chunk o1 (actual rows=3598 loops=1)
                     ->  Seq Scan on compress_hyper_6_36_chunk (actual rows=4 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_5_20_chunk o1_1 (actual rows=10794 loops=1)
                     ->  Seq Scan on compress_hyper_6_35_chunk (actual rows=12 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_5_21_chunk o1_2 (actual rows=3598 loops=1)
                     ->  Seq Scan on compress_hyper_6_34_chunk (actual rows=4 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_5_22_chunk o1_3 (actual rows=5038 loops=1)
                     ->  Seq Scan on compress_hyper_6_33_chunk (actual rows=6 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_5_23_chunk o1_4 (actual rows=15114 loops=1)
                     ->  Seq Scan on compress_hyper_6_32_chunk (actual rows=18 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_5_24_chunk o1_5 (actual rows=5038 loops=1)
                     ->  Seq Scan on compress_hyper_6_31_chunk (actual rows=6 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_5_25_chunk o1_6 (actual rows=5038 loops=1)
                     ->  Seq Scan on compress_hyper_6_30_chunk (actual rows=6 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_5_26_chunk o1_7 (actual rows=15114 loops=1)
                     ->  Seq Scan on compress_hyper_6_29_chunk (actual rows=18 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_5_27_chunk o1_8 (actual rows=5038 loops=1)
                     ->  Seq Scan on compress_hyper_6_28_chunk (actual rows=6 loops=1)
(45 rows)

RESET enable_hashjoin;
-- test ordered append with limit expression
:PREFIX SELECT time
FROM :TEST_TABLE ORDER BY time LIMIT (SELECT length('four'));
                                            QUERY PLAN                                            
--------------------------------------------------------------------------------------------------
 Limit (actual rows=4 loops=1)
   InitPlan 1 (returns $0)
     ->  Result (actual rows=1 loops=1)
   ->  Sort (actual rows=4 loops=1)
         Sort Key: _hyper_5_19_chunk."time"
         Sort Method: top-N heapsort 
         ->  Append (actual rows=68370 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_5_19_chunk (actual rows=3598 loops=1)
                     ->  Seq Scan on compress_hyper_6_36_chunk (actual rows=4 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_5_20_chunk (actual rows=10794 loops=1)
                     ->  Seq Scan on compress_hyper_6_35_chunk (actual rows=12 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_5_21_chunk (actual rows=3598 loops=1)
                     ->  Seq Scan on compress_hyper_6_34_chunk (actual rows=4 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_5_22_chunk (actual rows=5038 loops=1)
                     ->  Seq Scan on compress_hyper_6_33_chunk (actual rows=6 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_5_23_chunk (actual rows=15114 loops=1)
                     ->  Seq Scan on compress_hyper_6_32_chunk (actual rows=18 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_5_24_chunk (actual rows=5038 loops=1)
                     ->  Seq Scan on compress_hyper_6_31_chunk (actual rows=6 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_5_25_chunk (actual rows=5038 loops=1)
                     ->  Seq Scan on compress_hyper_6_30_chunk (actual rows=6 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_5_26_chunk (actual rows=15114 loops=1)
                     ->  Seq Scan on compress_hyper_6_29_chunk (actual rows=18 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_5_27_chunk (actual rows=5038 loops=1)
                     ->  Seq Scan on compress_hyper_6_28_chunk (actual rows=6 loops=1)
(25 rows)

-- test with ordered guc disabled
SET timescaledb.enable_ordered_append TO off;
:PREFIX SELECT time
FROM :TEST_TABLE ORDER BY time LIMIT 3;
                                            QUERY PLAN                                            
--------------------------------------------------------------------------------------------------
 Limit (actual rows=3 loops=1)
   ->  Sort (actual rows=3 loops=1)
         Sort Key: _hyper_5_19_chunk."time"
         Sort Method: top-N heapsort 
         ->  Append (actual rows=68370 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_5_19_chunk (actual rows=3598 loops=1)
                     ->  Seq Scan on compress_hyper_6_36_chunk (actual rows=4 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_5_20_chunk (actual rows=10794 loops=1)
                     ->  Seq Scan on compress_hyper_6_35_chunk (actual rows=12 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_5_21_chunk (actual rows=3598 loops=1)
                     ->  Seq Scan on compress_hyper_6_34_chunk (actual rows=4 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_5_22_chunk (actual rows=5038 loops=1)
                     ->  Seq Scan on compress_hyper_6_33_chunk (actual rows=6 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_5_23_chunk (actual rows=15114 loops=1)
                     ->  Seq Scan on compress_hyper_6_32_chunk (actual rows=18 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_5_24_chunk (actual rows=5038 loops=1)
                     ->  Seq Scan on compress_hyper_6_31_chunk (actual rows=6 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_5_25_chunk (actual rows=5038 loops=1)
                     ->  Seq Scan on compress_hyper_6_30_chunk (actual rows=6 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_5_26_chunk (actual rows=15114 loops=1)
                     ->  Seq Scan on compress_hyper_6_29_chunk (actual rows=18 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_5_27_chunk (actual rows=5038 loops=1)
                     ->  Seq Scan on compress_hyper_6_28_chunk (actual rows=6 loops=1)
(23 rows)

RESET timescaledb.enable_ordered_append;
:PREFIX SELECT time
FROM :TEST_TABLE ORDER BY time LIMIT 3;
                                            QUERY PLAN                                            
--------------------------------------------------------------------------------------------------
 Limit (actual rows=3 loops=1)
   ->  Sort (actual rows=3 loops=1)
         Sort Key: _hyper_5_19_chunk."time"
         Sort Method: top-N heapsort 
         ->  Append (actual rows=68370 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_5_19_chunk (actual rows=3598 loops=1)
                     ->  Seq Scan on compress_hyper_6_36_chunk (actual rows=4 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_5_20_chunk (actual rows=10794 loops=1)
                     ->  Seq Scan on compress_hyper_6_35_chunk (actual rows=12 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_5_21_chunk (actual rows=3598 loops=1)
                     ->  Seq Scan on compress_hyper_6_34_chunk (actual rows=4 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_5_22_chunk (actual rows=5038 loops=1)
                     ->  Seq Scan on compress_hyper_6_33_chunk (actual rows=6 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_5_23_chunk (actual rows=15114 loops=1)
                     ->  Seq Scan on compress_hyper_6_32_chunk (actual rows=18 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_5_24_chunk (actual rows=5038 loops=1)
                     ->  Seq Scan on compress_hyper_6_31_chunk (actual rows=6 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_5_25_chunk (actual rows=5038 loops=1)
                     ->  Seq Scan on compress_hyper_6_30_chunk (actual rows=6 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_5_26_chunk (actual rows=15114 loops=1)
                     ->  Seq Scan on compress_hyper_6_29_chunk (actual rows=18 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_5_27_chunk (actual rows=5038 loops=1)
                     ->  Seq Scan on compress_hyper_6_28_chunk (actual rows=6 loops=1)
(23 rows)

-- test with chunk append disabled
SET timescaledb.enable_chunk_append TO off;
:PREFIX SELECT time
FROM :TEST_TABLE ORDER BY time LIMIT 3;
                                            QUERY PLAN                                            
--------------------------------------------------------------------------------------------------
 Limit (actual rows=3 loops=1)
   ->  Sort (actual rows=3 loops=1)
         Sort Key: _hyper_5_19_chunk."time"
         Sort Method: top-N heapsort 
         ->  Append (actual rows=68370 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_5_19_chunk (actual rows=3598 loops=1)
                     ->  Seq Scan on compress_hyper_6_36_chunk (actual rows=4 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_5_20_chunk (actual rows=10794 loops=1)
                     ->  Seq Scan on compress_hyper_6_35_chunk (actual rows=12 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_5_21_chunk (actual rows=3598 loops=1)
                     ->  Seq Scan on compress_hyper_6_34_chunk (actual rows=4 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_5_22_chunk (actual rows=5038 loops=1)
                     ->  Seq Scan on compress_hyper_6_33_chunk (actual rows=6 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_5_23_chunk (actual rows=15114 loops=1)
                     ->  Seq Scan on compress_hyper_6_32_chunk (actual rows=18 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_5_24_chunk (actual rows=5038 loops=1)
                     ->  Seq Scan on compress_hyper_6_31_chunk (actual rows=6 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_5_25_chunk (actual rows=5038 loops=1)
                     ->  Seq Scan on compress_hyper_6_30_chunk (actual rows=6 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_5_26_chunk (actual rows=15114 loops=1)
                     ->  Seq Scan on compress_hyper_6_29_chunk (actual rows=18 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_5_27_chunk (actual rows=5038 loops=1)
                     ->  Seq Scan on compress_hyper_6_28_chunk (actual rows=6 loops=1)
(23 rows)

RESET timescaledb.enable_chunk_append;
:PREFIX SELECT time
FROM :TEST_TABLE ORDER BY time LIMIT 3;
                                            QUERY PLAN                                            
--------------------------------------------------------------------------------------------------
 Limit (actual rows=3 loops=1)
   ->  Sort (actual rows=3 loops=1)
         Sort Key: _hyper_5_19_chunk."time"
         Sort Method: top-N heapsort 
         ->  Append (actual rows=68370 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_5_19_chunk (actual rows=3598 loops=1)
                     ->  Seq Scan on compress_hyper_6_36_chunk (actual rows=4 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_5_20_chunk (actual rows=10794 loops=1)
                     ->  Seq Scan on compress_hyper_6_35_chunk (actual rows=12 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_5_21_chunk (actual rows=3598 loops=1)
                     ->  Seq Scan on compress_hyper_6_34_chunk (actual rows=4 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_5_22_chunk (actual rows=5038 loops=1)
                     ->  Seq Scan on compress_hyper_6_33_chunk (actual rows=6 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_5_23_chunk (actual rows=15114 loops=1)
                     ->  Seq Scan on compress_hyper_6_32_chunk (actual rows=18 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_5_24_chunk (actual rows=5038 loops=1)
                     ->  Seq Scan on compress_hyper_6_31_chunk (actual rows=6 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_5_25_chunk (actual rows=5038 loops=1)
                     ->  Seq Scan on compress_hyper_6_30_chunk (actual rows=6 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_5_26_chunk (actual rows=15114 loops=1)
                     ->  Seq Scan on compress_hyper_6_29_chunk (actual rows=18 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_5_27_chunk (actual rows=5038 loops=1)
                     ->  Seq Scan on compress_hyper_6_28_chunk (actual rows=6 loops=1)
(23 rows)

-- test JOIN on time column
-- should use 2 ChunkAppend
:PREFIX SELECT o1.time FROM :TEST_TABLE o1 INNER JOIN :TEST_TABLE o2 ON o1.time = o2.time ORDER BY o1.time LIMIT 100;
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=100 loops=1)
   ->  Merge Join (actual rows=100 loops=1)
         Merge Cond: (o1."time" = o2."time")
         ->  Sort (actual rows=20 loops=1)
               Sort Key: o1."time"
               Sort Method: quicksort 
               ->  Append (actual rows=68370 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_19_chunk o1 (actual rows=3598 loops=1)
                           ->  Seq Scan on compress_hyper_6_36_chunk (actual rows=4 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_20_chunk o1_1 (actual rows=10794 loops=1)
                           ->  Seq Scan on compress_hyper_6_35_chunk (actual rows=12 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_21_chunk o1_2 (actual rows=3598 loops=1)
                           ->  Seq Scan on compress_hyper_6_34_chunk (actual rows=4 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_22_chunk o1_3 (actual rows=5038 loops=1)
                           ->  Seq Scan on compress_hyper_6_33_chunk (actual rows=6 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_23_chunk o1_4 (actual rows=15114 loops=1)
                           ->  Seq Scan on compress_hyper_6_32_chunk (actual rows=18 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_24_chunk o1_5 (actual rows=5038 loops=1)
                           ->  Seq Scan on compress_hyper_6_31_chunk (actual rows=6 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_25_chunk o1_6 (actual rows=5038 loops=1)
                           ->  Seq Scan on compress_hyper_6_30_chunk (actual rows=6 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_26_chunk o1_7 (actual rows=15114 loops=1)
                           ->  Seq Scan on compress_hyper_6_29_chunk (actual rows=18 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_27_chunk o1_8 (actual rows=5038 loops=1)
                           ->  Seq Scan on compress_hyper_6_28_chunk (actual rows=6 loops=1)
         ->  Sort (actual rows=100 loops=1)
               Sort Key: o2."time"
               Sort Method: quicksort 
               ->  Append (actual rows=68370 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_19_chunk o2 (actual rows=3598 loops=1)
                           ->  Seq Scan on compress_hyper_6_36_chunk compress_hyper_6_36_chunk_1 (actual rows=4 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_20_chunk o2_1 (actual rows=10794 loops=1)
                           ->  Seq Scan on compress_hyper_6_35_chunk compress_hyper_6_35_chunk_1 (actual rows=12 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_21_chunk o2_2 (actual rows=3598 loops=1)
                           ->  Seq Scan on compress_hyper_6_34_chunk compress_hyper_6_34_chunk_1 (actual rows=4 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_22_chunk o2_3 (actual rows=5038 loops=1)
                           ->  Seq Scan on compress_hyper_6_33_chunk compress_hyper_6_33_chunk_1 (actual rows=6 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_23_chunk o2_4 (actual rows=15114 loops=1)
                           ->  Seq Scan on compress_hyper_6_32_chunk compress_hyper_6_32_chunk_1 (actual rows=18 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_24_chunk o2_5 (actual rows=5038 loops=1)
                           ->  Seq Scan on compress_hyper_6_31_chunk compress_hyper_6_31_chunk_1 (actual rows=6 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_25_chunk o2_6 (actual rows=5038 loops=1)
                           ->  Seq Scan on compress_hyper_6_30_chunk compress_hyper_6_30_chunk_1 (actual rows=6 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_26_chunk o2_7 (actual rows=15114 loops=1)
                           ->  Seq Scan on compress_hyper_6_29_chunk compress_hyper_6_29_chunk_1 (actual rows=18 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_27_chunk o2_8 (actual rows=5038 loops=1)
                           ->  Seq Scan on compress_hyper_6_28_chunk compress_hyper_6_28_chunk_1 (actual rows=6 loops=1)
(47 rows)

-- test JOIN on time column with USING
-- should use 2 ChunkAppend
:PREFIX SELECT o1.time FROM :TEST_TABLE o1 INNER JOIN :TEST_TABLE o2 USING(time) ORDER BY o1.time LIMIT 100;
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=100 loops=1)
   ->  Merge Join (actual rows=100 loops=1)
         Merge Cond: (o1."time" = o2."time")
         ->  Sort (actual rows=20 loops=1)
               Sort Key: o1."time"
               Sort Method: quicksort 
               ->  Append (actual rows=68370 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_19_chunk o1 (actual rows=3598 loops=1)
                           ->  Seq Scan on compress_hyper_6_36_chunk (actual rows=4 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_20_chunk o1_1 (actual rows=10794 loops=1)
                           ->  Seq Scan on compress_hyper_6_35_chunk (actual rows=12 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_21_chunk o1_2 (actual rows=3598 loops=1)
                           ->  Seq Scan on compress_hyper_6_34_chunk (actual rows=4 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_22_chunk o1_3 (actual rows=5038 loops=1)
                           ->  Seq Scan on compress_hyper_6_33_chunk (actual rows=6 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_23_chunk o1_4 (actual rows=15114 loops=1)
                           ->  Seq Scan on compress_hyper_6_32_chunk (actual rows=18 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_24_chunk o1_5 (actual rows=5038 loops=1)
                           ->  Seq Scan on compress_hyper_6_31_chunk (actual rows=6 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_25_chunk o1_6 (actual rows=5038 loops=1)
                           ->  Seq Scan on compress_hyper_6_30_chunk (actual rows=6 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_26_chunk o1_7 (actual rows=15114 loops=1)
                           ->  Seq Scan on compress_hyper_6_29_chunk (actual rows=18 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_27_chunk o1_8 (actual rows=5038 loops=1)
                           ->  Seq Scan on compress_hyper_6_28_chunk (actual rows=6 loops=1)
         ->  Sort (actual rows=100 loops=1)
               Sort Key: o2."time"
               Sort Method: quicksort 
               ->  Append (actual rows=68370 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_19_chunk o2 (actual rows=3598 loops=1)
                           ->  Seq Scan on compress_hyper_6_36_chunk compress_hyper_6_36_chunk_1 (actual rows=4 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_20_chunk o2_1 (actual rows=10794 loops=1)
                           ->  Seq Scan on compress_hyper_6_35_chunk compress_hyper_6_35_chunk_1 (actual rows=12 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_21_chunk o2_2 (actual rows=3598 loops=1)
                           ->  Seq Scan on compress_hyper_6_34_chunk compress_hyper_6_34_chunk_1 (actual rows=4 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_22_chunk o2_3 (actual rows=5038 loops=1)
                           ->  Seq Scan on compress_hyper_6_33_chunk compress_hyper_6_33_chunk_1 (actual rows=6 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_23_chunk o2_4 (actual rows=15114 loops=1)
                           ->  Seq Scan on compress_hyper_6_32_chunk compress_hyper_6_32_chunk_1 (actual rows=18 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_24_chunk o2_5 (actual rows=5038 loops=1)
                           ->  Seq Scan on compress_hyper_6_31_chunk compress_hyper_6_31_chunk_1 (actual rows=6 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_25_chunk o2_6 (actual rows=5038 loops=1)
                           ->  Seq Scan on compress_hyper_6_30_chunk compress_hyper_6_30_chunk_1 (actual rows=6 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_26_chunk o2_7 (actual rows=15114 loops=1)
                           ->  Seq Scan on compress_hyper_6_29_chunk compress_hyper_6_29_chunk_1 (actual rows=18 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_27_chunk o2_8 (actual rows=5038 loops=1)
                           ->  Seq Scan on compress_hyper_6_28_chunk compress_hyper_6_28_chunk_1 (actual rows=6 loops=1)
(47 rows)

-- test NATURAL JOIN on time column
-- should use 2 ChunkAppend
:PREFIX SELECT o1.time FROM :TEST_TABLE o1 NATURAL INNER JOIN :TEST_TABLE o2 ORDER BY o1.time LIMIT 100;
                                                                              QUERY PLAN                                                                              
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=0 loops=1)
   ->  Sort (actual rows=0 loops=1)
         Sort Key: o1."time"
         Sort Method: quicksort 
         ->  Hash Join (actual rows=0 loops=1)
               Hash Cond: ((o1."time" = o2."time") AND (o1.device_id = o2.device_id) AND (o1.v0 = o2.v0) AND (o1.v1 = o2.v1) AND (o1.v2 = o2.v2) AND (o1.v3 = o2.v3))
               ->  Append (actual rows=1 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_19_chunk o1 (actual rows=1 loops=1)
                           ->  Seq Scan on compress_hyper_6_36_chunk (actual rows=1 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_20_chunk o1_1 (never executed)
                           ->  Seq Scan on compress_hyper_6_35_chunk (never executed)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_21_chunk o1_2 (never executed)
                           ->  Seq Scan on compress_hyper_6_34_chunk (never executed)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_22_chunk o1_3 (never executed)
                           ->  Seq Scan on compress_hyper_6_33_chunk (never executed)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_23_chunk o1_4 (never executed)
                           ->  Seq Scan on compress_hyper_6_32_chunk (never executed)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_24_chunk o1_5 (never executed)
                           ->  Seq Scan on compress_hyper_6_31_chunk (never executed)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_25_chunk o1_6 (never executed)
                           ->  Seq Scan on compress_hyper_6_30_chunk (never executed)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_26_chunk o1_7 (never executed)
                           ->  Seq Scan on compress_hyper_6_29_chunk (never executed)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_27_chunk o1_8 (never executed)
                           ->  Seq Scan on compress_hyper_6_28_chunk (never executed)
               ->  Hash (actual rows=0 loops=1)
                     Buckets: 131072  Batches: 1 
                     ->  Append (actual rows=68370 loops=1)
                           ->  Custom Scan (DecompressChunk) on _hyper_5_19_chunk o2 (actual rows=3598 loops=1)
                                 ->  Seq Scan on compress_hyper_6_36_chunk compress_hyper_6_36_chunk_1 (actual rows=4 loops=1)
                           ->  Custom Scan (DecompressChunk) on _hyper_5_20_chunk o2_1 (actual rows=10794 loops=1)
                                 ->  Seq Scan on compress_hyper_6_35_chunk compress_hyper_6_35_chunk_1 (actual rows=12 loops=1)
                           ->  Custom Scan (DecompressChunk) on _hyper_5_21_chunk o2_2 (actual rows=3598 loops=1)
                                 ->  Seq Scan on compress_hyper_6_34_chunk compress_hyper_6_34_chunk_1 (actual rows=4 loops=1)
                           ->  Custom Scan (DecompressChunk) on _hyper_5_22_chunk o2_3 (actual rows=5038 loops=1)
                                 ->  Seq Scan on compress_hyper_6_33_chunk compress_hyper_6_33_chunk_1 (actual rows=6 loops=1)
                           ->  Custom Scan (DecompressChunk) on _hyper_5_23_chunk o2_4 (actual rows=15114 loops=1)
                                 ->  Seq Scan on compress_hyper_6_32_chunk compress_hyper_6_32_chunk_1 (actual rows=18 loops=1)
                           ->  Custom Scan (DecompressChunk) on _hyper_5_24_chunk o2_5 (actual rows=5038 loops=1)
                                 ->  Seq Scan on compress_hyper_6_31_chunk compress_hyper_6_31_chunk_1 (actual rows=6 loops=1)
                           ->  Custom Scan (DecompressChunk) on _hyper_5_25_chunk o2_6 (actual rows=5038 loops=1)
                                 ->  Seq Scan on compress_hyper_6_30_chunk compress_hyper_6_30_chunk_1 (actual rows=6 loops=1)
                           ->  Custom Scan (DecompressChunk) on _hyper_5_26_chunk o2_7 (actual rows=15114 loops=1)
                                 ->  Seq Scan on compress_hyper_6_29_chunk compress_hyper_6_29_chunk_1 (actual rows=18 loops=1)
                           ->  Custom Scan (DecompressChunk) on _hyper_5_27_chunk o2_8 (actual rows=5038 loops=1)
                                 ->  Seq Scan on compress_hyper_6_28_chunk compress_hyper_6_28_chunk_1 (actual rows=6 loops=1)
(46 rows)

-- test LEFT JOIN on time column
-- should use 2 ChunkAppend
:PREFIX SELECT o1.time FROM :TEST_TABLE o1 LEFT JOIN :TEST_TABLE o2 ON o1.time=o2.time ORDER BY o1.time LIMIT 100;
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=100 loops=1)
   ->  Merge Left Join (actual rows=100 loops=1)
         Merge Cond: (o1."time" = o2."time")
         ->  Sort (actual rows=20 loops=1)
               Sort Key: o1."time"
               Sort Method: quicksort 
               ->  Append (actual rows=68370 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_19_chunk o1 (actual rows=3598 loops=1)
                           ->  Seq Scan on compress_hyper_6_36_chunk (actual rows=4 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_20_chunk o1_1 (actual rows=10794 loops=1)
                           ->  Seq Scan on compress_hyper_6_35_chunk (actual rows=12 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_21_chunk o1_2 (actual rows=3598 loops=1)
                           ->  Seq Scan on compress_hyper_6_34_chunk (actual rows=4 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_22_chunk o1_3 (actual rows=5038 loops=1)
                           ->  Seq Scan on compress_hyper_6_33_chunk (actual rows=6 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_23_chunk o1_4 (actual rows=15114 loops=1)
                           ->  Seq Scan on compress_hyper_6_32_chunk (actual rows=18 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_24_chunk o1_5 (actual rows=5038 loops=1)
                           ->  Seq Scan on compress_hyper_6_31_chunk (actual rows=6 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_25_chunk o1_6 (actual rows=5038 loops=1)
                           ->  Seq Scan on compress_hyper_6_30_chunk (actual rows=6 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_26_chunk o1_7 (actual rows=15114 loops=1)
                           ->  Seq Scan on compress_hyper_6_29_chunk (actual rows=18 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_27_chunk o1_8 (actual rows=5038 loops=1)
                           ->  Seq Scan on compress_hyper_6_28_chunk (actual rows=6 loops=1)
         ->  Sort (actual rows=100 loops=1)
               Sort Key: o2."time"
               Sort Method: quicksort 
               ->  Append (actual rows=68370 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_19_chunk o2 (actual rows=3598 loops=1)
                           ->  Seq Scan on compress_hyper_6_36_chunk compress_hyper_6_36_chunk_1 (actual rows=4 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_20_chunk o2_1 (actual rows=10794 loops=1)
                           ->  Seq Scan on compress_hyper_6_35_chunk compress_hyper_6_35_chunk_1 (actual rows=12 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_21_chunk o2_2 (actual rows=3598 loops=1)
                           ->  Seq Scan on compress_hyper_6_34_chunk compress_hyper_6_34_chunk_1 (actual rows=4 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_22_chunk o2_3 (actual rows=5038 loops=1)
                           ->  Seq Scan on compress_hyper_6_33_chunk compress_hyper_6_33_chunk_1 (actual rows=6 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_23_chunk o2_4 (actual rows=15114 loops=1)
                           ->  Seq Scan on compress_hyper_6_32_chunk compress_hyper_6_32_chunk_1 (actual rows=18 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_24_chunk o2_5 (actual rows=5038 loops=1)
                           ->  Seq Scan on compress_hyper_6_31_chunk compress_hyper_6_31_chunk_1 (actual rows=6 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_25_chunk o2_6 (actual rows=5038 loops=1)
                           ->  Seq Scan on compress_hyper_6_30_chunk compress_hyper_6_30_chunk_1 (actual rows=6 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_26_chunk o2_7 (actual rows=15114 loops=1)
                           ->  Seq Scan on compress_hyper_6_29_chunk compress_hyper_6_29_chunk_1 (actual rows=18 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_27_chunk o2_8 (actual rows=5038 loops=1)
                           ->  Seq Scan on compress_hyper_6_28_chunk compress_hyper_6_28_chunk_1 (actual rows=6 loops=1)
(47 rows)

-- test RIGHT JOIN on time column
-- should use 2 ChunkAppend
:PREFIX SELECT o1.time FROM :TEST_TABLE o1 RIGHT JOIN :TEST_TABLE o2 ON o1.time=o2.time ORDER BY o2.time LIMIT 100;
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=100 loops=1)
   ->  Merge Left Join (actual rows=100 loops=1)
         Merge Cond: (o2."time" = o1."time")
         ->  Sort (actual rows=20 loops=1)
               Sort Key: o2."time"
               Sort Method: quicksort 
               ->  Append (actual rows=68370 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_19_chunk o2 (actual rows=3598 loops=1)
                           ->  Seq Scan on compress_hyper_6_36_chunk compress_hyper_6_36_chunk_1 (actual rows=4 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_20_chunk o2_1 (actual rows=10794 loops=1)
                           ->  Seq Scan on compress_hyper_6_35_chunk compress_hyper_6_35_chunk_1 (actual rows=12 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_21_chunk o2_2 (actual rows=3598 loops=1)
                           ->  Seq Scan on compress_hyper_6_34_chunk compress_hyper_6_34_chunk_1 (actual rows=4 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_22_chunk o2_3 (actual rows=5038 loops=1)
                           ->  Seq Scan on compress_hyper_6_33_chunk compress_hyper_6_33_chunk_1 (actual rows=6 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_23_chunk o2_4 (actual rows=15114 loops=1)
                           ->  Seq Scan on compress_hyper_6_32_chunk compress_hyper_6_32_chunk_1 (actual rows=18 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_24_chunk o2_5 (actual rows=5038 loops=1)
                           ->  Seq Scan on compress_hyper_6_31_chunk compress_hyper_6_31_chunk_1 (actual rows=6 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_25_chunk o2_6 (actual rows=5038 loops=1)
                           ->  Seq Scan on compress_hyper_6_30_chunk compress_hyper_6_30_chunk_1 (actual rows=6 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_26_chunk o2_7 (actual rows=15114 loops=1)
                           ->  Seq Scan on compress_hyper_6_29_chunk compress_hyper_6_29_chunk_1 (actual rows=18 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_27_chunk o2_8 (actual rows=5038 loops=1)
                           ->  Seq Scan on compress_hyper_6_28_chunk compress_hyper_6_28_chunk_1 (actual rows=6 loops=1)
         ->  Sort (actual rows=100 loops=1)
               Sort Key: o1."time"
               Sort Method: quicksort 
               ->  Append (actual rows=68370 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_19_chunk o1 (actual rows=3598 loops=1)
                           ->  Seq Scan on compress_hyper_6_36_chunk (actual rows=4 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_20_chunk o1_1 (actual rows=10794 loops=1)
                           ->  Seq Scan on compress_hyper_6_35_chunk (actual rows=12 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_21_chunk o1_2 (actual rows=3598 loops=1)
                           ->  Seq Scan on compress_hyper_6_34_chunk (actual rows=4 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_22_chunk o1_3 (actual rows=5038 loops=1)
                           ->  Seq Scan on compress_hyper_6_33_chunk (actual rows=6 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_23_chunk o1_4 (actual rows=15114 loops=1)
                           ->  Seq Scan on compress_hyper_6_32_chunk (actual rows=18 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_24_chunk o1_5 (actual rows=5038 loops=1)
                           ->  Seq Scan on compress_hyper_6_31_chunk (actual rows=6 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_25_chunk o1_6 (actual rows=5038 loops=1)
                           ->  Seq Scan on compress_hyper_6_30_chunk (actual rows=6 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_26_chunk o1_7 (actual rows=15114 loops=1)
                           ->  Seq Scan on compress_hyper_6_29_chunk (actual rows=18 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_27_chunk o1_8 (actual rows=5038 loops=1)
                           ->  Seq Scan on compress_hyper_6_28_chunk (actual rows=6 loops=1)
(47 rows)

-- test JOIN on time column with ON clause expression order switched
-- should use 2 ChunkAppend
:PREFIX SELECT o1.time FROM :TEST_TABLE o1 INNER JOIN :TEST_TABLE o2 ON o2.time = o1.time ORDER BY o1.time LIMIT 100;
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=100 loops=1)
   ->  Merge Join (actual rows=100 loops=1)
         Merge Cond: (o1."time" = o2."time")
         ->  Sort (actual rows=20 loops=1)
               Sort Key: o1."time"
               Sort Method: quicksort 
               ->  Append (actual rows=68370 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_19_chunk o1 (actual rows=3598 loops=1)
                           ->  Seq Scan on compress_hyper_6_36_chunk (actual rows=4 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_20_chunk o1_1 (actual rows=10794 loops=1)
                           ->  Seq Scan on compress_hyper_6_35_chunk (actual rows=12 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_21_chunk o1_2 (actual rows=3598 loops=1)
                           ->  Seq Scan on compress_hyper_6_34_chunk (actual rows=4 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_22_chunk o1_3 (actual rows=5038 loops=1)
                           ->  Seq Scan on compress_hyper_6_33_chunk (actual rows=6 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_23_chunk o1_4 (actual rows=15114 loops=1)
                           ->  Seq Scan on compress_hyper_6_32_chunk (actual rows=18 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_24_chunk o1_5 (actual rows=5038 loops=1)
                           ->  Seq Scan on compress_hyper_6_31_chunk (actual rows=6 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_25_chunk o1_6 (actual rows=5038 loops=1)
                           ->  Seq Scan on compress_hyper_6_30_chunk (actual rows=6 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_26_chunk o1_7 (actual rows=15114 loops=1)
                           ->  Seq Scan on compress_hyper_6_29_chunk (actual rows=18 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_27_chunk o1_8 (actual rows=5038 loops=1)
                           ->  Seq Scan on compress_hyper_6_28_chunk (actual rows=6 loops=1)
         ->  Sort (actual rows=100 loops=1)
               Sort Key: o2."time"
               Sort Method: quicksort 
               ->  Append (actual rows=68370 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_19_chunk o2 (actual rows=3598 loops=1)
                           ->  Seq Scan on compress_hyper_6_36_chunk compress_hyper_6_36_chunk_1 (actual rows=4 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_20_chunk o2_1 (actual rows=10794 loops=1)
                           ->  Seq Scan on compress_hyper_6_35_chunk compress_hyper_6_35_chunk_1 (actual rows=12 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_21_chunk o2_2 (actual rows=3598 loops=1)
                           ->  Seq Scan on compress_hyper_6_34_chunk compress_hyper_6_34_chunk_1 (actual rows=4 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_22_chunk o2_3 (actual rows=5038 loops=1)
                           ->  Seq Scan on compress_hyper_6_33_chunk compress_hyper_6_33_chunk_1 (actual rows=6 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_23_chunk o2_4 (actual rows=15114 loops=1)
                           ->  Seq Scan on compress_hyper_6_32_chunk compress_hyper_6_32_chunk_1 (actual rows=18 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_24_chunk o2_5 (actual rows=5038 loops=1)
                           ->  Seq Scan on compress_hyper_6_31_chunk compress_hyper_6_31_chunk_1 (actual rows=6 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_25_chunk o2_6 (actual rows=5038 loops=1)
                           ->  Seq Scan on compress_hyper_6_30_chunk compress_hyper_6_30_chunk_1 (actual rows=6 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_26_chunk o2_7 (actual rows=15114 loops=1)
                           ->  Seq Scan on compress_hyper_6_29_chunk compress_hyper_6_29_chunk_1 (actual rows=18 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_27_chunk o2_8 (actual rows=5038 loops=1)
                           ->  Seq Scan on compress_hyper_6_28_chunk compress_hyper_6_28_chunk_1 (actual rows=6 loops=1)
(47 rows)

-- test JOIN on time column with equality condition in WHERE clause
-- should use 2 ChunkAppend
:PREFIX SELECT o1.time FROM :TEST_TABLE o1 INNER JOIN :TEST_TABLE o2 ON true WHERE o1.time = o2.time ORDER BY o1.time LIMIT 100;
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=100 loops=1)
   ->  Merge Join (actual rows=100 loops=1)
         Merge Cond: (o1."time" = o2."time")
         ->  Sort (actual rows=20 loops=1)
               Sort Key: o1."time"
               Sort Method: quicksort 
               ->  Append (actual rows=68370 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_19_chunk o1 (actual rows=3598 loops=1)
                           ->  Seq Scan on compress_hyper_6_36_chunk (actual rows=4 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_20_chunk o1_1 (actual rows=10794 loops=1)
                           ->  Seq Scan on compress_hyper_6_35_chunk (actual rows=12 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_21_chunk o1_2 (actual rows=3598 loops=1)
                           ->  Seq Scan on compress_hyper_6_34_chunk (actual rows=4 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_22_chunk o1_3 (actual rows=5038 loops=1)
                           ->  Seq Scan on compress_hyper_6_33_chunk (actual rows=6 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_23_chunk o1_4 (actual rows=15114 loops=1)
                           ->  Seq Scan on compress_hyper_6_32_chunk (actual rows=18 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_24_chunk o1_5 (actual rows=5038 loops=1)
                           ->  Seq Scan on compress_hyper_6_31_chunk (actual rows=6 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_25_chunk o1_6 (actual rows=5038 loops=1)
                           ->  Seq Scan on compress_hyper_6_30_chunk (actual rows=6 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_26_chunk o1_7 (actual rows=15114 loops=1)
                           ->  Seq Scan on compress_hyper_6_29_chunk (actual rows=18 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_27_chunk o1_8 (actual rows=5038 loops=1)
                           ->  Seq Scan on compress_hyper_6_28_chunk (actual rows=6 loops=1)
         ->  Sort (actual rows=100 loops=1)
               Sort Key: o2."time"
               Sort Method: quicksort 
               ->  Append (actual rows=68370 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_19_chunk o2 (actual rows=3598 loops=1)
                           ->  Seq Scan on compress_hyper_6_36_chunk compress_hyper_6_36_chunk_1 (actual rows=4 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_20_chunk o2_1 (actual rows=10794 loops=1)
                           ->  Seq Scan on compress_hyper_6_35_chunk compress_hyper_6_35_chunk_1 (actual rows=12 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_21_chunk o2_2 (actual rows=3598 loops=1)
                           ->  Seq Scan on compress_hyper_6_34_chunk compress_hyper_6_34_chunk_1 (actual rows=4 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_22_chunk o2_3 (actual rows=5038 loops=1)
                           ->  Seq Scan on compress_hyper_6_33_chunk compress_hyper_6_33_chunk_1 (actual rows=6 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_23_chunk o2_4 (actual rows=15114 loops=1)
                           ->  Seq Scan on compress_hyper_6_32_chunk compress_hyper_6_32_chunk_1 (actual rows=18 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_24_chunk o2_5 (actual rows=5038 loops=1)
                           ->  Seq Scan on compress_hyper_6_31_chunk compress_hyper_6_31_chunk_1 (actual rows=6 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_25_chunk o2_6 (actual rows=5038 loops=1)
                           ->  Seq Scan on compress_hyper_6_30_chunk compress_hyper_6_30_chunk_1 (actual rows=6 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_26_chunk o2_7 (actual rows=15114 loops=1)
                           ->  Seq Scan on compress_hyper_6_29_chunk compress_hyper_6_29_chunk_1 (actual rows=18 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_27_chunk o2_8 (actual rows=5038 loops=1)
                           ->  Seq Scan on compress_hyper_6_28_chunk compress_hyper_6_28_chunk_1 (actual rows=6 loops=1)
(47 rows)

-- test JOIN on time column with ORDER BY 2nd hypertable
-- should use 2 ChunkAppend
:PREFIX SELECT o1.time FROM :TEST_TABLE o1 INNER JOIN :TEST_TABLE o2 ON o1.time = o2.time ORDER BY o2.time LIMIT 100;
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=100 loops=1)
   ->  Merge Join (actual rows=100 loops=1)
         Merge Cond: (o1."time" = o2."time")
         ->  Sort (actual rows=20 loops=1)
               Sort Key: o1."time"
               Sort Method: quicksort 
               ->  Append (actual rows=68370 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_19_chunk o1 (actual rows=3598 loops=1)
                           ->  Seq Scan on compress_hyper_6_36_chunk (actual rows=4 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_20_chunk o1_1 (actual rows=10794 loops=1)
                           ->  Seq Scan on compress_hyper_6_35_chunk (actual rows=12 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_21_chunk o1_2 (actual rows=3598 loops=1)
                           ->  Seq Scan on compress_hyper_6_34_chunk (actual rows=4 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_22_chunk o1_3 (actual rows=5038 loops=1)
                           ->  Seq Scan on compress_hyper_6_33_chunk (actual rows=6 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_23_chunk o1_4 (actual rows=15114 loops=1)
                           ->  Seq Scan on compress_hyper_6_32_chunk (actual rows=18 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_24_chunk o1_5 (actual rows=5038 loops=1)
                           ->  Seq Scan on compress_hyper_6_31_chunk (actual rows=6 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_25_chunk o1_6 (actual rows=5038 loops=1)
                           ->  Seq Scan on compress_hyper_6_30_chunk (actual rows=6 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_26_chunk o1_7 (actual rows=15114 loops=1)
                           ->  Seq Scan on compress_hyper_6_29_chunk (actual rows=18 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_27_chunk o1_8 (actual rows=5038 loops=1)
                           ->  Seq Scan on compress_hyper_6_28_chunk (actual rows=6 loops=1)
         ->  Sort (actual rows=100 loops=1)
               Sort Key: o2."time"
               Sort Method: quicksort 
               ->  Append (actual rows=68370 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_19_chunk o2 (actual rows=3598 loops=1)
                           ->  Seq Scan on compress_hyper_6_36_chunk compress_hyper_6_36_chunk_1 (actual rows=4 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_20_chunk o2_1 (actual rows=10794 loops=1)
                           ->  Seq Scan on compress_hyper_6_35_chunk compress_hyper_6_35_chunk_1 (actual rows=12 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_21_chunk o2_2 (actual rows=3598 loops=1)
                           ->  Seq Scan on compress_hyper_6_34_chunk compress_hyper_6_34_chunk_1 (actual rows=4 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_22_chunk o2_3 (actual rows=5038 loops=1)
                           ->  Seq Scan on compress_hyper_6_33_chunk compress_hyper_6_33_chunk_1 (actual rows=6 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_23_chunk o2_4 (actual rows=15114 loops=1)
                           ->  Seq Scan on compress_hyper_6_32_chunk compress_hyper_6_32_chunk_1 (actual rows=18 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_24_chunk o2_5 (actual rows=5038 loops=1)
                           ->  Seq Scan on compress_hyper_6_31_chunk compress_hyper_6_31_chunk_1 (actual rows=6 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_25_chunk o2_6 (actual rows=5038 loops=1)
                           ->  Seq Scan on compress_hyper_6_30_chunk compress_hyper_6_30_chunk_1 (actual rows=6 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_26_chunk o2_7 (actual rows=15114 loops=1)
                           ->  Seq Scan on compress_hyper_6_29_chunk compress_hyper_6_29_chunk_1 (actual rows=18 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_27_chunk o2_8 (actual rows=5038 loops=1)
                           ->  Seq Scan on compress_hyper_6_28_chunk compress_hyper_6_28_chunk_1 (actual rows=6 loops=1)
(47 rows)

-- test JOIN on time column and device_id
-- should use 2 ChunkAppend
:PREFIX SELECT o1.time FROM :TEST_TABLE o1 INNER JOIN :TEST_TABLE o2 ON o1.device_id = o2.device_id AND o1.time = o2.time ORDER BY o1.time LIMIT 100;
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=100 loops=1)
   ->  Merge Join (actual rows=100 loops=1)
         Merge Cond: ((o1."time" = o2."time") AND (o1.device_id = o2.device_id))
         ->  Sort (actual rows=100 loops=1)
               Sort Key: o1."time", o1.device_id
               Sort Method: quicksort 
               ->  Append (actual rows=68370 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_19_chunk o1 (actual rows=3598 loops=1)
                           ->  Seq Scan on compress_hyper_6_36_chunk (actual rows=4 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_20_chunk o1_1 (actual rows=10794 loops=1)
                           ->  Seq Scan on compress_hyper_6_35_chunk (actual rows=12 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_21_chunk o1_2 (actual rows=3598 loops=1)
                           ->  Seq Scan on compress_hyper_6_34_chunk (actual rows=4 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_22_chunk o1_3 (actual rows=5038 loops=1)
                           ->  Seq Scan on compress_hyper_6_33_chunk (actual rows=6 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_23_chunk o1_4 (actual rows=15114 loops=1)
                           ->  Seq Scan on compress_hyper_6_32_chunk (actual rows=18 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_24_chunk o1_5 (actual rows=5038 loops=1)
                           ->  Seq Scan on compress_hyper_6_31_chunk (actual rows=6 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_25_chunk o1_6 (actual rows=5038 loops=1)
                           ->  Seq Scan on compress_hyper_6_30_chunk (actual rows=6 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_26_chunk o1_7 (actual rows=15114 loops=1)
                           ->  Seq Scan on compress_hyper_6_29_chunk (actual rows=18 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_27_chunk o1_8 (actual rows=5038 loops=1)
                           ->  Seq Scan on compress_hyper_6_28_chunk (actual rows=6 loops=1)
         ->  Sort (actual rows=100 loops=1)
               Sort Key: o2."time", o2.device_id
               Sort Method: quicksort 
               ->  Append (actual rows=68370 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_19_chunk o2 (actual rows=3598 loops=1)
                           ->  Seq Scan on compress_hyper_6_36_chunk compress_hyper_6_36_chunk_1 (actual rows=4 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_20_chunk o2_1 (actual rows=10794 loops=1)
                           ->  Seq Scan on compress_hyper_6_35_chunk compress_hyper_6_35_chunk_1 (actual rows=12 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_21_chunk o2_2 (actual rows=3598 loops=1)
                           ->  Seq Scan on compress_hyper_6_34_chunk compress_hyper_6_34_chunk_1 (actual rows=4 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_22_chunk o2_3 (actual rows=5038 loops=1)
                           ->  Seq Scan on compress_hyper_6_33_chunk compress_hyper_6_33_chunk_1 (actual rows=6 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_23_chunk o2_4 (actual rows=15114 loops=1)
                           ->  Seq Scan on compress_hyper_6_32_chunk compress_hyper_6_32_chunk_1 (actual rows=18 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_24_chunk o2_5 (actual rows=5038 loops=1)
                           ->  Seq Scan on compress_hyper_6_31_chunk compress_hyper_6_31_chunk_1 (actual rows=6 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_25_chunk o2_6 (actual rows=5038 loops=1)
                           ->  Seq Scan on compress_hyper_6_30_chunk compress_hyper_6_30_chunk_1 (actual rows=6 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_26_chunk o2_7 (actual rows=15114 loops=1)
                           ->  Seq Scan on compress_hyper_6_29_chunk compress_hyper_6_29_chunk_1 (actual rows=18 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_27_chunk o2_8 (actual rows=5038 loops=1)
                           ->  Seq Scan on compress_hyper_6_28_chunk compress_hyper_6_28_chunk_1 (actual rows=6 loops=1)
(47 rows)

-- test JOIN on device_id
-- should not use ordered append for 2nd hypertable
:PREFIX SELECT o1.time FROM :TEST_TABLE o1 INNER JOIN :TEST_TABLE o2 ON o1.device_id = o2.device_id WHERE o1.device_id = 1 ORDER BY o1.time LIMIT 100;
                                                    QUERY PLAN                                                     
-------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=100 loops=1)
   ->  Nested Loop (actual rows=100 loops=1)
         ->  Custom Scan (ChunkAppend) on metrics_space_compressed o1 (actual rows=1 loops=1)
               Order: o1."time"
               ->  Custom Scan (DecompressChunk) on _hyper_5_19_chunk o1_1 (actual rows=1 loops=1)
                     ->  Sort (actual rows=1 loops=1)
                           Sort Key: compress_hyper_6_36_chunk._ts_meta_sequence_num DESC
                           Sort Method: quicksort 
                           ->  Seq Scan on compress_hyper_6_36_chunk (actual rows=4 loops=1)
                                 Filter: (device_id = 1)
               ->  Custom Scan (DecompressChunk) on _hyper_5_22_chunk o1_2 (never executed)
                     ->  Sort (never executed)
                           Sort Key: compress_hyper_6_33_chunk._ts_meta_sequence_num DESC
                           ->  Seq Scan on compress_hyper_6_33_chunk (never executed)
                                 Filter: (device_id = 1)
               ->  Custom Scan (DecompressChunk) on _hyper_5_25_chunk o1_3 (never executed)
                     ->  Sort (never executed)
                           Sort Key: compress_hyper_6_30_chunk._ts_meta_sequence_num DESC
                           ->  Seq Scan on compress_hyper_6_30_chunk (never executed)
                                 Filter: (device_id = 1)
         ->  Append (actual rows=100 loops=1)
               ->  Custom Scan (DecompressChunk) on _hyper_5_25_chunk o2 (actual rows=100 loops=1)
                     ->  Seq Scan on compress_hyper_6_30_chunk compress_hyper_6_30_chunk_1 (actual rows=1 loops=1)
                           Filter: (device_id = 1)
               ->  Custom Scan (DecompressChunk) on _hyper_5_19_chunk o2_1 (never executed)
                     ->  Seq Scan on compress_hyper_6_36_chunk compress_hyper_6_36_chunk_1 (never executed)
                           Filter: (device_id = 1)
               ->  Custom Scan (DecompressChunk) on _hyper_5_22_chunk o2_2 (never executed)
                     ->  Seq Scan on compress_hyper_6_33_chunk compress_hyper_6_33_chunk_1 (never executed)
                           Filter: (device_id = 1)
(30 rows)

-- test JOIN on time column with implicit join
-- should use 2 ChunkAppend
:PREFIX SELECT o1.time FROM :TEST_TABLE o1, :TEST_TABLE o2 WHERE o1.time = o2.time ORDER BY o1.time LIMIT 100;
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=100 loops=1)
   ->  Merge Join (actual rows=100 loops=1)
         Merge Cond: (o1."time" = o2."time")
         ->  Sort (actual rows=20 loops=1)
               Sort Key: o1."time"
               Sort Method: quicksort 
               ->  Append (actual rows=68370 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_19_chunk o1 (actual rows=3598 loops=1)
                           ->  Seq Scan on compress_hyper_6_36_chunk (actual rows=4 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_20_chunk o1_1 (actual rows=10794 loops=1)
                           ->  Seq Scan on compress_hyper_6_35_chunk (actual rows=12 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_21_chunk o1_2 (actual rows=3598 loops=1)
                           ->  Seq Scan on compress_hyper_6_34_chunk (actual rows=4 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_22_chunk o1_3 (actual rows=5038 loops=1)
                           ->  Seq Scan on compress_hyper_6_33_chunk (actual rows=6 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_23_chunk o1_4 (actual rows=15114 loops=1)
                           ->  Seq Scan on compress_hyper_6_32_chunk (actual rows=18 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_24_chunk o1_5 (actual rows=5038 loops=1)
                           ->  Seq Scan on compress_hyper_6_31_chunk (actual rows=6 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_25_chunk o1_6 (actual rows=5038 loops=1)
                           ->  Seq Scan on compress_hyper_6_30_chunk (actual rows=6 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_26_chunk o1_7 (actual rows=15114 loops=1)
                           ->  Seq Scan on compress_hyper_6_29_chunk (actual rows=18 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_27_chunk o1_8 (actual rows=5038 loops=1)
                           ->  Seq Scan on compress_hyper_6_28_chunk (actual rows=6 loops=1)
         ->  Sort (actual rows=100 loops=1)
               Sort Key: o2."time"
               Sort Method: quicksort 
               ->  Append (actual rows=68370 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_19_chunk o2 (actual rows=3598 loops=1)
                           ->  Seq Scan on compress_hyper_6_36_chunk compress_hyper_6_36_chunk_1 (actual rows=4 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_20_chunk o2_1 (actual rows=10794 loops=1)
                           ->  Seq Scan on compress_hyper_6_35_chunk compress_hyper_6_35_chunk_1 (actual rows=12 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_21_chunk o2_2 (actual rows=3598 loops=1)
                           ->  Seq Scan on compress_hyper_6_34_chunk compress_hyper_6_34_chunk_1 (actual rows=4 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_22_chunk o2_3 (actual rows=5038 loops=1)
                           ->  Seq Scan on compress_hyper_6_33_chunk compress_hyper_6_33_chunk_1 (actual rows=6 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_23_chunk o2_4 (actual rows=15114 loops=1)
                           ->  Seq Scan on compress_hyper_6_32_chunk compress_hyper_6_32_chunk_1 (actual rows=18 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_24_chunk o2_5 (actual rows=5038 loops=1)
                           ->  Seq Scan on compress_hyper_6_31_chunk compress_hyper_6_31_chunk_1 (actual rows=6 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_25_chunk o2_6 (actual rows=5038 loops=1)
                           ->  Seq Scan on compress_hyper_6_30_chunk compress_hyper_6_30_chunk_1 (actual rows=6 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_26_chunk o2_7 (actual rows=15114 loops=1)
                           ->  Seq Scan on compress_hyper_6_29_chunk compress_hyper_6_29_chunk_1 (actual rows=18 loops=1)
                     ->  Custom Scan (DecompressChunk) on _hyper_5_27_chunk o2_8 (actual rows=5038 loops=1)
                           ->  Seq Scan on compress_hyper_6_28_chunk compress_hyper_6_28_chunk_1 (actual rows=6 loops=1)
(47 rows)

-- test JOIN on time column with 3 hypertables
-- should use 3 ChunkAppend
:PREFIX SELECT o1.time FROM :TEST_TABLE o1 INNER JOIN :TEST_TABLE o2 ON o1.time = o2.time INNER JOIN :TEST_TABLE o3 ON o1.time = o3.time ORDER BY o1.time LIMIT 100;
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Limit (actual rows=100 loops=1)
   ->  Nested Loop (actual rows=100 loops=1)
         Join Filter: (o1."time" = o3."time")
         Rows Removed by Join Filter: 1316920
         ->  Merge Join (actual rows=20 loops=1)
               Merge Cond: (o1."time" = o2."time")
               ->  Sort (actual rows=4 loops=1)
                     Sort Key: o1."time"
                     Sort Method: quicksort 
                     ->  Append (actual rows=68370 loops=1)
                           ->  Custom Scan (DecompressChunk) on _hyper_5_19_chunk o1 (actual rows=3598 loops=1)
                                 ->  Seq Scan on compress_hyper_6_36_chunk (actual rows=4 loops=1)
                           ->  Custom Scan (DecompressChunk) on _hyper_5_20_chunk o1_1 (actual rows=10794 loops=1)
                                 ->  Seq Scan on compress_hyper_6_35_chunk (actual rows=12 loops=1)
                           ->  Custom Scan (DecompressChunk) on _hyper_5_21_chunk o1_2 (actual rows=3598 loops=1)
                                 ->  Seq Scan on compress_hyper_6_34_chunk (actual rows=4 loops=1)
                           ->  Custom Scan (DecompressChunk) on _hyper_5_22_chunk o1_3 (actual rows=5038 loops=1)
                                 ->  Seq Scan on compress_hyper_6_33_chunk (actual rows=6 loops=1)
                           ->  Custom Scan (DecompressChunk) on _hyper_5_23_chunk o1_4 (actual rows=15114 loops=1)
                                 ->  Seq Scan on compress_hyper_6_32_chunk (actual rows=18 loops=1)
                           ->  Custom Scan (DecompressChunk) on _hyper_5_24_chunk o1_5 (actual rows=5038 loops=1)
                                 ->  Seq Scan on compress_hyper_6_31_chunk (actual rows=6 loops=1)
                           ->  Custom Scan (DecompressChunk) on _hyper_5_25_chunk o1_6 (actual rows=5038 loops=1)
                                 ->  Seq Scan on compress_hyper_6_30_chunk (actual rows=6 loops=1)
                           ->  Custom Scan (DecompressChunk) on _hyper_5_26_chunk o1_7 (actual rows=15114 loops=1)
                                 ->  Seq Scan on compress_hyper_6_29_chunk (actual rows=18 loops=1)
                           ->  Custom Scan (DecompressChunk) on _hyper_5_27_chunk o1_8 (actual rows=5038 loops=1)
                                 ->  Seq Scan on compress_hyper_6_28_chunk (actual rows=6 loops=1)
               ->  Sort (actual rows=20 loops=1)
                     Sort Key: o2."time"
                     Sort Method: quicksort 
                     ->  Append (actual rows=68370 loops=1)
                           ->  Custom Scan (DecompressChunk) on _hyper_5_19_chunk o2 (actual rows=3598 loops=1)
                                 ->  Seq Scan on compress_hyper_6_36_chunk compress_hyper_6_36_chunk_1 (actual rows=4 loops=1)
                           ->  Custom Scan (DecompressChunk) on _hyper_5_20_chunk o2_1 (actual rows=10794 loops=1)
                                 ->  Seq Scan on compress_hyper_6_35_chunk compress_hyper_6_35_chunk_1 (actual rows=12 loops=1)
                           ->  Custom Scan (DecompressChunk) on _hyper_5_21_chunk o2_2 (actual rows=3598 loops=1)
                                 ->  Seq Scan on compress_hyper_6_34_chunk compress_hyper_6_34_chunk_1 (actual rows=4 loops=1)
                           ->  Custom Scan (DecompressChunk) on _hyper_5_22_chunk o2_3 (actual rows=5038 loops=1)
                                 ->  Seq Scan on compress_hyper_6_33_chunk compress_hyper_6_33_chunk_1 (actual rows=6 loops=1)
                           ->  Custom Scan (DecompressChunk) on _hyper_5_23_chunk o2_4 (actual rows=15114 loops=1)
                                 ->  Seq Scan on compress_hyper_6_32_chunk compress_hyper_6_32_chunk_1 (actual rows=18 loops=1)
                           ->  Custom Scan (DecompressChunk) on _hyper_5_24_chunk o2_5 (actual rows=5038 loops=1)
                                 ->  Seq Scan on compress_hyper_6_31_chunk compress_hyper_6_31_chunk_1 (actual rows=6 loops=1)
                           ->  Custom Scan (DecompressChunk) on _hyper_5_25_chunk o2_6 (actual rows=5038 loops=1)
                                 ->  Seq Scan on compress_hyper_6_30_chunk compress_hyper_6_30_chunk_1 (actual rows=6 loops=1)
                           ->  Custom Scan (DecompressChunk) on _hyper_5_26_chunk o2_7 (actual rows=15114 loops=1)
                                 ->  Seq Scan on compress_hyper_6_29_chunk compress_hyper_6_29_chunk_1 (actual rows=18 loops=1)
                           ->  Custom Scan (DecompressChunk) on _hyper_5_27_chunk o2_8 (actual rows=5038 loops=1)
                                 ->  Seq Scan on compress_hyper_6_28_chunk compress_hyper_6_28_chunk_1 (actual rows=6 loops=1)
         ->  Append (actual rows=65851 loops=20)
               ->  Custom Scan (DecompressChunk) on _hyper_5_19_chunk o3 (actual rows=3598 loops=20)
                     ->  Seq Scan on compress_hyper_6_36_chunk compress_hyper_6_36_chunk_2 (actual rows=4 loops=20)
               ->  Custom Scan (DecompressChunk) on _hyper_5_20_chunk o3_1 (actual rows=10794 loops=20)
                     ->  Seq Scan on compress_hyper_6_35_chunk compress_hyper_6_35_chunk_2 (actual rows=12 loops=20)
               ->  Custom Scan (DecompressChunk) on _hyper_5_21_chunk o3_2 (actual rows=3598 loops=20)
                     ->  Seq Scan on compress_hyper_6_34_chunk compress_hyper_6_34_chunk_2 (actual rows=4 loops=20)
               ->  Custom Scan (DecompressChunk) on _hyper_5_22_chunk o3_3 (actual rows=5038 loops=19)
                     ->  Seq Scan on compress_hyper_6_33_chunk compress_hyper_6_33_chunk_2 (actual rows=6 loops=19)
               ->  Custom Scan (DecompressChunk) on _hyper_5_23_chunk o3_4 (actual rows=15114 loops=19)
                     ->  Seq Scan on compress_hyper_6_32_chunk compress_hyper_6_32_chunk_2 (actual rows=18 loops=19)
               ->  Custom Scan (DecompressChunk) on _hyper_5_24_chunk o3_5 (actual rows=5038 loops=19)
                     ->  Seq Scan on compress_hyper_6_31_chunk compress_hyper_6_31_chunk_2 (actual rows=6 loops=19)
               ->  Custom Scan (DecompressChunk) on _hyper_5_25_chunk o3_6 (actual rows=5038 loops=19)
                     ->  Seq Scan on compress_hyper_6_30_chunk compress_hyper_6_30_chunk_2 (actual rows=6 loops=19)
               ->  Custom Scan (DecompressChunk) on _hyper_5_26_chunk o3_7 (actual rows=15114 loops=19)
                     ->  Seq Scan on compress_hyper_6_29_chunk compress_hyper_6_29_chunk_2 (actual rows=18 loops=19)
               ->  Custom Scan (DecompressChunk) on _hyper_5_27_chunk o3_8 (actual rows=5038 loops=19)
                     ->  Seq Scan on compress_hyper_6_28_chunk compress_hyper_6_28_chunk_2 (actual rows=6 loops=19)
(69 rows)

-- get results for all the queries
-- run queries on uncompressed hypertable and store result
\set PREFIX ''
\set PREFIX_VERBOSE ''
\set ECHO none
