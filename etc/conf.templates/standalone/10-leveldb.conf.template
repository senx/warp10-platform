//
//   Copyright 2019-2021  SenX S.A.S.
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.
//


/////////////////////////////////////////////////////////////////////////////////////////
//
// L E V E L D B
//
/////////////////////////////////////////////////////////////////////////////////////////


//
// Directory where the leveldb files should be created
//
leveldb.home = ${standalone.home}/leveldb

//
// Flag indicating whether or not we tolerate pre-existing LevelDB directory, defaults to false
//
#leveldb.error.if.exists = false

// Whether to initialize LevelDB if not found in leveldb.home.
// If false and LevelDB is not initialized, Warp 10 will throw an error and won't start. leveldb.home will still be created.
// If true and LevelDB is not initialized, all necessary LevelDB files will be created in leveldb.home and Warp 10 will
// start as if LevelDB is already initialized.
// This configuration has no effect if LevelDB is already initialized.
// Defaults to false.
//
#leveldb.create.if.missing = false

//
// Flag to disable the native LevelDB implementation
// This flag is false by default if the configuration is missing 
// When running WarpInit or WarpRepair, use a system property with the same name
//
leveldb.native.disable = false

//
// Flag to disable the use of the pure Java LevelDB implementation
// This flag is false by default if the configuration is missing 
// When running WarpInit or WarpRepair, use a system property with the same name
//
leveldb.java.disable = false

//
// Rate of synchronous writes for the datapoints (update/deletes).
// This is a double between 0.0 (all writes asynchronous) and 1.0 (all writes synchronous).
// The default value is 1.0 (all writes are synchronous)
//
leveldb.data.syncrate = 1.0

//
// Rate of synchronous writes for the directory writes.
// This is a double between 0.0 (all writes asynchronous) and 1.0 (all writes synchronous)
// The default value is 1.0 (all writes are synchronous)
//
leveldb.directory.syncrate = 1.0

//
// 128/192/256 bits AES key for encrypting metadata prior to storage in LevelDB.
// Valid formats are hex:..., base64:... or, when using OSS, wrapped:....
//
#leveldb.metadata.aes = hex:hhhhhh...

//
// 128/192/256 bits AES key for encrypting data prior to storage in LevelDB.
// Valid formats are hex:..., base64:... or, when using OSS, wrapped:....
//
#leveldb.data.aes = hex:hhhhhh...

//
// Cache size for leveldb (in bytes)
//
leveldb.cache.size = 100000000

//
// Compression type to use for leveldb (SNAPPY/NONE)
//
leveldb.compression.type = SNAPPY

//
// Maximum number of open files to use for LevelDB.
// This value should be at least 10 when using the pure Java LevelDB implementation.
//
#leveldb.maxopenfiles = 1000

//
// LevelDB block size (in bytes)
//
#leveldb.block.size = 4096

//
// LevelDB block restart interval
//
#leveldb.block.restart.interval = 16

//
// Flag indicating whether or not to verify block checksums
//
#leveldb.verify.checksums = true

//
// Flag indicating whether or not to perform paranoid checks
//
#leveldb.paranoid.checks = false

//
// Size of write buffer (in bytes)
//
#leveldb.writebuffer.size = 4194304

//
// Geo Time Series count above which block caching will be disabled for LevelDB.
// The goal is to limit the cache pollution when scanning large chunks of data.
// Note that this limit is per fetch call to the backend, which means that in the case of parallel scanners it is for each parallel fetch attempt.
// Defaults to 0, meaning never disable the block cache
//
leveldb.blockcache.gts.threshold = 0

//
// Should the LevelDB cache be filled when scanning key space for deletes? Defaults to false.
//
#leveldb.delete.fillcache = false

//
// Should LevelDB checksums be verified when scanning key space for deletes? Defaults to true.
//
#leveldb.delete.verifychecksums = true
